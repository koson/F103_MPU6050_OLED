
F103_MPU6050_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008598  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  080086a8  080086a8  000186a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009158  08009158  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  08009158  08009158  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009158  08009158  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08009160  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000278  080093d8  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  080093d8  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a77e  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019b8  00000000  00000000  0002aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000179bb  00000000  00000000  0002d338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c24  00000000  00000000  00044cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008238c  00000000  00000000  0004c917  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ceca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f4c  00000000  00000000  000ced20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	08008690 	.word	0x08008690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	08008690 	.word	0x08008690

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f001 f89f 	bl	800216c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f897 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 f909 	bl	8001248 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001036:	f000 f8d9 	bl	80011ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 800103a:	f000 fcfd 	bl	8001a38 <SSD1306_Init>
  while (MPU6050_Init(&hi2c1) == 1);
 800103e:	bf00      	nop
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <main+0x11c>)
 8001042:	f000 f95f 	bl	8001304 <MPU6050_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d0f9      	beq.n	8001040 <main+0x1c>
	  SSD1306_Puts ("SHAHPAR", &Font_7x10, 1);
	  SSD1306_UpdateScreen(); // update screen
	  HAL_Delay(10);
	  */

	  MPU6050_Read_All(&hi2c1, &MPU6050);
 800104c:	493d      	ldr	r1, [pc, #244]	; (8001144 <main+0x120>)
 800104e:	483c      	ldr	r0, [pc, #240]	; (8001140 <main+0x11c>)
 8001050:	f000 f9b2 	bl	80013b8 <MPU6050_Read_All>

	  SSD1306_GotoXY (10, 10);
 8001054:	210a      	movs	r1, #10
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fe56 	bl	8001d08 <SSD1306_GotoXY>
	  snprintf(output, 20, "%f", MPU6050.Gx);
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <main+0x120>)
 800105e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001062:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001066:	1d38      	adds	r0, r7, #4
 8001068:	e9cd 3400 	strd	r3, r4, [sp]
 800106c:	4a36      	ldr	r2, [pc, #216]	; (8001148 <main+0x124>)
 800106e:	2114      	movs	r1, #20
 8001070:	f004 f860 	bl	8005134 <sniprintf>
	  SSD1306_Puts ("X: ", &Font_7x10, 1);
 8001074:	2201      	movs	r2, #1
 8001076:	4935      	ldr	r1, [pc, #212]	; (800114c <main+0x128>)
 8001078:	4835      	ldr	r0, [pc, #212]	; (8001150 <main+0x12c>)
 800107a:	f000 fedb 	bl	8001e34 <SSD1306_Puts>
	  SSD1306_Puts(output, &Font_7x10, 1);
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2201      	movs	r2, #1
 8001082:	4932      	ldr	r1, [pc, #200]	; (800114c <main+0x128>)
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fed5 	bl	8001e34 <SSD1306_Puts>

	  SSD1306_GotoXY (10, 20);
 800108a:	2114      	movs	r1, #20
 800108c:	200a      	movs	r0, #10
 800108e:	f000 fe3b 	bl	8001d08 <SSD1306_GotoXY>
	  snprintf(output, 20, "%f", MPU6050.Gy);
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <main+0x120>)
 8001094:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001098:	e9d4 3400 	ldrd	r3, r4, [r4]
 800109c:	1d38      	adds	r0, r7, #4
 800109e:	e9cd 3400 	strd	r3, r4, [sp]
 80010a2:	4a29      	ldr	r2, [pc, #164]	; (8001148 <main+0x124>)
 80010a4:	2114      	movs	r1, #20
 80010a6:	f004 f845 	bl	8005134 <sniprintf>
	  SSD1306_Puts ("Y: ", &Font_7x10, 1);
 80010aa:	2201      	movs	r2, #1
 80010ac:	4927      	ldr	r1, [pc, #156]	; (800114c <main+0x128>)
 80010ae:	4829      	ldr	r0, [pc, #164]	; (8001154 <main+0x130>)
 80010b0:	f000 fec0 	bl	8001e34 <SSD1306_Puts>
	  SSD1306_Puts(output, &Font_7x10, 1);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2201      	movs	r2, #1
 80010b8:	4924      	ldr	r1, [pc, #144]	; (800114c <main+0x128>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 feba 	bl	8001e34 <SSD1306_Puts>

	  SSD1306_GotoXY (10, 30);
 80010c0:	211e      	movs	r1, #30
 80010c2:	200a      	movs	r0, #10
 80010c4:	f000 fe20 	bl	8001d08 <SSD1306_GotoXY>
	  snprintf(output, 20, "%f", MPU6050.Gz);
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <main+0x120>)
 80010ca:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80010ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80010d2:	1d38      	adds	r0, r7, #4
 80010d4:	e9cd 3400 	strd	r3, r4, [sp]
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <main+0x124>)
 80010da:	2114      	movs	r1, #20
 80010dc:	f004 f82a 	bl	8005134 <sniprintf>
	  SSD1306_Puts ("Z: ", &Font_7x10, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	491a      	ldr	r1, [pc, #104]	; (800114c <main+0x128>)
 80010e4:	481c      	ldr	r0, [pc, #112]	; (8001158 <main+0x134>)
 80010e6:	f000 fea5 	bl	8001e34 <SSD1306_Puts>
	  SSD1306_Puts(output, &Font_7x10, 1);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2201      	movs	r2, #1
 80010ee:	4917      	ldr	r1, [pc, #92]	; (800114c <main+0x128>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fe9f 	bl	8001e34 <SSD1306_Puts>

	  SSD1306_GotoXY (10, 40);
 80010f6:	2128      	movs	r1, #40	; 0x28
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fe05 	bl	8001d08 <SSD1306_GotoXY>
	  snprintf(output, 20, "%f", MPU6050.Temperature);
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <main+0x120>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f990 	bl	8000428 <__aeabi_f2d>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	1d38      	adds	r0, r7, #4
 800110e:	e9cd 3400 	strd	r3, r4, [sp]
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <main+0x124>)
 8001114:	2114      	movs	r1, #20
 8001116:	f004 f80d 	bl	8005134 <sniprintf>
	  SSD1306_Puts ("TEMP: ", &Font_7x10, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	490b      	ldr	r1, [pc, #44]	; (800114c <main+0x128>)
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <main+0x138>)
 8001120:	f000 fe88 	bl	8001e34 <SSD1306_Puts>
	  SSD1306_Puts(output, &Font_7x10, 1);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2201      	movs	r2, #1
 8001128:	4908      	ldr	r1, [pc, #32]	; (800114c <main+0x128>)
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fe82 	bl	8001e34 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); // update screen
 8001130:	f000 fd46 	bl	8001bc0 <SSD1306_UpdateScreen>
	  HAL_Delay(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f001 f87a 	bl	8002230 <HAL_Delay>
  {
 800113c:	e786      	b.n	800104c <main+0x28>
 800113e:	bf00      	nop
 8001140:	200006a8 	.word	0x200006a8
 8001144:	20000700 	.word	0x20000700
 8001148:	080086a8 	.word	0x080086a8
 800114c:	20000000 	.word	0x20000000
 8001150:	080086ac 	.word	0x080086ac
 8001154:	080086b0 	.word	0x080086b0
 8001158:	080086b4 	.word	0x080086b4
 800115c:	080086b8 	.word	0x080086b8

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2228      	movs	r2, #40	; 0x28
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f9a4 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800119e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fd55 	bl	8003c58 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011b4:	f000 f8a0 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2102      	movs	r1, #2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 ffc0 	bl	8004158 <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011de:	f000 f88b 	bl	80012f8 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3740      	adds	r7, #64	; 0x40
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_I2C1_Init+0x50>)
 800122a:	f001 fa79 	bl	8002720 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 f860 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200006a8 	.word	0x200006a8
 8001240:	40005400 	.word	0x40005400
 8001244:	00061a80 	.word	0x00061a80

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_GPIO_Init+0xa8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <MX_GPIO_Init+0xa8>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_GPIO_Init+0xa8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_GPIO_Init+0xa8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <MX_GPIO_Init+0xa8>)
 800127a:	f043 0320 	orr.w	r3, r3, #32
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_GPIO_Init+0xa8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_GPIO_Init+0xa8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <MX_GPIO_Init+0xa8>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_GPIO_Init+0xa8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_GPIO_Init+0xa8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <MX_GPIO_Init+0xa8>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_GPIO_Init+0xa8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_GPIO_Init+0xac>)
 80012c4:	f001 fa14 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0xac>)
 80012e2:	f001 f8ab 	bl	800243c <HAL_GPIO_Init>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40011000 	.word	0x40011000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af04      	add	r7, sp, #16
 800130a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f107 030f 	add.w	r3, r7, #15
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2275      	movs	r2, #117	; 0x75
 800131e:	21d0      	movs	r1, #208	; 0xd0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 fd2d 	bl	8002d80 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b68      	cmp	r3, #104	; 0x68
 800132a:	d13d      	bne.n	80013a8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	2301      	movs	r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	f107 030e 	add.w	r3, r7, #14
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	226b      	movs	r2, #107	; 0x6b
 8001342:	21d0      	movs	r1, #208	; 0xd0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f001 fc21 	bl	8002b8c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800134a:	2307      	movs	r3, #7
 800134c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 030e 	add.w	r3, r7, #14
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	2219      	movs	r2, #25
 8001360:	21d0      	movs	r1, #208	; 0xd0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f001 fc12 	bl	8002b8c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	221c      	movs	r2, #28
 800137e:	21d0      	movs	r1, #208	; 0xd0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f001 fc03 	bl	8002b8c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2301      	movs	r3, #1
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f107 030e 	add.w	r3, r7, #14
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	221b      	movs	r2, #27
 800139c:	21d0      	movs	r1, #208	; 0xd0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f001 fbf4 	bl	8002b8c <HAL_I2C_Mem_Write>
        return 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <MPU6050_Init+0xa6>
    }
    return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	0000      	movs	r0, r0
 80013b4:	0000      	movs	r0, r0
	...

080013b8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80013b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013bc:	b094      	sub	sp, #80	; 0x50
 80013be:	af04      	add	r7, sp, #16
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	230e      	movs	r3, #14
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	223b      	movs	r2, #59	; 0x3b
 80013d6:	21d0      	movs	r1, #208	; 0xd0
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f001 fcd1 	bl	8002d80 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80013de:	7a3b      	ldrb	r3, [r7, #8]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	7a7b      	ldrb	r3, [r7, #9]
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80013f0:	7abb      	ldrb	r3, [r7, #10]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21a      	sxth	r2, r3
 8001408:	7b7b      	ldrb	r3, [r7, #13]
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b21a      	sxth	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001422:	7c3b      	ldrb	r3, [r7, #16]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	7c7b      	ldrb	r3, [r7, #17]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21a      	sxth	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001434:	7cbb      	ldrb	r3, [r7, #18]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001446:	7d3b      	ldrb	r3, [r7, #20]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	7d7b      	ldrb	r3, [r7, #21]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21a      	sxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ffd0 	bl	8000404 <__aeabi_i2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4bb7      	ldr	r3, [pc, #732]	; (8001748 <MPU6050_Read_All+0x390>)
 800146a:	f7ff f95f 	bl	800072c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffc0 	bl	8000404 <__aeabi_i2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4baf      	ldr	r3, [pc, #700]	; (8001748 <MPU6050_Read_All+0x390>)
 800148a:	f7ff f94f 	bl	800072c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ffb0 	bl	8000404 <__aeabi_i2d>
 80014a4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001730 <MPU6050_Read_All+0x378>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f93f 	bl	800072c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80014b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc0d 	bl	8000cdc <__aeabi_i2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	49a1      	ldr	r1, [pc, #644]	; (800174c <MPU6050_Read_All+0x394>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fd10 	bl	8000eec <__aeabi_fdiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	49a0      	ldr	r1, [pc, #640]	; (8001750 <MPU6050_Read_All+0x398>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb4f 	bl	8000b74 <__addsf3>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff8d 	bl	8000404 <__aeabi_i2d>
 80014ea:	a393      	add	r3, pc, #588	; (adr r3, 8001738 <MPU6050_Read_All+0x380>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f91c 	bl	800072c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ff7d 	bl	8000404 <__aeabi_i2d>
 800150a:	a38b      	add	r3, pc, #556	; (adr r3, 8001738 <MPU6050_Read_All+0x380>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f90c 	bl	800072c <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff6d 	bl	8000404 <__aeabi_i2d>
 800152a:	a383      	add	r3, pc, #524	; (adr r3, 8001738 <MPU6050_Read_All+0x380>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f8fc 	bl	800072c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800153e:	f000 fe6d 	bl	800221c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	4b83      	ldr	r3, [pc, #524]	; (8001754 <MPU6050_Read_All+0x39c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff4a 	bl	80003e4 <__aeabi_ui2d>
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b80      	ldr	r3, [pc, #512]	; (8001758 <MPU6050_Read_All+0x3a0>)
 8001556:	f7ff f8e9 	bl	800072c <__aeabi_ddiv>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001562:	f000 fe5b 	bl	800221c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	4b7a      	ldr	r3, [pc, #488]	; (8001754 <MPU6050_Read_All+0x39c>)
 800156a:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	461a      	mov	r2, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157a:	fb03 f202 	mul.w	r2, r3, r2
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001584:	4619      	mov	r1, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800158c:	fb03 f301 	mul.w	r3, r3, r1
 8001590:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff36 	bl	8000404 <__aeabi_i2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f006 fe96 	bl	80082d0 <sqrt>
 80015a4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015b4:	f7ff f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d119      	bne.n	80015f2 <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff1d 	bl	8000404 <__aeabi_i2d>
 80015ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ce:	f7ff f8ad 	bl	800072c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f006 fce9 	bl	8007fb0 <atan>
 80015de:	a358      	add	r3, pc, #352	; (adr r3, 8001740 <MPU6050_Read_All+0x388>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe ff78 	bl	80004d8 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80015f0:	e005      	b.n	80015fe <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	425b      	negs	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fefc 	bl	8000404 <__aeabi_i2d>
 800160c:	4682      	mov	sl, r0
 800160e:	468b      	mov	fp, r1
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fef4 	bl	8000404 <__aeabi_i2d>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4650      	mov	r0, sl
 8001622:	4659      	mov	r1, fp
 8001624:	f006 fe52 	bl	80082cc <atan2>
 8001628:	a345      	add	r3, pc, #276	; (adr r3, 8001740 <MPU6050_Read_All+0x388>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ff53 	bl	80004d8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <MPU6050_Read_All+0x3a4>)
 8001640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001644:	f7ff f9ba 	bl	80009bc <__aeabi_dcmplt>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00a      	beq.n	8001664 <MPU6050_Read_All+0x2ac>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <MPU6050_Read_All+0x3a8>)
 800165a:	f7ff f9cd 	bl	80009f8 <__aeabi_dcmpgt>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d114      	bne.n	800168e <MPU6050_Read_All+0x2d6>
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <MPU6050_Read_All+0x3a8>)
 800166a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800166e:	f7ff f9c3 	bl	80009f8 <__aeabi_dcmpgt>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <MPU6050_Read_All+0x2ec>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <MPU6050_Read_All+0x3a4>)
 8001684:	f7ff f99a 	bl	80009bc <__aeabi_dcmplt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 800168e:	4935      	ldr	r1, [pc, #212]	; (8001764 <MPU6050_Read_All+0x3ac>)
 8001690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001694:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001698:	6839      	ldr	r1, [r7, #0]
 800169a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80016a2:	e012      	b.n	80016ca <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80016aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016b2:	e9cd 2300 	strd	r2, r3, [sp]
 80016b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ba:	482a      	ldr	r0, [pc, #168]	; (8001764 <MPU6050_Read_All+0x3ac>)
 80016bc:	f000 f856 	bl	800176c <Kalman_getAngle>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80016d0:	4690      	mov	r8, r2
 80016d2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <MPU6050_Read_All+0x3a8>)
 80016dc:	4640      	mov	r0, r8
 80016de:	4649      	mov	r1, r9
 80016e0:	f7ff f98a 	bl	80009f8 <__aeabi_dcmpgt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016f0:	4614      	mov	r4, r2
 80016f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001702:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001706:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800170a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800170e:	e9cd 3400 	strd	r3, r4, [sp]
 8001712:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <MPU6050_Read_All+0x3b0>)
 8001718:	f000 f828 	bl	800176c <Kalman_getAngle>
 800171c:	4603      	mov	r3, r0
 800171e:	460c      	mov	r4, r1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

}
 8001726:	bf00      	nop
 8001728:	3740      	adds	r7, #64	; 0x40
 800172a:	46bd      	mov	sp, r7
 800172c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001730:	00000000 	.word	0x00000000
 8001734:	40cc2900 	.word	0x40cc2900
 8001738:	00000000 	.word	0x00000000
 800173c:	40606000 	.word	0x40606000
 8001740:	1a63c1f8 	.word	0x1a63c1f8
 8001744:	404ca5dc 	.word	0x404ca5dc
 8001748:	40d00000 	.word	0x40d00000
 800174c:	43aa0000 	.word	0x43aa0000
 8001750:	42121eb8 	.word	0x42121eb8
 8001754:	20000758 	.word	0x20000758
 8001758:	408f4000 	.word	0x408f4000
 800175c:	c0568000 	.word	0xc0568000
 8001760:	40568000 	.word	0x40568000
 8001764:	20000050 	.word	0x20000050
 8001768:	20000008 	.word	0x20000008

0800176c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b092      	sub	sp, #72	; 0x48
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f103 0420 	add.w	r4, r3, #32
 800177e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001782:	461a      	mov	r2, r3
 8001784:	4623      	mov	r3, r4
 8001786:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800178a:	f7fe fced 	bl	8000168 <__aeabi_dsub>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800179c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017a4:	f7fe fe98 	bl	80004d8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fcdc 	bl	800016c <__adddf3>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80017ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017ce:	f7fe fe83 	bl	80004d8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017e0:	f7fe fcc2 	bl	8000168 <__aeabi_dsub>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80017f2:	f7fe fcb9 	bl	8000168 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fcb2 	bl	800016c <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001814:	f7fe fe60 	bl	80004d8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fca4 	bl	800016c <__adddf3>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800183a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800183e:	f7fe fe4b 	bl	80004d8 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fc8d 	bl	8000168 <__aeabi_dsub>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001864:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001868:	f7fe fe36 	bl	80004d8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fc78 	bl	8000168 <__aeabi_dsub>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800188e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001892:	f7fe fe21 	bl	80004d8 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fc65 	bl	800016c <__adddf3>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f103 0410 	add.w	r4, r3, #16
 80018b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	f7fe fc54 	bl	800016c <__adddf3>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018d6:	f7fe ff29 	bl	800072c <__aeabi_ddiv>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80018e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018ec:	f7fe ff1e 	bl	800072c <__aeabi_ddiv>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f103 0418 	add.w	r4, r3, #24
 80018fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001902:	461a      	mov	r2, r3
 8001904:	4623      	mov	r3, r4
 8001906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190a:	f7fe fc2d 	bl	8000168 <__aeabi_dsub>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800191c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001920:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001924:	f7fe fdd8 	bl	80004d8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fc1c 	bl	800016c <__adddf3>
 8001934:	4603      	mov	r3, r0
 8001936:	460c      	mov	r4, r1
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001944:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800194c:	f7fe fdc4 	bl	80004d8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc08 	bl	800016c <__adddf3>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800196c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001970:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800197a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800197e:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001988:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800198c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001990:	f7fe fda2 	bl	80004d8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fbe4 	bl	8000168 <__aeabi_dsub>
 80019a0:	4603      	mov	r3, r0
 80019a2:	460c      	mov	r4, r1
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80019b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019b8:	f7fe fd8e 	bl	80004d8 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fbd0 	bl	8000168 <__aeabi_dsub>
 80019c8:	4603      	mov	r3, r0
 80019ca:	460c      	mov	r4, r1
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80019d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e0:	f7fe fd7a 	bl	80004d8 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fbbc 	bl	8000168 <__aeabi_dsub>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001a00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a08:	f7fe fd66 	bl	80004d8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fba8 	bl	8000168 <__aeabi_dsub>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f103 0418 	add.w	r4, r3, #24
 8001a28:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	4621      	mov	r1, r4
 8001a30:	3748      	adds	r7, #72	; 0x48
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a38 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a3e:	f000 fa1f 	bl	8001e80 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a42:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a46:	2201      	movs	r2, #1
 8001a48:	2178      	movs	r1, #120	; 0x78
 8001a4a:	485b      	ldr	r0, [pc, #364]	; (8001bb8 <SSD1306_Init+0x180>)
 8001a4c:	f001 fbfa 	bl	8003244 <HAL_I2C_IsDeviceReady>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e0a9      	b.n	8001bae <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a5a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a60:	e002      	b.n	8001a68 <SSD1306_Init+0x30>
		p--;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a6e:	22ae      	movs	r2, #174	; 0xae
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	; 0x78
 8001a74:	f000 fa60 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a78:	2220      	movs	r2, #32
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2078      	movs	r0, #120	; 0x78
 8001a7e:	f000 fa5b 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a82:	2210      	movs	r2, #16
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	; 0x78
 8001a88:	f000 fa56 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a8c:	22b0      	movs	r2, #176	; 0xb0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	; 0x78
 8001a92:	f000 fa51 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a96:	22c8      	movs	r2, #200	; 0xc8
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	; 0x78
 8001a9c:	f000 fa4c 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2078      	movs	r0, #120	; 0x78
 8001aa6:	f000 fa47 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001aaa:	2210      	movs	r2, #16
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	; 0x78
 8001ab0:	f000 fa42 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	; 0x78
 8001aba:	f000 fa3d 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001abe:	2281      	movs	r2, #129	; 0x81
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	; 0x78
 8001ac4:	f000 fa38 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001ac8:	22ff      	movs	r2, #255	; 0xff
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	; 0x78
 8001ace:	f000 fa33 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ad2:	22a1      	movs	r2, #161	; 0xa1
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	; 0x78
 8001ad8:	f000 fa2e 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001adc:	22a6      	movs	r2, #166	; 0xa6
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	; 0x78
 8001ae2:	f000 fa29 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ae6:	22a8      	movs	r2, #168	; 0xa8
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	; 0x78
 8001aec:	f000 fa24 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001af0:	223f      	movs	r2, #63	; 0x3f
 8001af2:	2100      	movs	r1, #0
 8001af4:	2078      	movs	r0, #120	; 0x78
 8001af6:	f000 fa1f 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001afa:	22a4      	movs	r2, #164	; 0xa4
 8001afc:	2100      	movs	r1, #0
 8001afe:	2078      	movs	r0, #120	; 0x78
 8001b00:	f000 fa1a 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b04:	22d3      	movs	r2, #211	; 0xd3
 8001b06:	2100      	movs	r1, #0
 8001b08:	2078      	movs	r0, #120	; 0x78
 8001b0a:	f000 fa15 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2078      	movs	r0, #120	; 0x78
 8001b14:	f000 fa10 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b18:	22d5      	movs	r2, #213	; 0xd5
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2078      	movs	r0, #120	; 0x78
 8001b1e:	f000 fa0b 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b22:	22f0      	movs	r2, #240	; 0xf0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	; 0x78
 8001b28:	f000 fa06 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b2c:	22d9      	movs	r2, #217	; 0xd9
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2078      	movs	r0, #120	; 0x78
 8001b32:	f000 fa01 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b36:	2222      	movs	r2, #34	; 0x22
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2078      	movs	r0, #120	; 0x78
 8001b3c:	f000 f9fc 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b40:	22da      	movs	r2, #218	; 0xda
 8001b42:	2100      	movs	r1, #0
 8001b44:	2078      	movs	r0, #120	; 0x78
 8001b46:	f000 f9f7 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2078      	movs	r0, #120	; 0x78
 8001b50:	f000 f9f2 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b54:	22db      	movs	r2, #219	; 0xdb
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	; 0x78
 8001b5a:	f000 f9ed 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b5e:	2220      	movs	r2, #32
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	; 0x78
 8001b64:	f000 f9e8 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b68:	228d      	movs	r2, #141	; 0x8d
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2078      	movs	r0, #120	; 0x78
 8001b6e:	f000 f9e3 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b72:	2214      	movs	r2, #20
 8001b74:	2100      	movs	r1, #0
 8001b76:	2078      	movs	r0, #120	; 0x78
 8001b78:	f000 f9de 	bl	8001f38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b7c:	22af      	movs	r2, #175	; 0xaf
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2078      	movs	r0, #120	; 0x78
 8001b82:	f000 f9d9 	bl	8001f38 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b86:	222e      	movs	r2, #46	; 0x2e
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2078      	movs	r0, #120	; 0x78
 8001b8c:	f000 f9d4 	bl	8001f38 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f000 f843 	bl	8001c1c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b96:	f000 f813 	bl	8001bc0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <SSD1306_Init+0x184>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SSD1306_Init+0x184>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SSD1306_Init+0x184>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200006a8 	.word	0x200006a8
 8001bbc:	20000694 	.word	0x20000694

08001bc0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e01d      	b.n	8001c08 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	3b50      	subs	r3, #80	; 0x50
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2078      	movs	r0, #120	; 0x78
 8001bd8:	f000 f9ae 	bl	8001f38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2078      	movs	r0, #120	; 0x78
 8001be2:	f000 f9a9 	bl	8001f38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001be6:	2210      	movs	r2, #16
 8001be8:	2100      	movs	r1, #0
 8001bea:	2078      	movs	r0, #120	; 0x78
 8001bec:	f000 f9a4 	bl	8001f38 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	01db      	lsls	r3, r3, #7
 8001bf4:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <SSD1306_UpdateScreen+0x58>)
 8001bf6:	441a      	add	r2, r3
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	2078      	movs	r0, #120	; 0x78
 8001bfe:	f000 f953 	bl	8001ea8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	3301      	adds	r3, #1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b07      	cmp	r3, #7
 8001c0c:	d9de      	bls.n	8001bcc <SSD1306_UpdateScreen+0xc>
	}
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000294 	.word	0x20000294

08001c1c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <SSD1306_Fill+0x14>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <SSD1306_Fill+0x16>
 8001c30:	23ff      	movs	r3, #255	; 0xff
 8001c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c36:	4619      	mov	r1, r3
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <SSD1306_Fill+0x2c>)
 8001c3a:	f002 fc3f 	bl	80044bc <memset>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000294 	.word	0x20000294

08001c4c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
 8001c56:	460b      	mov	r3, r1
 8001c58:	80bb      	strh	r3, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	70fb      	strb	r3, [r7, #3]
	if (
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b7f      	cmp	r3, #127	; 0x7f
 8001c62:	d848      	bhi.n	8001cf6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	2b3f      	cmp	r3, #63	; 0x3f
 8001c68:	d845      	bhi.n	8001cf6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <SSD1306_DrawPixel+0xb4>)
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d11a      	bne.n	8001cbc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	88bb      	ldrh	r3, [r7, #4]
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	01db      	lsls	r3, r3, #7
 8001c92:	4413      	add	r3, r2
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <SSD1306_DrawPixel+0xb8>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b259      	sxtb	r1, r3
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	01db      	lsls	r3, r3, #7
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2c9      	uxtb	r1, r1
 8001cb6:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <SSD1306_DrawPixel+0xb8>)
 8001cb8:	54d1      	strb	r1, [r2, r3]
 8001cba:	e01d      	b.n	8001cf8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	88bb      	ldrh	r3, [r7, #4]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	b298      	uxth	r0, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <SSD1306_DrawPixel+0xb8>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	b25a      	sxtb	r2, r3
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b259      	sxtb	r1, r3
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	4603      	mov	r3, r0
 8001cea:	01db      	lsls	r3, r3, #7
 8001cec:	4413      	add	r3, r2
 8001cee:	b2c9      	uxtb	r1, r1
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <SSD1306_DrawPixel+0xb8>)
 8001cf2:	54d1      	strb	r1, [r2, r3]
 8001cf4:	e000      	b.n	8001cf8 <SSD1306_DrawPixel+0xac>
		return;
 8001cf6:	bf00      	nop
	}
}
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000694 	.word	0x20000694
 8001d04:	20000294 	.word	0x20000294

08001d08 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	80fb      	strh	r3, [r7, #6]
 8001d14:	4613      	mov	r3, r2
 8001d16:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <SSD1306_GotoXY+0x28>)
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <SSD1306_GotoXY+0x28>)
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	8053      	strh	r3, [r2, #2]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000694 	.word	0x20000694

08001d34 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	4613      	mov	r3, r2
 8001d42:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
	if (
 8001d50:	2b7f      	cmp	r3, #127	; 0x7f
 8001d52:	dc07      	bgt.n	8001d64 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001d56:	885b      	ldrh	r3, [r3, #2]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d60:	2b3f      	cmp	r3, #63	; 0x3f
 8001d62:	dd01      	ble.n	8001d68 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e05e      	b.n	8001e26 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e04b      	b.n	8001e06 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	3b20      	subs	r3, #32
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	7849      	ldrb	r1, [r1, #1]
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	440b      	add	r3, r1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e030      	b.n	8001df4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b298      	uxth	r0, r3
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001db0:	885a      	ldrh	r2, [r3, #2]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	79ba      	ldrb	r2, [r7, #6]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7ff ff45 	bl	8001c4c <SSD1306_DrawPixel>
 8001dc2:	e014      	b.n	8001dee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	b298      	uxth	r0, r3
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001dd2:	885a      	ldrh	r2, [r3, #2]
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf0c      	ite	eq
 8001de2:	2301      	moveq	r3, #1
 8001de4:	2300      	movne	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	f7ff ff2f 	bl	8001c4c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d3c8      	bcc.n	8001d92 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d3ad      	bcc.n	8001d6e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <SSD1306_Putc+0xfc>)
 8001e22:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000694 	.word	0x20000694

08001e34 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001e42:	e012      	b.n	8001e6a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff71 	bl	8001d34 <SSD1306_Putc>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d002      	beq.n	8001e64 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	e008      	b.n	8001e76 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3301      	adds	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1e8      	bne.n	8001e44 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	781b      	ldrb	r3, [r3, #0]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <ssd1306_I2C_Init+0x24>)
 8001e88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e8a:	e002      	b.n	8001e92 <ssd1306_I2C_Init+0x12>
		p--;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f9      	bne.n	8001e8c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	0003d090 	.word	0x0003d090

08001ea8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b0c7      	sub	sp, #284	; 0x11c
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4639      	mov	r1, r7
 8001eb4:	600a      	str	r2, [r1, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	4622      	mov	r2, r4
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	1dbb      	adds	r3, r7, #6
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	1dba      	adds	r2, r7, #6
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001eda:	e010      	b.n	8001efe <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001edc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ee0:	463a      	mov	r2, r7
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	441a      	add	r2, r3
 8001ee6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001eea:	3301      	adds	r3, #1
 8001eec:	7811      	ldrb	r1, [r2, #0]
 8001eee:	f107 020c 	add.w	r2, r7, #12
 8001ef2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ef4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001efe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	1d3a      	adds	r2, r7, #4
 8001f06:	8812      	ldrh	r2, [r2, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8e7      	bhi.n	8001edc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b299      	uxth	r1, r3
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	f107 020c 	add.w	r2, r7, #12
 8001f1e:	230a      	movs	r3, #10
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4603      	mov	r3, r0
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <ssd1306_I2C_WriteMulti+0x8c>)
 8001f26:	f000 fd33 	bl	8002990 <HAL_I2C_Master_Transmit>
}
 8001f2a:	bf00      	nop
 8001f2c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}
 8001f34:	200006a8 	.word	0x200006a8

08001f38 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	460b      	mov	r3, r1
 8001f44:	71bb      	strb	r3, [r7, #6]
 8001f46:	4613      	mov	r3, r2
 8001f48:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f4e:	797b      	ldrb	r3, [r7, #5]
 8001f50:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	b299      	uxth	r1, r3
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <ssd1306_I2C_Write+0x38>)
 8001f62:	f000 fd15 	bl	8002990 <HAL_I2C_Master_Transmit>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200006a8 	.word	0x200006a8

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_MspInit+0x5c>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_MspInit+0x5c>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6193      	str	r3, [r2, #24]
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_MspInit+0x5c>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_MspInit+0x5c>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_MspInit+0x5c>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_MspInit+0x5c>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_MspInit+0x60>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_MspInit+0x60>)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a15      	ldr	r2, [pc, #84]	; (8002048 <HAL_I2C_MspInit+0x70>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d123      	bne.n	8002040 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_I2C_MspInit+0x74>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <HAL_I2C_MspInit+0x74>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_I2C_MspInit+0x74>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002010:	23c0      	movs	r3, #192	; 0xc0
 8002012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002014:	2312      	movs	r3, #18
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4619      	mov	r1, r3
 8002022:	480b      	ldr	r0, [pc, #44]	; (8002050 <HAL_I2C_MspInit+0x78>)
 8002024:	f000 fa0a 	bl	800243c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_I2C_MspInit+0x74>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_I2C_MspInit+0x74>)
 800202e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_I2C_MspInit+0x74>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40005400 	.word	0x40005400
 800204c:	40021000 	.word	0x40021000
 8002050:	40010c00 	.word	0x40010c00

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <HardFault_Handler+0x4>

08002066 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <MemManage_Handler+0x4>

0800206c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <BusFault_Handler+0x4>

08002072 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f8aa 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f002 f9c6 	bl	8004468 <__errno>
 80020dc:	4602      	mov	r2, r0
 80020de:	230c      	movs	r3, #12
 80020e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20005000 	.word	0x20005000
 8002108:	00000400 	.word	0x00000400
 800210c:	2000069c 	.word	0x2000069c
 8002110:	20000768 	.word	0x20000768

08002114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002122:	e003      	b.n	800212c <LoopCopyDataInit>

08002124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800212a:	3104      	adds	r1, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002134:	d3f6      	bcc.n	8002124 <CopyDataInit>
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002138:	e002      	b.n	8002140 <LoopFillZerobss>

0800213a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800213c:	f842 3b04 	str.w	r3, [r2], #4

08002140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002144:	d3f9      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002146:	f7ff ffe5 	bl	8002114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f002 f993 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214e:	f7fe ff69 	bl	8001024 <main>
  bx lr
 8002152:	4770      	bx	lr
  ldr r3, =_sidata
 8002154:	08009160 	.word	0x08009160
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800215c:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 8002160:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 8002164:	20000764 	.word	0x20000764

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x28>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x28>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f929 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fef4 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f933 	bl	8002422 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f909 	bl	80023ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000098 	.word	0x20000098
 80021f0:	200000a0 	.word	0x200000a0
 80021f4:	2000009c 	.word	0x2000009c

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_IncTick+0x1c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x20>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a03      	ldr	r2, [pc, #12]	; (8002218 <HAL_IncTick+0x20>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	200000a0 	.word	0x200000a0
 8002218:	2000075c 	.word	0x2000075c

0800221c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <HAL_GetTick+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	2000075c 	.word	0x2000075c

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fff0 	bl	800221c <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_Delay+0x40>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffe0 	bl	800221c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200000a0 	.word	0x200000a0

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff90 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff49 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff5e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff90 	bl	800232c <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5f 	bl	80022d8 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffb0 	bl	8002390 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244e:	e127      	b.n	80026a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002450:	2201      	movs	r2, #1
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 8116 	bne.w	800269a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d034      	beq.n	80024e0 <HAL_GPIO_Init+0xa4>
 8002476:	2b12      	cmp	r3, #18
 8002478:	d80d      	bhi.n	8002496 <HAL_GPIO_Init+0x5a>
 800247a:	2b02      	cmp	r3, #2
 800247c:	d02b      	beq.n	80024d6 <HAL_GPIO_Init+0x9a>
 800247e:	2b02      	cmp	r3, #2
 8002480:	d804      	bhi.n	800248c <HAL_GPIO_Init+0x50>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d031      	beq.n	80024ea <HAL_GPIO_Init+0xae>
 8002486:	2b01      	cmp	r3, #1
 8002488:	d01c      	beq.n	80024c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800248a:	e048      	b.n	800251e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800248c:	2b03      	cmp	r3, #3
 800248e:	d043      	beq.n	8002518 <HAL_GPIO_Init+0xdc>
 8002490:	2b11      	cmp	r3, #17
 8002492:	d01b      	beq.n	80024cc <HAL_GPIO_Init+0x90>
          break;
 8002494:	e043      	b.n	800251e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002496:	4a89      	ldr	r2, [pc, #548]	; (80026bc <HAL_GPIO_Init+0x280>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d026      	beq.n	80024ea <HAL_GPIO_Init+0xae>
 800249c:	4a87      	ldr	r2, [pc, #540]	; (80026bc <HAL_GPIO_Init+0x280>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d806      	bhi.n	80024b0 <HAL_GPIO_Init+0x74>
 80024a2:	4a87      	ldr	r2, [pc, #540]	; (80026c0 <HAL_GPIO_Init+0x284>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d020      	beq.n	80024ea <HAL_GPIO_Init+0xae>
 80024a8:	4a86      	ldr	r2, [pc, #536]	; (80026c4 <HAL_GPIO_Init+0x288>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01d      	beq.n	80024ea <HAL_GPIO_Init+0xae>
          break;
 80024ae:	e036      	b.n	800251e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024b0:	4a85      	ldr	r2, [pc, #532]	; (80026c8 <HAL_GPIO_Init+0x28c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0xae>
 80024b6:	4a85      	ldr	r2, [pc, #532]	; (80026cc <HAL_GPIO_Init+0x290>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d016      	beq.n	80024ea <HAL_GPIO_Init+0xae>
 80024bc:	4a84      	ldr	r2, [pc, #528]	; (80026d0 <HAL_GPIO_Init+0x294>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0xae>
          break;
 80024c2:	e02c      	b.n	800251e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	623b      	str	r3, [r7, #32]
          break;
 80024ca:	e028      	b.n	800251e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	3304      	adds	r3, #4
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e023      	b.n	800251e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	3308      	adds	r3, #8
 80024dc:	623b      	str	r3, [r7, #32]
          break;
 80024de:	e01e      	b.n	800251e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	330c      	adds	r3, #12
 80024e6:	623b      	str	r3, [r7, #32]
          break;
 80024e8:	e019      	b.n	800251e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024f2:	2304      	movs	r3, #4
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e012      	b.n	800251e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002500:	2308      	movs	r3, #8
 8002502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	611a      	str	r2, [r3, #16]
          break;
 800250a:	e008      	b.n	800251e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800250c:	2308      	movs	r3, #8
 800250e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	615a      	str	r2, [r3, #20]
          break;
 8002516:	e002      	b.n	800251e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2bff      	cmp	r3, #255	; 0xff
 8002522:	d801      	bhi.n	8002528 <HAL_GPIO_Init+0xec>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	e001      	b.n	800252c <HAL_GPIO_Init+0xf0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2bff      	cmp	r3, #255	; 0xff
 8002532:	d802      	bhi.n	800253a <HAL_GPIO_Init+0xfe>
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	e002      	b.n	8002540 <HAL_GPIO_Init+0x104>
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	3b08      	subs	r3, #8
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	210f      	movs	r1, #15
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	401a      	ands	r2, r3
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	431a      	orrs	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8096 	beq.w	800269a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800256e:	4b59      	ldr	r3, [pc, #356]	; (80026d4 <HAL_GPIO_Init+0x298>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_GPIO_Init+0x298>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <HAL_GPIO_Init+0x298>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002586:	4a54      	ldr	r2, [pc, #336]	; (80026d8 <HAL_GPIO_Init+0x29c>)
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4013      	ands	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x2a0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x19e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_GPIO_Init+0x2a4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x19a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a49      	ldr	r2, [pc, #292]	; (80026e4 <HAL_GPIO_Init+0x2a8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x196>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a48      	ldr	r2, [pc, #288]	; (80026e8 <HAL_GPIO_Init+0x2ac>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x192>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x1a0>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x1a0>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x1a0>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x1a0>
 80025da:	2300      	movs	r3, #0
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ec:	493a      	ldr	r1, [pc, #232]	; (80026d8 <HAL_GPIO_Init+0x29c>)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4938      	ldr	r1, [pc, #224]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
 8002612:	e006      	b.n	8002622 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	43db      	mvns	r3, r3
 800261c:	4933      	ldr	r1, [pc, #204]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 800261e:	4013      	ands	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	492e      	ldr	r1, [pc, #184]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e006      	b.n	800264a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	43db      	mvns	r3, r3
 8002644:	4929      	ldr	r1, [pc, #164]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002646:	4013      	ands	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	4924      	ldr	r1, [pc, #144]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
 8002662:	e006      	b.n	8002672 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	43db      	mvns	r3, r3
 800266c:	491f      	ldr	r1, [pc, #124]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 800266e:	4013      	ands	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	491a      	ldr	r1, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
 800268a:	e006      	b.n	800269a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	43db      	mvns	r3, r3
 8002694:	4915      	ldr	r1, [pc, #84]	; (80026ec <HAL_GPIO_Init+0x2b0>)
 8002696:	4013      	ands	r3, r2
 8002698:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3301      	adds	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f47f aed0 	bne.w	8002450 <HAL_GPIO_Init+0x14>
  }
}
 80026b0:	bf00      	nop
 80026b2:	372c      	adds	r7, #44	; 0x2c
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	10210000 	.word	0x10210000
 80026c0:	10110000 	.word	0x10110000
 80026c4:	10120000 	.word	0x10120000
 80026c8:	10310000 	.word	0x10310000
 80026cc:	10320000 	.word	0x10320000
 80026d0:	10220000 	.word	0x10220000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40010800 	.word	0x40010800
 80026e0:	40010c00 	.word	0x40010c00
 80026e4:	40011000 	.word	0x40011000
 80026e8:	40011400 	.word	0x40011400
 80026ec:	40010400 	.word	0x40010400

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e11f      	b.n	8002972 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fc46 	bl	8001fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002784:	f001 fe3e 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8002788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a7b      	ldr	r2, [pc, #492]	; (800297c <HAL_I2C_Init+0x25c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d807      	bhi.n	80027a4 <HAL_I2C_Init+0x84>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <HAL_I2C_Init+0x260>)
 8002798:	4293      	cmp	r3, r2
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e006      	b.n	80027b2 <HAL_I2C_Init+0x92>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a77      	ldr	r2, [pc, #476]	; (8002984 <HAL_I2C_Init+0x264>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0db      	b.n	8002972 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a72      	ldr	r2, [pc, #456]	; (8002988 <HAL_I2C_Init+0x268>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a64      	ldr	r2, [pc, #400]	; (800297c <HAL_I2C_Init+0x25c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d802      	bhi.n	80027f4 <HAL_I2C_Init+0xd4>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	e009      	b.n	8002808 <HAL_I2C_Init+0xe8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_I2C_Init+0x26c>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	3301      	adds	r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800281a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4956      	ldr	r1, [pc, #344]	; (800297c <HAL_I2C_Init+0x25c>)
 8002824:	428b      	cmp	r3, r1
 8002826:	d80d      	bhi.n	8002844 <HAL_I2C_Init+0x124>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e59      	subs	r1, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fbb1 f3f3 	udiv	r3, r1, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b04      	cmp	r3, #4
 800283e:	bf38      	it	cc
 8002840:	2304      	movcc	r3, #4
 8002842:	e04f      	b.n	80028e4 <HAL_I2C_Init+0x1c4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <HAL_I2C_Init+0x150>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e012      	b.n	8002896 <HAL_I2C_Init+0x176>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x17e>
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_I2C_Init+0x1c4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_I2C_Init+0x1a4>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e58      	subs	r0, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Init+0x1c4>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6809      	ldr	r1, [r1, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6911      	ldr	r1, [r2, #16]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	000186a0 	.word	0x000186a0
 8002980:	001e847f 	.word	0x001e847f
 8002984:	003d08ff 	.word	0x003d08ff
 8002988:	431bde83 	.word	0x431bde83
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
 80029a0:	4613      	mov	r3, r2
 80029a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fc3a 	bl	800221c <HAL_GetTick>
 80029a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	f040 80e0 	bne.w	8002b78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2319      	movs	r3, #25
 80029be:	2201      	movs	r2, #1
 80029c0:	4970      	ldr	r1, [pc, #448]	; (8002b84 <HAL_I2C_Master_Transmit+0x1f4>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 ff6c 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	e0d3      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_I2C_Master_Transmit+0x50>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0cc      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d007      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2221      	movs	r2, #33	; 0x21
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2210      	movs	r2, #16
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	893a      	ldrh	r2, [r7, #8]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a50      	ldr	r2, [pc, #320]	; (8002b88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a48:	8979      	ldrh	r1, [r7, #10]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fd26 	bl	80034a0 <I2C_MasterRequestWrite>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e08d      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a74:	e066      	b.n	8002b44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 ffe6 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d107      	bne.n	8002a9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06b      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d11b      	bne.n	8002b18 <HAL_I2C_Master_Transmit+0x188>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d017      	beq.n	8002b18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 ffd6 	bl	8003ace <I2C_WaitOnBTFFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e01a      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d194      	bne.n	8002a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	00100002 	.word	0x00100002
 8002b88:	ffff0000 	.word	0xffff0000

08002b8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	4608      	mov	r0, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	813b      	strh	r3, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba6:	f7ff fb39 	bl	800221c <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	f040 80d9 	bne.w	8002d6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2319      	movs	r3, #25
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	496d      	ldr	r1, [pc, #436]	; (8002d78 <HAL_I2C_Mem_Write+0x1ec>)
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fe6b 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0cc      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2C_Mem_Write+0x56>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e0c5      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1e2>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d007      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2221      	movs	r2, #33	; 0x21
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a4d      	ldr	r2, [pc, #308]	; (8002d7c <HAL_I2C_Mem_Write+0x1f0>)
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c4a:	88f8      	ldrh	r0, [r7, #6]
 8002c4c:	893a      	ldrh	r2, [r7, #8]
 8002c4e:	8979      	ldrh	r1, [r7, #10]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4603      	mov	r3, r0
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fca2 	bl	80035a4 <I2C_RequestMemoryWrite>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d052      	beq.n	8002d0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e081      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 feec 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d107      	bne.n	8002c92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06b      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d11b      	bne.n	8002d0c <HAL_I2C_Mem_Write+0x180>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d017      	beq.n	8002d0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1aa      	bne.n	8002c6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fed8 	bl	8003ace <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d107      	bne.n	8002d3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e016      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e000      	b.n	8002d6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	00100002 	.word	0x00100002
 8002d7c:	ffff0000 	.word	0xffff0000

08002d80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	817b      	strh	r3, [r7, #10]
 8002d92:	460b      	mov	r3, r1
 8002d94:	813b      	strh	r3, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d9e:	f7ff fa3d 	bl	800221c <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	f040 823d 	bne.w	800322c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2319      	movs	r3, #25
 8002db8:	2201      	movs	r2, #1
 8002dba:	4981      	ldr	r1, [pc, #516]	; (8002fc0 <HAL_I2C_Mem_Read+0x240>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fd6f 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e230      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Mem_Read+0x5a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e229      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2222      	movs	r2, #34	; 0x22
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a61      	ldr	r2, [pc, #388]	; (8002fc4 <HAL_I2C_Mem_Read+0x244>)
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e42:	88f8      	ldrh	r0, [r7, #6]
 8002e44:	893a      	ldrh	r2, [r7, #8]
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4603      	mov	r3, r0
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fc3c 	bl	80036d0 <I2C_RequestMemoryRead>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1e5      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d113      	bne.n	8002e92 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e1b9      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d11d      	bne.n	8002ed6 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eaa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ed2:	b662      	cpsie	i
 8002ed4:	e197      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11d      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f16:	b662      	cpsie	i
 8002f18:	e175      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f28:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f40:	e161      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	f200 811a 	bhi.w	8003180 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d123      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fdf9 	bl	8003b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e162      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f9a:	e134      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d150      	bne.n	8003046 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	2200      	movs	r2, #0
 8002fac:	4906      	ldr	r1, [pc, #24]	; (8002fc8 <HAL_I2C_Mem_Read+0x248>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fc76 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e137      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
 8002fbe:	bf00      	nop
 8002fc0:	00100002 	.word	0x00100002
 8002fc4:	ffff0000 	.word	0xffff0000
 8002fc8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fcc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fdc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003010:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003044:	e0df      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2200      	movs	r2, #0
 800304e:	497a      	ldr	r1, [pc, #488]	; (8003238 <HAL_I2C_Mem_Read+0x4b8>)
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fc25 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0e6      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030a4:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_I2C_Mem_Read+0x4bc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	4a65      	ldr	r2, [pc, #404]	; (8003240 <HAL_I2C_Mem_Read+0x4c0>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0a1a      	lsrs	r2, r3, #8
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00da      	lsls	r2, r3, #3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d117      	bne.n	80030fa <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030ec:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e099      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b04      	cmp	r3, #4
 8003106:	d1da      	bne.n	80030be <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317e:	e042      	b.n	8003206 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fce3 	bl	8003b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e04c      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d118      	bne.n	8003206 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	f47f ae99 	bne.w	8002f42 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3728      	adds	r7, #40	; 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	00010004 	.word	0x00010004
 800323c:	20000098 	.word	0x20000098
 8003240:	14f8b589 	.word	0x14f8b589

08003244 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7fe ffe2 	bl	800221c <HAL_GetTick>
 8003258:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800325a:	2301      	movs	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	f040 8111 	bne.w	800348e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2319      	movs	r3, #25
 8003272:	2201      	movs	r2, #1
 8003274:	4988      	ldr	r1, [pc, #544]	; (8003498 <HAL_I2C_IsDeviceReady+0x254>)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fb12 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
 8003284:	e104      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2C_IsDeviceReady+0x50>
 8003290:	2302      	movs	r3, #2
 8003292:	e0fd      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d007      	beq.n	80032ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2224      	movs	r2, #36	; 0x24
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a70      	ldr	r2, [pc, #448]	; (800349c <HAL_I2C_IsDeviceReady+0x258>)
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fad0 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003314:	d103      	bne.n	800331e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b6      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003330:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003332:	f7fe ff73 	bl	800221c <HAL_GetTick>
 8003336:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003366:	e025      	b.n	80033b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003368:	f7fe ff58 	bl	800221c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <HAL_I2C_IsDeviceReady+0x13a>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	22a0      	movs	r2, #160	; 0xa0
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2ba0      	cmp	r3, #160	; 0xa0
 80033be:	d005      	beq.n	80033cc <HAL_I2C_IsDeviceReady+0x188>
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HAL_I2C_IsDeviceReady+0x188>
 80033c6:	7dbb      	ldrb	r3, [r7, #22]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0cd      	beq.n	8003368 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d129      	bne.n	8003436 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2319      	movs	r3, #25
 800340e:	2201      	movs	r2, #1
 8003410:	4921      	ldr	r1, [pc, #132]	; (8003498 <HAL_I2C_IsDeviceReady+0x254>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa44 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e036      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e02c      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2319      	movs	r3, #25
 8003456:	2201      	movs	r2, #1
 8003458:	490f      	ldr	r1, [pc, #60]	; (8003498 <HAL_I2C_IsDeviceReady+0x254>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa20 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e012      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	3301      	adds	r3, #1
 800346e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	f4ff af32 	bcc.w	80032de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00100002 	.word	0x00100002
 800349c:	ffff0000 	.word	0xffff0000

080034a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d006      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d003      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d108      	bne.n	80034dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e00b      	b.n	80034f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d107      	bne.n	80034f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f9cd 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d103      	bne.n	8003524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e035      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e01b      	b.n	800357c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030f 	orn	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <I2C_MasterRequestWrite+0xfc>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f9f3 	bl	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e010      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <I2C_MasterRequestWrite+0x100>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f9e3 	bl	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010008 	.word	0x00010008
 80035a0:	00010002 	.word	0x00010002

080035a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	817b      	strh	r3, [r7, #10]
 80035b6:	460b      	mov	r3, r1
 80035b8:	813b      	strh	r3, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f960 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f4:	d103      	bne.n	80035fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e05f      	b.n	80036c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	492d      	ldr	r1, [pc, #180]	; (80036cc <I2C_RequestMemoryWrite+0x128>)
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f998 	bl	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e04c      	b.n	80036c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	6a39      	ldr	r1, [r7, #32]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa02 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e02b      	b.n	80036c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003670:	893b      	ldrh	r3, [r7, #8]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e021      	b.n	80036c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800367c:	893b      	ldrh	r3, [r7, #8]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b29b      	uxth	r3, r3
 8003682:	b2da      	uxtb	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f9dc 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d107      	bne.n	80036b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e005      	b.n	80036c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	00010002 	.word	0x00010002

080036d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	2200      	movs	r2, #0
 8003712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f8c2 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003730:	d103      	bne.n	800373a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0aa      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800374c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	4952      	ldr	r1, [pc, #328]	; (800389c <I2C_RequestMemoryRead+0x1cc>)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f8fa 	bl	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e097      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f964 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b04      	cmp	r3, #4
 8003790:	d107      	bne.n	80037a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e076      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ac:	893b      	ldrh	r3, [r7, #8]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	611a      	str	r2, [r3, #16]
 80037b6:	e021      	b.n	80037fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037b8:	893b      	ldrh	r3, [r7, #8]
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	b29b      	uxth	r3, r3
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	6a39      	ldr	r1, [r7, #32]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f93e 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d107      	bne.n	80037ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e050      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f2:	893b      	ldrh	r3, [r7, #8]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	6a39      	ldr	r1, [r7, #32]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f923 	bl	8003a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2b04      	cmp	r3, #4
 8003812:	d107      	bne.n	8003824 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e035      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003836:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	2200      	movs	r2, #0
 8003840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f82b 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385e:	d103      	bne.n	8003868 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e013      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800386c:	897b      	ldrh	r3, [r7, #10]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	6a3a      	ldr	r2, [r7, #32]
 8003880:	4906      	ldr	r1, [pc, #24]	; (800389c <I2C_RequestMemoryRead+0x1cc>)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f863 	bl	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	00010002 	.word	0x00010002

080038a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b0:	e025      	b.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d021      	beq.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fe fcaf 	bl	800221c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d116      	bne.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e023      	b.n	8003946 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d10d      	bne.n	8003924 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	43da      	mvns	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4013      	ands	r3, r2
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	e00c      	b.n	800393e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	429a      	cmp	r2, r3
 8003942:	d0b6      	beq.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800395c:	e051      	b.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d123      	bne.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003986:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e046      	b.n	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d021      	beq.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7fe fc2d 	bl	800221c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e020      	b.n	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10c      	bne.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e00b      	b.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d18d      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a58:	e02d      	b.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8ce 	bl	8003bfc <I2C_IsAcknowledgeFailed>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e02d      	b.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d021      	beq.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fe fbd3 	bl	800221c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d116      	bne.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e007      	b.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d1ca      	bne.n	8003a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ada:	e02d      	b.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f88d 	bl	8003bfc <I2C_IsAcknowledgeFailed>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e02d      	b.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d021      	beq.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fe fb92 	bl	800221c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d116      	bne.n	8003b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e007      	b.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d1ca      	bne.n	8003adc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b5c:	e042      	b.n	8003be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d119      	bne.n	8003ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0210 	mvn.w	r2, #16
 8003b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e029      	b.n	8003bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7fe fb3c 	bl	800221c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d116      	bne.n	8003be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d1b5      	bne.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	d11b      	bne.n	8003c4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e26c      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8087 	beq.w	8003d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c78:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00c      	beq.n	8003c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c84:	4b8f      	ldr	r3, [pc, #572]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d112      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5e>
 8003c90:	4b8c      	ldr	r3, [pc, #560]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9e:	4b89      	ldr	r3, [pc, #548]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d06c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x12c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d168      	bne.n	8003d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e246      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x76>
 8003cc0:	4b80      	ldr	r3, [pc, #512]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7f      	ldr	r2, [pc, #508]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e02e      	b.n	8003d2c <HAL_RCC_OscConfig+0xd4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x98>
 8003cd6:	4b7b      	ldr	r3, [pc, #492]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7a      	ldr	r2, [pc, #488]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b78      	ldr	r3, [pc, #480]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a77      	ldr	r2, [pc, #476]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xd4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0xbc>
 8003cfa:	4b72      	ldr	r3, [pc, #456]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a71      	ldr	r2, [pc, #452]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xd4>
 8003d14:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a6a      	ldr	r2, [pc, #424]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a67      	ldr	r2, [pc, #412]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fa72 	bl	800221c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fa6e 	bl	800221c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1fa      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xe4>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fa5e 	bl	800221c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fa5a 	bl	800221c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1e6      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x10c>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d92:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d9e:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x18c>
 8003daa:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x176>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1ba      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4939      	ldr	r1, [pc, #228]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fa13 	bl	800221c <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fe fa0f 	bl	800221c <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e19b      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4927      	ldr	r1, [pc, #156]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe f9f2 	bl	800221c <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fe f9ee 	bl	800221c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e17a      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03a      	beq.n	8003edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d019      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_RCC_OscConfig+0x274>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fe f9d2 	bl	800221c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fe f9ce 	bl	800221c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e15a      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f000 fac6 	bl	800442c <RCC_Delay>
 8003ea0:	e01c      	b.n	8003edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_OscConfig+0x274>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fe f9b8 	bl	800221c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eae:	e00f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f9b4 	bl	800221c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d908      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e140      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	42420000 	.word	0x42420000
 8003ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b9e      	ldr	r3, [pc, #632]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e9      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a6 	beq.w	8004036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b97      	ldr	r3, [pc, #604]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b94      	ldr	r3, [pc, #592]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4a93      	ldr	r2, [pc, #588]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	61d3      	str	r3, [r2, #28]
 8003f06:	4b91      	ldr	r3, [pc, #580]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b8e      	ldr	r3, [pc, #568]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f22:	4b8b      	ldr	r3, [pc, #556]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a8a      	ldr	r2, [pc, #552]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe f975 	bl	800221c <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fe f971 	bl	800221c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	; 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0fd      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b81      	ldr	r3, [pc, #516]	; (8004150 <HAL_RCC_OscConfig+0x4f8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x312>
 8003f5c:	4b7b      	ldr	r3, [pc, #492]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	e02d      	b.n	8003fc6 <HAL_RCC_OscConfig+0x36e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x334>
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	4a75      	ldr	r2, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6213      	str	r3, [r2, #32]
 8003f7e:	4b73      	ldr	r3, [pc, #460]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a72      	ldr	r2, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	e01c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x36e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d10c      	bne.n	8003fae <HAL_RCC_OscConfig+0x356>
 8003f94:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	6213      	str	r3, [r2, #32]
 8003fa0:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a69      	ldr	r2, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	e00b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x36e>
 8003fae:	4b67      	ldr	r3, [pc, #412]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	4a66      	ldr	r2, [pc, #408]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6213      	str	r3, [r2, #32]
 8003fba:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d015      	beq.n	8003ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fce:	f7fe f925 	bl	800221c <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fe f921 	bl	800221c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0ab      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x37e>
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fe f90f 	bl	800221c <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fe f90b 	bl	800221c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e095      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b48      	ldr	r3, [pc, #288]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a47      	ldr	r2, [pc, #284]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8081 	beq.w	8004142 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004040:	4b42      	ldr	r3, [pc, #264]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d061      	beq.n	8004110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d146      	bne.n	80040e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_RCC_OscConfig+0x4fc>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fe f8df 	bl	800221c <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fe f8db 	bl	800221c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e067      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004074:	4b35      	ldr	r3, [pc, #212]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004088:	d108      	bne.n	800409c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	492d      	ldr	r1, [pc, #180]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a19      	ldr	r1, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	430b      	orrs	r3, r1
 80040ae:	4927      	ldr	r1, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <HAL_RCC_OscConfig+0x4fc>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fe f8af 	bl	800221c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fe f8ab 	bl	800221c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e037      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x46a>
 80040e0:	e02f      	b.n	8004142 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_RCC_OscConfig+0x4fc>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe f898 	bl	800221c <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe f894 	bl	800221c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e020      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x498>
 800410e:	e018      	b.n	8004142 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e013      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_OscConfig+0x4f4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	429a      	cmp	r2, r3
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	40007000 	.word	0x40007000
 8004154:	42420060 	.word	0x42420060

08004158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0d0      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b6a      	ldr	r3, [pc, #424]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b67      	ldr	r3, [pc, #412]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4965      	ldr	r1, [pc, #404]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b63      	ldr	r3, [pc, #396]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b8      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b59      	ldr	r3, [pc, #356]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a58      	ldr	r2, [pc, #352]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041cc:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a52      	ldr	r2, [pc, #328]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b50      	ldr	r3, [pc, #320]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	494d      	ldr	r1, [pc, #308]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d040      	beq.n	8004278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b47      	ldr	r3, [pc, #284]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d115      	bne.n	8004236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e073      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004226:	4b3d      	ldr	r3, [pc, #244]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e06b      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f023 0203 	bic.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4936      	ldr	r1, [pc, #216]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004248:	f7fd ffe8 	bl	800221c <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	e00a      	b.n	8004266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004250:	f7fd ffe4 	bl	800221c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	; 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e053      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 020c 	and.w	r2, r3, #12
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	429a      	cmp	r2, r3
 8004276:	d1eb      	bne.n	8004250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004278:	4b27      	ldr	r3, [pc, #156]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d210      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	4922      	ldr	r1, [pc, #136]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e032      	b.n	800430e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4916      	ldr	r1, [pc, #88]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490e      	ldr	r1, [pc, #56]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042e6:	f000 f821 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042ea:	4601      	mov	r1, r0
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	5cd3      	ldrb	r3, [r2, r3]
 80042fa:	fa21 f303 	lsr.w	r3, r1, r3
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <HAL_RCC_ClockConfig+0x1cc>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1d0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd ff46 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40022000 	.word	0x40022000
 800431c:	40021000 	.word	0x40021000
 8004320:	08008e40 	.word	0x08008e40
 8004324:	20000098 	.word	0x20000098
 8004328:	2000009c 	.word	0x2000009c

0800432c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	b490      	push	{r4, r7}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004332:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004334:	1d3c      	adds	r4, r7, #4
 8004336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x40>
 8004366:	2b08      	cmp	r3, #8
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x46>
 800436a:	e02d      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800436e:	623b      	str	r3, [r7, #32]
      break;
 8004370:	e02d      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800437e:	4413      	add	r3, r2
 8004380:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004384:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	0c5b      	lsrs	r3, r3, #17
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800439e:	4413      	add	r3, r2
 80043a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043aa:	fb02 f203 	mul.w	r2, r2, r3
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	e004      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	623b      	str	r3, [r7, #32]
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043ca:	623b      	str	r3, [r7, #32]
      break;
 80043cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ce:	6a3b      	ldr	r3, [r7, #32]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	; 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc90      	pop	{r4, r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	080086c0 	.word	0x080086c0
 80043e0:	080086d0 	.word	0x080086d0
 80043e4:	40021000 	.word	0x40021000
 80043e8:	007a1200 	.word	0x007a1200
 80043ec:	003d0900 	.word	0x003d0900

080043f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b02      	ldr	r3, [pc, #8]	; (8004400 <HAL_RCC_GetHCLKFreq+0x10>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	20000098 	.word	0x20000098

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004408:	f7ff fff2 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 800440c:	4601      	mov	r1, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	08008e50 	.word	0x08008e50

0800442c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <RCC_Delay+0x34>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <RCC_Delay+0x38>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0a5b      	lsrs	r3, r3, #9
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004448:	bf00      	nop
  }
  while (Delay --);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e5a      	subs	r2, r3, #1
 800444e:	60fa      	str	r2, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f9      	bne.n	8004448 <RCC_Delay+0x1c>
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000098 	.word	0x20000098
 8004464:	10624dd3 	.word	0x10624dd3

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	200000a4 	.word	0x200000a4

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	2500      	movs	r5, #0
 8004478:	4e0c      	ldr	r6, [pc, #48]	; (80044ac <__libc_init_array+0x38>)
 800447a:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447c:	1ba4      	subs	r4, r4, r6
 800447e:	10a4      	asrs	r4, r4, #2
 8004480:	42a5      	cmp	r5, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	f004 f904 	bl	8008690 <_init>
 8004488:	2500      	movs	r5, #0
 800448a:	4e0a      	ldr	r6, [pc, #40]	; (80044b4 <__libc_init_array+0x40>)
 800448c:	4c0a      	ldr	r4, [pc, #40]	; (80044b8 <__libc_init_array+0x44>)
 800448e:	1ba4      	subs	r4, r4, r6
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	42a5      	cmp	r5, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800449c:	4798      	blx	r3
 800449e:	3501      	adds	r5, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a6:	4798      	blx	r3
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08009158 	.word	0x08009158
 80044b0:	08009158 	.word	0x08009158
 80044b4:	08009158 	.word	0x08009158
 80044b8:	0800915c 	.word	0x0800915c

080044bc <memset>:
 80044bc:	4603      	mov	r3, r0
 80044be:	4402      	add	r2, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <__cvt>:
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d2:	461e      	mov	r6, r3
 80044d4:	bfbb      	ittet	lt
 80044d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80044da:	461e      	movlt	r6, r3
 80044dc:	2300      	movge	r3, #0
 80044de:	232d      	movlt	r3, #45	; 0x2d
 80044e0:	b088      	sub	sp, #32
 80044e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044e4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80044e8:	f027 0720 	bic.w	r7, r7, #32
 80044ec:	2f46      	cmp	r7, #70	; 0x46
 80044ee:	4614      	mov	r4, r2
 80044f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80044f2:	700b      	strb	r3, [r1, #0]
 80044f4:	d004      	beq.n	8004500 <__cvt+0x34>
 80044f6:	2f45      	cmp	r7, #69	; 0x45
 80044f8:	d100      	bne.n	80044fc <__cvt+0x30>
 80044fa:	3501      	adds	r5, #1
 80044fc:	2302      	movs	r3, #2
 80044fe:	e000      	b.n	8004502 <__cvt+0x36>
 8004500:	2303      	movs	r3, #3
 8004502:	aa07      	add	r2, sp, #28
 8004504:	9204      	str	r2, [sp, #16]
 8004506:	aa06      	add	r2, sp, #24
 8004508:	e9cd a202 	strd	sl, r2, [sp, #8]
 800450c:	e9cd 3500 	strd	r3, r5, [sp]
 8004510:	4622      	mov	r2, r4
 8004512:	4633      	mov	r3, r6
 8004514:	f001 fdb0 	bl	8006078 <_dtoa_r>
 8004518:	2f47      	cmp	r7, #71	; 0x47
 800451a:	4680      	mov	r8, r0
 800451c:	d102      	bne.n	8004524 <__cvt+0x58>
 800451e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004520:	07db      	lsls	r3, r3, #31
 8004522:	d526      	bpl.n	8004572 <__cvt+0xa6>
 8004524:	2f46      	cmp	r7, #70	; 0x46
 8004526:	eb08 0905 	add.w	r9, r8, r5
 800452a:	d111      	bne.n	8004550 <__cvt+0x84>
 800452c:	f898 3000 	ldrb.w	r3, [r8]
 8004530:	2b30      	cmp	r3, #48	; 0x30
 8004532:	d10a      	bne.n	800454a <__cvt+0x7e>
 8004534:	2200      	movs	r2, #0
 8004536:	2300      	movs	r3, #0
 8004538:	4620      	mov	r0, r4
 800453a:	4631      	mov	r1, r6
 800453c:	f7fc fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8004540:	b918      	cbnz	r0, 800454a <__cvt+0x7e>
 8004542:	f1c5 0501 	rsb	r5, r5, #1
 8004546:	f8ca 5000 	str.w	r5, [sl]
 800454a:	f8da 3000 	ldr.w	r3, [sl]
 800454e:	4499      	add	r9, r3
 8004550:	2200      	movs	r2, #0
 8004552:	2300      	movs	r3, #0
 8004554:	4620      	mov	r0, r4
 8004556:	4631      	mov	r1, r6
 8004558:	f7fc fa26 	bl	80009a8 <__aeabi_dcmpeq>
 800455c:	b938      	cbnz	r0, 800456e <__cvt+0xa2>
 800455e:	2230      	movs	r2, #48	; 0x30
 8004560:	9b07      	ldr	r3, [sp, #28]
 8004562:	454b      	cmp	r3, r9
 8004564:	d205      	bcs.n	8004572 <__cvt+0xa6>
 8004566:	1c59      	adds	r1, r3, #1
 8004568:	9107      	str	r1, [sp, #28]
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e7f8      	b.n	8004560 <__cvt+0x94>
 800456e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004572:	4640      	mov	r0, r8
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004578:	eba3 0308 	sub.w	r3, r3, r8
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	b008      	add	sp, #32
 8004580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004584 <__exponent>:
 8004584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004586:	2900      	cmp	r1, #0
 8004588:	bfb4      	ite	lt
 800458a:	232d      	movlt	r3, #45	; 0x2d
 800458c:	232b      	movge	r3, #43	; 0x2b
 800458e:	4604      	mov	r4, r0
 8004590:	bfb8      	it	lt
 8004592:	4249      	neglt	r1, r1
 8004594:	2909      	cmp	r1, #9
 8004596:	f804 2b02 	strb.w	r2, [r4], #2
 800459a:	7043      	strb	r3, [r0, #1]
 800459c:	dd21      	ble.n	80045e2 <__exponent+0x5e>
 800459e:	f10d 0307 	add.w	r3, sp, #7
 80045a2:	461f      	mov	r7, r3
 80045a4:	260a      	movs	r6, #10
 80045a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80045aa:	fb06 1115 	mls	r1, r6, r5, r1
 80045ae:	2d09      	cmp	r5, #9
 80045b0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80045b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045b8:	f103 32ff 	add.w	r2, r3, #4294967295
 80045bc:	4629      	mov	r1, r5
 80045be:	dc09      	bgt.n	80045d4 <__exponent+0x50>
 80045c0:	3130      	adds	r1, #48	; 0x30
 80045c2:	3b02      	subs	r3, #2
 80045c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80045c8:	42bb      	cmp	r3, r7
 80045ca:	4622      	mov	r2, r4
 80045cc:	d304      	bcc.n	80045d8 <__exponent+0x54>
 80045ce:	1a10      	subs	r0, r2, r0
 80045d0:	b003      	add	sp, #12
 80045d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d4:	4613      	mov	r3, r2
 80045d6:	e7e6      	b.n	80045a6 <__exponent+0x22>
 80045d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045dc:	f804 2b01 	strb.w	r2, [r4], #1
 80045e0:	e7f2      	b.n	80045c8 <__exponent+0x44>
 80045e2:	2330      	movs	r3, #48	; 0x30
 80045e4:	4419      	add	r1, r3
 80045e6:	7083      	strb	r3, [r0, #2]
 80045e8:	1d02      	adds	r2, r0, #4
 80045ea:	70c1      	strb	r1, [r0, #3]
 80045ec:	e7ef      	b.n	80045ce <__exponent+0x4a>
	...

080045f0 <_printf_float>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	b091      	sub	sp, #68	; 0x44
 80045f6:	460c      	mov	r4, r1
 80045f8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80045fa:	4693      	mov	fp, r2
 80045fc:	461e      	mov	r6, r3
 80045fe:	4605      	mov	r5, r0
 8004600:	f002 fe1c 	bl	800723c <_localeconv_r>
 8004604:	6803      	ldr	r3, [r0, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	9309      	str	r3, [sp, #36]	; 0x24
 800460a:	f7fb fda1 	bl	8000150 <strlen>
 800460e:	2300      	movs	r3, #0
 8004610:	930e      	str	r3, [sp, #56]	; 0x38
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	900a      	str	r0, [sp, #40]	; 0x28
 8004616:	3307      	adds	r3, #7
 8004618:	f023 0307 	bic.w	r3, r3, #7
 800461c:	f103 0208 	add.w	r2, r3, #8
 8004620:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004624:	f8d4 a000 	ldr.w	sl, [r4]
 8004628:	603a      	str	r2, [r7, #0]
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004632:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800463a:	930b      	str	r3, [sp, #44]	; 0x2c
 800463c:	f04f 32ff 	mov.w	r2, #4294967295
 8004640:	4ba6      	ldr	r3, [pc, #664]	; (80048dc <_printf_float+0x2ec>)
 8004642:	4638      	mov	r0, r7
 8004644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004646:	f7fc f9e1 	bl	8000a0c <__aeabi_dcmpun>
 800464a:	bb68      	cbnz	r0, 80046a8 <_printf_float+0xb8>
 800464c:	f04f 32ff 	mov.w	r2, #4294967295
 8004650:	4ba2      	ldr	r3, [pc, #648]	; (80048dc <_printf_float+0x2ec>)
 8004652:	4638      	mov	r0, r7
 8004654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004656:	f7fc f9bb 	bl	80009d0 <__aeabi_dcmple>
 800465a:	bb28      	cbnz	r0, 80046a8 <_printf_float+0xb8>
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	4638      	mov	r0, r7
 8004662:	4649      	mov	r1, r9
 8004664:	f7fc f9aa 	bl	80009bc <__aeabi_dcmplt>
 8004668:	b110      	cbz	r0, 8004670 <_printf_float+0x80>
 800466a:	232d      	movs	r3, #45	; 0x2d
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004670:	4f9b      	ldr	r7, [pc, #620]	; (80048e0 <_printf_float+0x2f0>)
 8004672:	4b9c      	ldr	r3, [pc, #624]	; (80048e4 <_printf_float+0x2f4>)
 8004674:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004678:	bf98      	it	ls
 800467a:	461f      	movls	r7, r3
 800467c:	2303      	movs	r3, #3
 800467e:	f04f 0900 	mov.w	r9, #0
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	f02a 0304 	bic.w	r3, sl, #4
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	9600      	str	r6, [sp, #0]
 800468c:	465b      	mov	r3, fp
 800468e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004690:	4621      	mov	r1, r4
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f9e2 	bl	8004a5c <_printf_common>
 8004698:	3001      	adds	r0, #1
 800469a:	f040 8090 	bne.w	80047be <_printf_float+0x1ce>
 800469e:	f04f 30ff 	mov.w	r0, #4294967295
 80046a2:	b011      	add	sp, #68	; 0x44
 80046a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a8:	463a      	mov	r2, r7
 80046aa:	464b      	mov	r3, r9
 80046ac:	4638      	mov	r0, r7
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fc f9ac 	bl	8000a0c <__aeabi_dcmpun>
 80046b4:	b110      	cbz	r0, 80046bc <_printf_float+0xcc>
 80046b6:	4f8c      	ldr	r7, [pc, #560]	; (80048e8 <_printf_float+0x2f8>)
 80046b8:	4b8c      	ldr	r3, [pc, #560]	; (80048ec <_printf_float+0x2fc>)
 80046ba:	e7db      	b.n	8004674 <_printf_float+0x84>
 80046bc:	6863      	ldr	r3, [r4, #4]
 80046be:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	a80d      	add	r0, sp, #52	; 0x34
 80046c6:	a90e      	add	r1, sp, #56	; 0x38
 80046c8:	d140      	bne.n	800474c <_printf_float+0x15c>
 80046ca:	2306      	movs	r3, #6
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	f04f 0c00 	mov.w	ip, #0
 80046d2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80046d6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80046da:	6863      	ldr	r3, [r4, #4]
 80046dc:	6022      	str	r2, [r4, #0]
 80046de:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	463a      	mov	r2, r7
 80046e6:	464b      	mov	r3, r9
 80046e8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7ff feed 	bl	80044cc <__cvt>
 80046f2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80046f6:	2b47      	cmp	r3, #71	; 0x47
 80046f8:	4607      	mov	r7, r0
 80046fa:	d109      	bne.n	8004710 <_printf_float+0x120>
 80046fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046fe:	1cd8      	adds	r0, r3, #3
 8004700:	db02      	blt.n	8004708 <_printf_float+0x118>
 8004702:	6862      	ldr	r2, [r4, #4]
 8004704:	4293      	cmp	r3, r2
 8004706:	dd47      	ble.n	8004798 <_printf_float+0x1a8>
 8004708:	f1a8 0802 	sub.w	r8, r8, #2
 800470c:	fa5f f888 	uxtb.w	r8, r8
 8004710:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004714:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004716:	d824      	bhi.n	8004762 <_printf_float+0x172>
 8004718:	3901      	subs	r1, #1
 800471a:	4642      	mov	r2, r8
 800471c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004720:	910d      	str	r1, [sp, #52]	; 0x34
 8004722:	f7ff ff2f 	bl	8004584 <__exponent>
 8004726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004728:	4681      	mov	r9, r0
 800472a:	1813      	adds	r3, r2, r0
 800472c:	2a01      	cmp	r2, #1
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	dc02      	bgt.n	8004738 <_printf_float+0x148>
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	07d1      	lsls	r1, r2, #31
 8004736:	d501      	bpl.n	800473c <_printf_float+0x14c>
 8004738:	3301      	adds	r3, #1
 800473a:	6123      	str	r3, [r4, #16]
 800473c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0a2      	beq.n	800468a <_printf_float+0x9a>
 8004744:	232d      	movs	r3, #45	; 0x2d
 8004746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800474a:	e79e      	b.n	800468a <_printf_float+0x9a>
 800474c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004750:	f000 816e 	beq.w	8004a30 <_printf_float+0x440>
 8004754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004758:	d1b9      	bne.n	80046ce <_printf_float+0xde>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1b7      	bne.n	80046ce <_printf_float+0xde>
 800475e:	2301      	movs	r3, #1
 8004760:	e7b4      	b.n	80046cc <_printf_float+0xdc>
 8004762:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004766:	d119      	bne.n	800479c <_printf_float+0x1ac>
 8004768:	2900      	cmp	r1, #0
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	dd0c      	ble.n	8004788 <_printf_float+0x198>
 800476e:	6121      	str	r1, [r4, #16]
 8004770:	b913      	cbnz	r3, 8004778 <_printf_float+0x188>
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	07d2      	lsls	r2, r2, #31
 8004776:	d502      	bpl.n	800477e <_printf_float+0x18e>
 8004778:	3301      	adds	r3, #1
 800477a:	440b      	add	r3, r1
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004780:	f04f 0900 	mov.w	r9, #0
 8004784:	65a3      	str	r3, [r4, #88]	; 0x58
 8004786:	e7d9      	b.n	800473c <_printf_float+0x14c>
 8004788:	b913      	cbnz	r3, 8004790 <_printf_float+0x1a0>
 800478a:	6822      	ldr	r2, [r4, #0]
 800478c:	07d0      	lsls	r0, r2, #31
 800478e:	d501      	bpl.n	8004794 <_printf_float+0x1a4>
 8004790:	3302      	adds	r3, #2
 8004792:	e7f3      	b.n	800477c <_printf_float+0x18c>
 8004794:	2301      	movs	r3, #1
 8004796:	e7f1      	b.n	800477c <_printf_float+0x18c>
 8004798:	f04f 0867 	mov.w	r8, #103	; 0x67
 800479c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80047a0:	4293      	cmp	r3, r2
 80047a2:	db05      	blt.n	80047b0 <_printf_float+0x1c0>
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	6123      	str	r3, [r4, #16]
 80047a8:	07d1      	lsls	r1, r2, #31
 80047aa:	d5e8      	bpl.n	800477e <_printf_float+0x18e>
 80047ac:	3301      	adds	r3, #1
 80047ae:	e7e5      	b.n	800477c <_printf_float+0x18c>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfcc      	ite	gt
 80047b4:	2301      	movgt	r3, #1
 80047b6:	f1c3 0302 	rsble	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	e7de      	b.n	800477c <_printf_float+0x18c>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	055a      	lsls	r2, r3, #21
 80047c2:	d407      	bmi.n	80047d4 <_printf_float+0x1e4>
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	463a      	mov	r2, r7
 80047c8:	4659      	mov	r1, fp
 80047ca:	4628      	mov	r0, r5
 80047cc:	47b0      	blx	r6
 80047ce:	3001      	adds	r0, #1
 80047d0:	d129      	bne.n	8004826 <_printf_float+0x236>
 80047d2:	e764      	b.n	800469e <_printf_float+0xae>
 80047d4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80047d8:	f240 80d7 	bls.w	800498a <_printf_float+0x39a>
 80047dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047e0:	2200      	movs	r2, #0
 80047e2:	2300      	movs	r3, #0
 80047e4:	f7fc f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80047e8:	b388      	cbz	r0, 800484e <_printf_float+0x25e>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4a40      	ldr	r2, [pc, #256]	; (80048f0 <_printf_float+0x300>)
 80047ee:	4659      	mov	r1, fp
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b0      	blx	r6
 80047f4:	3001      	adds	r0, #1
 80047f6:	f43f af52 	beq.w	800469e <_printf_float+0xae>
 80047fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047fe:	429a      	cmp	r2, r3
 8004800:	db02      	blt.n	8004808 <_printf_float+0x218>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	07d8      	lsls	r0, r3, #31
 8004806:	d50e      	bpl.n	8004826 <_printf_float+0x236>
 8004808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800480c:	4659      	mov	r1, fp
 800480e:	4628      	mov	r0, r5
 8004810:	47b0      	blx	r6
 8004812:	3001      	adds	r0, #1
 8004814:	f43f af43 	beq.w	800469e <_printf_float+0xae>
 8004818:	2700      	movs	r7, #0
 800481a:	f104 081a 	add.w	r8, r4, #26
 800481e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004820:	3b01      	subs	r3, #1
 8004822:	42bb      	cmp	r3, r7
 8004824:	dc09      	bgt.n	800483a <_printf_float+0x24a>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	079f      	lsls	r7, r3, #30
 800482a:	f100 80fd 	bmi.w	8004a28 <_printf_float+0x438>
 800482e:	68e0      	ldr	r0, [r4, #12]
 8004830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004832:	4298      	cmp	r0, r3
 8004834:	bfb8      	it	lt
 8004836:	4618      	movlt	r0, r3
 8004838:	e733      	b.n	80046a2 <_printf_float+0xb2>
 800483a:	2301      	movs	r3, #1
 800483c:	4642      	mov	r2, r8
 800483e:	4659      	mov	r1, fp
 8004840:	4628      	mov	r0, r5
 8004842:	47b0      	blx	r6
 8004844:	3001      	adds	r0, #1
 8004846:	f43f af2a 	beq.w	800469e <_printf_float+0xae>
 800484a:	3701      	adds	r7, #1
 800484c:	e7e7      	b.n	800481e <_printf_float+0x22e>
 800484e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004850:	2b00      	cmp	r3, #0
 8004852:	dc2b      	bgt.n	80048ac <_printf_float+0x2bc>
 8004854:	2301      	movs	r3, #1
 8004856:	4a26      	ldr	r2, [pc, #152]	; (80048f0 <_printf_float+0x300>)
 8004858:	4659      	mov	r1, fp
 800485a:	4628      	mov	r0, r5
 800485c:	47b0      	blx	r6
 800485e:	3001      	adds	r0, #1
 8004860:	f43f af1d 	beq.w	800469e <_printf_float+0xae>
 8004864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004866:	b923      	cbnz	r3, 8004872 <_printf_float+0x282>
 8004868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800486a:	b913      	cbnz	r3, 8004872 <_printf_float+0x282>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	07d9      	lsls	r1, r3, #31
 8004870:	d5d9      	bpl.n	8004826 <_printf_float+0x236>
 8004872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004876:	4659      	mov	r1, fp
 8004878:	4628      	mov	r0, r5
 800487a:	47b0      	blx	r6
 800487c:	3001      	adds	r0, #1
 800487e:	f43f af0e 	beq.w	800469e <_printf_float+0xae>
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	f104 091a 	add.w	r9, r4, #26
 800488a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800488c:	425b      	negs	r3, r3
 800488e:	4543      	cmp	r3, r8
 8004890:	dc01      	bgt.n	8004896 <_printf_float+0x2a6>
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	e797      	b.n	80047c6 <_printf_float+0x1d6>
 8004896:	2301      	movs	r3, #1
 8004898:	464a      	mov	r2, r9
 800489a:	4659      	mov	r1, fp
 800489c:	4628      	mov	r0, r5
 800489e:	47b0      	blx	r6
 80048a0:	3001      	adds	r0, #1
 80048a2:	f43f aefc 	beq.w	800469e <_printf_float+0xae>
 80048a6:	f108 0801 	add.w	r8, r8, #1
 80048aa:	e7ee      	b.n	800488a <_printf_float+0x29a>
 80048ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048b0:	429a      	cmp	r2, r3
 80048b2:	bfa8      	it	ge
 80048b4:	461a      	movge	r2, r3
 80048b6:	2a00      	cmp	r2, #0
 80048b8:	4690      	mov	r8, r2
 80048ba:	dd07      	ble.n	80048cc <_printf_float+0x2dc>
 80048bc:	4613      	mov	r3, r2
 80048be:	4659      	mov	r1, fp
 80048c0:	463a      	mov	r2, r7
 80048c2:	4628      	mov	r0, r5
 80048c4:	47b0      	blx	r6
 80048c6:	3001      	adds	r0, #1
 80048c8:	f43f aee9 	beq.w	800469e <_printf_float+0xae>
 80048cc:	f104 031a 	add.w	r3, r4, #26
 80048d0:	f04f 0a00 	mov.w	sl, #0
 80048d4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80048d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048da:	e015      	b.n	8004908 <_printf_float+0x318>
 80048dc:	7fefffff 	.word	0x7fefffff
 80048e0:	08008e5c 	.word	0x08008e5c
 80048e4:	08008e58 	.word	0x08008e58
 80048e8:	08008e64 	.word	0x08008e64
 80048ec:	08008e60 	.word	0x08008e60
 80048f0:	08008e68 	.word	0x08008e68
 80048f4:	2301      	movs	r3, #1
 80048f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048f8:	4659      	mov	r1, fp
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b0      	blx	r6
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f aecd 	beq.w	800469e <_printf_float+0xae>
 8004904:	f10a 0a01 	add.w	sl, sl, #1
 8004908:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800490c:	eba9 0308 	sub.w	r3, r9, r8
 8004910:	4553      	cmp	r3, sl
 8004912:	dcef      	bgt.n	80048f4 <_printf_float+0x304>
 8004914:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004918:	429a      	cmp	r2, r3
 800491a:	444f      	add	r7, r9
 800491c:	db14      	blt.n	8004948 <_printf_float+0x358>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	07da      	lsls	r2, r3, #31
 8004922:	d411      	bmi.n	8004948 <_printf_float+0x358>
 8004924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004926:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004928:	eba3 0209 	sub.w	r2, r3, r9
 800492c:	eba3 0901 	sub.w	r9, r3, r1
 8004930:	4591      	cmp	r9, r2
 8004932:	bfa8      	it	ge
 8004934:	4691      	movge	r9, r2
 8004936:	f1b9 0f00 	cmp.w	r9, #0
 800493a:	dc0d      	bgt.n	8004958 <_printf_float+0x368>
 800493c:	2700      	movs	r7, #0
 800493e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004942:	f104 081a 	add.w	r8, r4, #26
 8004946:	e018      	b.n	800497a <_printf_float+0x38a>
 8004948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800494c:	4659      	mov	r1, fp
 800494e:	4628      	mov	r0, r5
 8004950:	47b0      	blx	r6
 8004952:	3001      	adds	r0, #1
 8004954:	d1e6      	bne.n	8004924 <_printf_float+0x334>
 8004956:	e6a2      	b.n	800469e <_printf_float+0xae>
 8004958:	464b      	mov	r3, r9
 800495a:	463a      	mov	r2, r7
 800495c:	4659      	mov	r1, fp
 800495e:	4628      	mov	r0, r5
 8004960:	47b0      	blx	r6
 8004962:	3001      	adds	r0, #1
 8004964:	d1ea      	bne.n	800493c <_printf_float+0x34c>
 8004966:	e69a      	b.n	800469e <_printf_float+0xae>
 8004968:	2301      	movs	r3, #1
 800496a:	4642      	mov	r2, r8
 800496c:	4659      	mov	r1, fp
 800496e:	4628      	mov	r0, r5
 8004970:	47b0      	blx	r6
 8004972:	3001      	adds	r0, #1
 8004974:	f43f ae93 	beq.w	800469e <_printf_float+0xae>
 8004978:	3701      	adds	r7, #1
 800497a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	eba3 0309 	sub.w	r3, r3, r9
 8004984:	42bb      	cmp	r3, r7
 8004986:	dcef      	bgt.n	8004968 <_printf_float+0x378>
 8004988:	e74d      	b.n	8004826 <_printf_float+0x236>
 800498a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800498c:	2a01      	cmp	r2, #1
 800498e:	dc01      	bgt.n	8004994 <_printf_float+0x3a4>
 8004990:	07db      	lsls	r3, r3, #31
 8004992:	d538      	bpl.n	8004a06 <_printf_float+0x416>
 8004994:	2301      	movs	r3, #1
 8004996:	463a      	mov	r2, r7
 8004998:	4659      	mov	r1, fp
 800499a:	4628      	mov	r0, r5
 800499c:	47b0      	blx	r6
 800499e:	3001      	adds	r0, #1
 80049a0:	f43f ae7d 	beq.w	800469e <_printf_float+0xae>
 80049a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049a8:	4659      	mov	r1, fp
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b0      	blx	r6
 80049ae:	3001      	adds	r0, #1
 80049b0:	f107 0701 	add.w	r7, r7, #1
 80049b4:	f43f ae73 	beq.w	800469e <_printf_float+0xae>
 80049b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049be:	2200      	movs	r2, #0
 80049c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80049c4:	2300      	movs	r3, #0
 80049c6:	f7fb ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80049ca:	b9c0      	cbnz	r0, 80049fe <_printf_float+0x40e>
 80049cc:	4643      	mov	r3, r8
 80049ce:	463a      	mov	r2, r7
 80049d0:	4659      	mov	r1, fp
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b0      	blx	r6
 80049d6:	3001      	adds	r0, #1
 80049d8:	d10d      	bne.n	80049f6 <_printf_float+0x406>
 80049da:	e660      	b.n	800469e <_printf_float+0xae>
 80049dc:	2301      	movs	r3, #1
 80049de:	4642      	mov	r2, r8
 80049e0:	4659      	mov	r1, fp
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae59 	beq.w	800469e <_printf_float+0xae>
 80049ec:	3701      	adds	r7, #1
 80049ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f0:	3b01      	subs	r3, #1
 80049f2:	42bb      	cmp	r3, r7
 80049f4:	dcf2      	bgt.n	80049dc <_printf_float+0x3ec>
 80049f6:	464b      	mov	r3, r9
 80049f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049fc:	e6e4      	b.n	80047c8 <_printf_float+0x1d8>
 80049fe:	2700      	movs	r7, #0
 8004a00:	f104 081a 	add.w	r8, r4, #26
 8004a04:	e7f3      	b.n	80049ee <_printf_float+0x3fe>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e7e1      	b.n	80049ce <_printf_float+0x3de>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	4659      	mov	r1, fp
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b0      	blx	r6
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f ae42 	beq.w	800469e <_printf_float+0xae>
 8004a1a:	3701      	adds	r7, #1
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	42bb      	cmp	r3, r7
 8004a24:	dcf1      	bgt.n	8004a0a <_printf_float+0x41a>
 8004a26:	e702      	b.n	800482e <_printf_float+0x23e>
 8004a28:	2700      	movs	r7, #0
 8004a2a:	f104 0819 	add.w	r8, r4, #25
 8004a2e:	e7f5      	b.n	8004a1c <_printf_float+0x42c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f43f ae94 	beq.w	800475e <_printf_float+0x16e>
 8004a36:	f04f 0c00 	mov.w	ip, #0
 8004a3a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004a3e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004a42:	6022      	str	r2, [r4, #0]
 8004a44:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004a48:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	463a      	mov	r2, r7
 8004a50:	464b      	mov	r3, r9
 8004a52:	4628      	mov	r0, r5
 8004a54:	f7ff fd3a 	bl	80044cc <__cvt>
 8004a58:	4607      	mov	r7, r0
 8004a5a:	e64f      	b.n	80046fc <_printf_float+0x10c>

08004a5c <_printf_common>:
 8004a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	4691      	mov	r9, r2
 8004a62:	461f      	mov	r7, r3
 8004a64:	688a      	ldr	r2, [r1, #8]
 8004a66:	690b      	ldr	r3, [r1, #16]
 8004a68:	4606      	mov	r6, r0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfb8      	it	lt
 8004a6e:	4613      	movlt	r3, r2
 8004a70:	f8c9 3000 	str.w	r3, [r9]
 8004a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a78:	460c      	mov	r4, r1
 8004a7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a7e:	b112      	cbz	r2, 8004a86 <_printf_common+0x2a>
 8004a80:	3301      	adds	r3, #1
 8004a82:	f8c9 3000 	str.w	r3, [r9]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	0699      	lsls	r1, r3, #26
 8004a8a:	bf42      	ittt	mi
 8004a8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a90:	3302      	addmi	r3, #2
 8004a92:	f8c9 3000 	strmi.w	r3, [r9]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d107      	bne.n	8004aae <_printf_common+0x52>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	42ab      	cmp	r3, r5
 8004aac:	dc29      	bgt.n	8004b02 <_printf_common+0xa6>
 8004aae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	3300      	adds	r3, #0
 8004ab6:	bf18      	it	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	0692      	lsls	r2, r2, #26
 8004abc:	d42e      	bmi.n	8004b1c <_printf_common+0xc0>
 8004abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	47c0      	blx	r8
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d021      	beq.n	8004b10 <_printf_common+0xb4>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	68e5      	ldr	r5, [r4, #12]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf18      	it	ne
 8004ad8:	2500      	movne	r5, #0
 8004ada:	f8d9 2000 	ldr.w	r2, [r9]
 8004ade:	f04f 0900 	mov.w	r9, #0
 8004ae2:	bf08      	it	eq
 8004ae4:	1aad      	subeq	r5, r5, r2
 8004ae6:	68a3      	ldr	r3, [r4, #8]
 8004ae8:	6922      	ldr	r2, [r4, #16]
 8004aea:	bf08      	it	eq
 8004aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af0:	4293      	cmp	r3, r2
 8004af2:	bfc4      	itt	gt
 8004af4:	1a9b      	subgt	r3, r3, r2
 8004af6:	18ed      	addgt	r5, r5, r3
 8004af8:	341a      	adds	r4, #26
 8004afa:	454d      	cmp	r5, r9
 8004afc:	d11a      	bne.n	8004b34 <_printf_common+0xd8>
 8004afe:	2000      	movs	r0, #0
 8004b00:	e008      	b.n	8004b14 <_printf_common+0xb8>
 8004b02:	2301      	movs	r3, #1
 8004b04:	4652      	mov	r2, sl
 8004b06:	4639      	mov	r1, r7
 8004b08:	4630      	mov	r0, r6
 8004b0a:	47c0      	blx	r8
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d103      	bne.n	8004b18 <_printf_common+0xbc>
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	3501      	adds	r5, #1
 8004b1a:	e7c2      	b.n	8004aa2 <_printf_common+0x46>
 8004b1c:	2030      	movs	r0, #48	; 0x30
 8004b1e:	18e1      	adds	r1, r4, r3
 8004b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b2a:	4422      	add	r2, r4
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b32:	e7c4      	b.n	8004abe <_printf_common+0x62>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4622      	mov	r2, r4
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d0e6      	beq.n	8004b10 <_printf_common+0xb4>
 8004b42:	f109 0901 	add.w	r9, r9, #1
 8004b46:	e7d8      	b.n	8004afa <_printf_common+0x9e>

08004b48 <_printf_i>:
 8004b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b50:	460c      	mov	r4, r1
 8004b52:	7e09      	ldrb	r1, [r1, #24]
 8004b54:	b085      	sub	sp, #20
 8004b56:	296e      	cmp	r1, #110	; 0x6e
 8004b58:	4617      	mov	r7, r2
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b60:	f000 80b3 	beq.w	8004cca <_printf_i+0x182>
 8004b64:	d822      	bhi.n	8004bac <_printf_i+0x64>
 8004b66:	2963      	cmp	r1, #99	; 0x63
 8004b68:	d036      	beq.n	8004bd8 <_printf_i+0x90>
 8004b6a:	d80a      	bhi.n	8004b82 <_printf_i+0x3a>
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	f000 80b9 	beq.w	8004ce4 <_printf_i+0x19c>
 8004b72:	2958      	cmp	r1, #88	; 0x58
 8004b74:	f000 8083 	beq.w	8004c7e <_printf_i+0x136>
 8004b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b80:	e032      	b.n	8004be8 <_printf_i+0xa0>
 8004b82:	2964      	cmp	r1, #100	; 0x64
 8004b84:	d001      	beq.n	8004b8a <_printf_i+0x42>
 8004b86:	2969      	cmp	r1, #105	; 0x69
 8004b88:	d1f6      	bne.n	8004b78 <_printf_i+0x30>
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	6813      	ldr	r3, [r2, #0]
 8004b8e:	0605      	lsls	r5, r0, #24
 8004b90:	f103 0104 	add.w	r1, r3, #4
 8004b94:	d52a      	bpl.n	8004bec <_printf_i+0xa4>
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	da03      	bge.n	8004ba6 <_printf_i+0x5e>
 8004b9e:	222d      	movs	r2, #45	; 0x2d
 8004ba0:	425b      	negs	r3, r3
 8004ba2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ba6:	486f      	ldr	r0, [pc, #444]	; (8004d64 <_printf_i+0x21c>)
 8004ba8:	220a      	movs	r2, #10
 8004baa:	e039      	b.n	8004c20 <_printf_i+0xd8>
 8004bac:	2973      	cmp	r1, #115	; 0x73
 8004bae:	f000 809d 	beq.w	8004cec <_printf_i+0x1a4>
 8004bb2:	d808      	bhi.n	8004bc6 <_printf_i+0x7e>
 8004bb4:	296f      	cmp	r1, #111	; 0x6f
 8004bb6:	d020      	beq.n	8004bfa <_printf_i+0xb2>
 8004bb8:	2970      	cmp	r1, #112	; 0x70
 8004bba:	d1dd      	bne.n	8004b78 <_printf_i+0x30>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	f043 0320 	orr.w	r3, r3, #32
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	e003      	b.n	8004bce <_printf_i+0x86>
 8004bc6:	2975      	cmp	r1, #117	; 0x75
 8004bc8:	d017      	beq.n	8004bfa <_printf_i+0xb2>
 8004bca:	2978      	cmp	r1, #120	; 0x78
 8004bcc:	d1d4      	bne.n	8004b78 <_printf_i+0x30>
 8004bce:	2378      	movs	r3, #120	; 0x78
 8004bd0:	4865      	ldr	r0, [pc, #404]	; (8004d68 <_printf_i+0x220>)
 8004bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd6:	e055      	b.n	8004c84 <_printf_i+0x13c>
 8004bd8:	6813      	ldr	r3, [r2, #0]
 8004bda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bde:	1d19      	adds	r1, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6011      	str	r1, [r2, #0]
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e08c      	b.n	8004d06 <_printf_i+0x1be>
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	bf18      	it	ne
 8004bf6:	b21b      	sxthne	r3, r3
 8004bf8:	e7cf      	b.n	8004b9a <_printf_i+0x52>
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	1d18      	adds	r0, r3, #4
 8004c00:	6010      	str	r0, [r2, #0]
 8004c02:	0628      	lsls	r0, r5, #24
 8004c04:	d501      	bpl.n	8004c0a <_printf_i+0xc2>
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	e002      	b.n	8004c10 <_printf_i+0xc8>
 8004c0a:	0668      	lsls	r0, r5, #25
 8004c0c:	d5fb      	bpl.n	8004c06 <_printf_i+0xbe>
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	296f      	cmp	r1, #111	; 0x6f
 8004c12:	bf14      	ite	ne
 8004c14:	220a      	movne	r2, #10
 8004c16:	2208      	moveq	r2, #8
 8004c18:	4852      	ldr	r0, [pc, #328]	; (8004d64 <_printf_i+0x21c>)
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c20:	6865      	ldr	r5, [r4, #4]
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	60a5      	str	r5, [r4, #8]
 8004c26:	f2c0 8095 	blt.w	8004d54 <_printf_i+0x20c>
 8004c2a:	6821      	ldr	r1, [r4, #0]
 8004c2c:	f021 0104 	bic.w	r1, r1, #4
 8004c30:	6021      	str	r1, [r4, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d13d      	bne.n	8004cb2 <_printf_i+0x16a>
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	f040 808e 	bne.w	8004d58 <_printf_i+0x210>
 8004c3c:	4665      	mov	r5, ip
 8004c3e:	2a08      	cmp	r2, #8
 8004c40:	d10b      	bne.n	8004c5a <_printf_i+0x112>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	07db      	lsls	r3, r3, #31
 8004c46:	d508      	bpl.n	8004c5a <_printf_i+0x112>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	6862      	ldr	r2, [r4, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	bfde      	ittt	le
 8004c50:	2330      	movle	r3, #48	; 0x30
 8004c52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c5a:	ebac 0305 	sub.w	r3, ip, r5
 8004c5e:	6123      	str	r3, [r4, #16]
 8004c60:	f8cd 8000 	str.w	r8, [sp]
 8004c64:	463b      	mov	r3, r7
 8004c66:	aa03      	add	r2, sp, #12
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff fef6 	bl	8004a5c <_printf_common>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d14d      	bne.n	8004d10 <_printf_i+0x1c8>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	b005      	add	sp, #20
 8004c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c7e:	4839      	ldr	r0, [pc, #228]	; (8004d64 <_printf_i+0x21c>)
 8004c80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	6821      	ldr	r1, [r4, #0]
 8004c88:	1d1d      	adds	r5, r3, #4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6015      	str	r5, [r2, #0]
 8004c8e:	060a      	lsls	r2, r1, #24
 8004c90:	d50b      	bpl.n	8004caa <_printf_i+0x162>
 8004c92:	07ca      	lsls	r2, r1, #31
 8004c94:	bf44      	itt	mi
 8004c96:	f041 0120 	orrmi.w	r1, r1, #32
 8004c9a:	6021      	strmi	r1, [r4, #0]
 8004c9c:	b91b      	cbnz	r3, 8004ca6 <_printf_i+0x15e>
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	f022 0220 	bic.w	r2, r2, #32
 8004ca4:	6022      	str	r2, [r4, #0]
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	e7b7      	b.n	8004c1a <_printf_i+0xd2>
 8004caa:	064d      	lsls	r5, r1, #25
 8004cac:	bf48      	it	mi
 8004cae:	b29b      	uxthmi	r3, r3
 8004cb0:	e7ef      	b.n	8004c92 <_printf_i+0x14a>
 8004cb2:	4665      	mov	r5, ip
 8004cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cb8:	fb02 3311 	mls	r3, r2, r1, r3
 8004cbc:	5cc3      	ldrb	r3, [r0, r3]
 8004cbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d1f5      	bne.n	8004cb4 <_printf_i+0x16c>
 8004cc8:	e7b9      	b.n	8004c3e <_printf_i+0xf6>
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	6825      	ldr	r5, [r4, #0]
 8004cce:	1d18      	adds	r0, r3, #4
 8004cd0:	6961      	ldr	r1, [r4, #20]
 8004cd2:	6010      	str	r0, [r2, #0]
 8004cd4:	0628      	lsls	r0, r5, #24
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	d501      	bpl.n	8004cde <_printf_i+0x196>
 8004cda:	6019      	str	r1, [r3, #0]
 8004cdc:	e002      	b.n	8004ce4 <_printf_i+0x19c>
 8004cde:	066a      	lsls	r2, r5, #25
 8004ce0:	d5fb      	bpl.n	8004cda <_printf_i+0x192>
 8004ce2:	8019      	strh	r1, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4665      	mov	r5, ip
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	e7b9      	b.n	8004c60 <_printf_i+0x118>
 8004cec:	6813      	ldr	r3, [r2, #0]
 8004cee:	1d19      	adds	r1, r3, #4
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	681d      	ldr	r5, [r3, #0]
 8004cf4:	6862      	ldr	r2, [r4, #4]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f002 fac7 	bl	800728c <memchr>
 8004cfe:	b108      	cbz	r0, 8004d04 <_printf_i+0x1bc>
 8004d00:	1b40      	subs	r0, r0, r5
 8004d02:	6060      	str	r0, [r4, #4]
 8004d04:	6863      	ldr	r3, [r4, #4]
 8004d06:	6123      	str	r3, [r4, #16]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0e:	e7a7      	b.n	8004c60 <_printf_i+0x118>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4639      	mov	r1, r7
 8004d16:	4630      	mov	r0, r6
 8004d18:	47c0      	blx	r8
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d0aa      	beq.n	8004c74 <_printf_i+0x12c>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	079b      	lsls	r3, r3, #30
 8004d22:	d413      	bmi.n	8004d4c <_printf_i+0x204>
 8004d24:	68e0      	ldr	r0, [r4, #12]
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	4298      	cmp	r0, r3
 8004d2a:	bfb8      	it	lt
 8004d2c:	4618      	movlt	r0, r3
 8004d2e:	e7a3      	b.n	8004c78 <_printf_i+0x130>
 8004d30:	2301      	movs	r3, #1
 8004d32:	464a      	mov	r2, r9
 8004d34:	4639      	mov	r1, r7
 8004d36:	4630      	mov	r0, r6
 8004d38:	47c0      	blx	r8
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d09a      	beq.n	8004c74 <_printf_i+0x12c>
 8004d3e:	3501      	adds	r5, #1
 8004d40:	68e3      	ldr	r3, [r4, #12]
 8004d42:	9a03      	ldr	r2, [sp, #12]
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	42ab      	cmp	r3, r5
 8004d48:	dcf2      	bgt.n	8004d30 <_printf_i+0x1e8>
 8004d4a:	e7eb      	b.n	8004d24 <_printf_i+0x1dc>
 8004d4c:	2500      	movs	r5, #0
 8004d4e:	f104 0919 	add.w	r9, r4, #25
 8004d52:	e7f5      	b.n	8004d40 <_printf_i+0x1f8>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ac      	bne.n	8004cb2 <_printf_i+0x16a>
 8004d58:	7803      	ldrb	r3, [r0, #0]
 8004d5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d62:	e76c      	b.n	8004c3e <_printf_i+0xf6>
 8004d64:	08008e6a 	.word	0x08008e6a
 8004d68:	08008e7b 	.word	0x08008e7b

08004d6c <_scanf_float>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	469a      	mov	sl, r3
 8004d72:	688b      	ldr	r3, [r1, #8]
 8004d74:	4616      	mov	r6, r2
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d7c:	bf88      	it	hi
 8004d7e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004d82:	b087      	sub	sp, #28
 8004d84:	bf85      	ittet	hi
 8004d86:	189b      	addhi	r3, r3, r2
 8004d88:	9301      	strhi	r3, [sp, #4]
 8004d8a:	2300      	movls	r3, #0
 8004d8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d90:	4688      	mov	r8, r1
 8004d92:	f04f 0b00 	mov.w	fp, #0
 8004d96:	bf8c      	ite	hi
 8004d98:	608b      	strhi	r3, [r1, #8]
 8004d9a:	9301      	strls	r3, [sp, #4]
 8004d9c:	680b      	ldr	r3, [r1, #0]
 8004d9e:	4607      	mov	r7, r0
 8004da0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004da4:	f848 3b1c 	str.w	r3, [r8], #28
 8004da8:	460c      	mov	r4, r1
 8004daa:	4645      	mov	r5, r8
 8004dac:	465a      	mov	r2, fp
 8004dae:	46d9      	mov	r9, fp
 8004db0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004db4:	f8cd b008 	str.w	fp, [sp, #8]
 8004db8:	68a1      	ldr	r1, [r4, #8]
 8004dba:	b181      	cbz	r1, 8004dde <_scanf_float+0x72>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b49      	cmp	r3, #73	; 0x49
 8004dc2:	d071      	beq.n	8004ea8 <_scanf_float+0x13c>
 8004dc4:	d84d      	bhi.n	8004e62 <_scanf_float+0xf6>
 8004dc6:	2b39      	cmp	r3, #57	; 0x39
 8004dc8:	d840      	bhi.n	8004e4c <_scanf_float+0xe0>
 8004dca:	2b31      	cmp	r3, #49	; 0x31
 8004dcc:	f080 8088 	bcs.w	8004ee0 <_scanf_float+0x174>
 8004dd0:	2b2d      	cmp	r3, #45	; 0x2d
 8004dd2:	f000 8090 	beq.w	8004ef6 <_scanf_float+0x18a>
 8004dd6:	d815      	bhi.n	8004e04 <_scanf_float+0x98>
 8004dd8:	2b2b      	cmp	r3, #43	; 0x2b
 8004dda:	f000 808c 	beq.w	8004ef6 <_scanf_float+0x18a>
 8004dde:	f1b9 0f00 	cmp.w	r9, #0
 8004de2:	d003      	beq.n	8004dec <_scanf_float+0x80>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	3a01      	subs	r2, #1
 8004dee:	2a01      	cmp	r2, #1
 8004df0:	f200 80ea 	bhi.w	8004fc8 <_scanf_float+0x25c>
 8004df4:	4545      	cmp	r5, r8
 8004df6:	f200 80dc 	bhi.w	8004fb2 <_scanf_float+0x246>
 8004dfa:	2601      	movs	r6, #1
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	b007      	add	sp, #28
 8004e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e04:	2b2e      	cmp	r3, #46	; 0x2e
 8004e06:	f000 809f 	beq.w	8004f48 <_scanf_float+0x1dc>
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d1e7      	bne.n	8004dde <_scanf_float+0x72>
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004e14:	d064      	beq.n	8004ee0 <_scanf_float+0x174>
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004e1c:	6020      	str	r0, [r4, #0]
 8004e1e:	f109 0901 	add.w	r9, r9, #1
 8004e22:	b11b      	cbz	r3, 8004e2c <_scanf_float+0xc0>
 8004e24:	3b01      	subs	r3, #1
 8004e26:	3101      	adds	r1, #1
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	60a1      	str	r1, [r4, #8]
 8004e2c:	68a3      	ldr	r3, [r4, #8]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	6873      	ldr	r3, [r6, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	6073      	str	r3, [r6, #4]
 8004e40:	f340 80ac 	ble.w	8004f9c <_scanf_float+0x230>
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	3301      	adds	r3, #1
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	e7b5      	b.n	8004db8 <_scanf_float+0x4c>
 8004e4c:	2b45      	cmp	r3, #69	; 0x45
 8004e4e:	f000 8085 	beq.w	8004f5c <_scanf_float+0x1f0>
 8004e52:	2b46      	cmp	r3, #70	; 0x46
 8004e54:	d06a      	beq.n	8004f2c <_scanf_float+0x1c0>
 8004e56:	2b41      	cmp	r3, #65	; 0x41
 8004e58:	d1c1      	bne.n	8004dde <_scanf_float+0x72>
 8004e5a:	2a01      	cmp	r2, #1
 8004e5c:	d1bf      	bne.n	8004dde <_scanf_float+0x72>
 8004e5e:	2202      	movs	r2, #2
 8004e60:	e046      	b.n	8004ef0 <_scanf_float+0x184>
 8004e62:	2b65      	cmp	r3, #101	; 0x65
 8004e64:	d07a      	beq.n	8004f5c <_scanf_float+0x1f0>
 8004e66:	d818      	bhi.n	8004e9a <_scanf_float+0x12e>
 8004e68:	2b54      	cmp	r3, #84	; 0x54
 8004e6a:	d066      	beq.n	8004f3a <_scanf_float+0x1ce>
 8004e6c:	d811      	bhi.n	8004e92 <_scanf_float+0x126>
 8004e6e:	2b4e      	cmp	r3, #78	; 0x4e
 8004e70:	d1b5      	bne.n	8004dde <_scanf_float+0x72>
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d146      	bne.n	8004f04 <_scanf_float+0x198>
 8004e76:	f1b9 0f00 	cmp.w	r9, #0
 8004e7a:	d145      	bne.n	8004f08 <_scanf_float+0x19c>
 8004e7c:	6821      	ldr	r1, [r4, #0]
 8004e7e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004e82:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004e86:	d13f      	bne.n	8004f08 <_scanf_float+0x19c>
 8004e88:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004e8c:	6021      	str	r1, [r4, #0]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	e02e      	b.n	8004ef0 <_scanf_float+0x184>
 8004e92:	2b59      	cmp	r3, #89	; 0x59
 8004e94:	d01e      	beq.n	8004ed4 <_scanf_float+0x168>
 8004e96:	2b61      	cmp	r3, #97	; 0x61
 8004e98:	e7de      	b.n	8004e58 <_scanf_float+0xec>
 8004e9a:	2b6e      	cmp	r3, #110	; 0x6e
 8004e9c:	d0e9      	beq.n	8004e72 <_scanf_float+0x106>
 8004e9e:	d815      	bhi.n	8004ecc <_scanf_float+0x160>
 8004ea0:	2b66      	cmp	r3, #102	; 0x66
 8004ea2:	d043      	beq.n	8004f2c <_scanf_float+0x1c0>
 8004ea4:	2b69      	cmp	r3, #105	; 0x69
 8004ea6:	d19a      	bne.n	8004dde <_scanf_float+0x72>
 8004ea8:	f1bb 0f00 	cmp.w	fp, #0
 8004eac:	d138      	bne.n	8004f20 <_scanf_float+0x1b4>
 8004eae:	f1b9 0f00 	cmp.w	r9, #0
 8004eb2:	d197      	bne.n	8004de4 <_scanf_float+0x78>
 8004eb4:	6821      	ldr	r1, [r4, #0]
 8004eb6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004eba:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004ebe:	d195      	bne.n	8004dec <_scanf_float+0x80>
 8004ec0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004ec4:	6021      	str	r1, [r4, #0]
 8004ec6:	f04f 0b01 	mov.w	fp, #1
 8004eca:	e011      	b.n	8004ef0 <_scanf_float+0x184>
 8004ecc:	2b74      	cmp	r3, #116	; 0x74
 8004ece:	d034      	beq.n	8004f3a <_scanf_float+0x1ce>
 8004ed0:	2b79      	cmp	r3, #121	; 0x79
 8004ed2:	d184      	bne.n	8004dde <_scanf_float+0x72>
 8004ed4:	f1bb 0f07 	cmp.w	fp, #7
 8004ed8:	d181      	bne.n	8004dde <_scanf_float+0x72>
 8004eda:	f04f 0b08 	mov.w	fp, #8
 8004ede:	e007      	b.n	8004ef0 <_scanf_float+0x184>
 8004ee0:	eb12 0f0b 	cmn.w	r2, fp
 8004ee4:	f47f af7b 	bne.w	8004dde <_scanf_float+0x72>
 8004ee8:	6821      	ldr	r1, [r4, #0]
 8004eea:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004eee:	6021      	str	r1, [r4, #0]
 8004ef0:	702b      	strb	r3, [r5, #0]
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	e79a      	b.n	8004e2c <_scanf_float+0xc0>
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	0608      	lsls	r0, r1, #24
 8004efa:	f57f af70 	bpl.w	8004dde <_scanf_float+0x72>
 8004efe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f02:	e7f4      	b.n	8004eee <_scanf_float+0x182>
 8004f04:	2a02      	cmp	r2, #2
 8004f06:	d047      	beq.n	8004f98 <_scanf_float+0x22c>
 8004f08:	f1bb 0f01 	cmp.w	fp, #1
 8004f0c:	d003      	beq.n	8004f16 <_scanf_float+0x1aa>
 8004f0e:	f1bb 0f04 	cmp.w	fp, #4
 8004f12:	f47f af64 	bne.w	8004dde <_scanf_float+0x72>
 8004f16:	f10b 0b01 	add.w	fp, fp, #1
 8004f1a:	fa5f fb8b 	uxtb.w	fp, fp
 8004f1e:	e7e7      	b.n	8004ef0 <_scanf_float+0x184>
 8004f20:	f1bb 0f03 	cmp.w	fp, #3
 8004f24:	d0f7      	beq.n	8004f16 <_scanf_float+0x1aa>
 8004f26:	f1bb 0f05 	cmp.w	fp, #5
 8004f2a:	e7f2      	b.n	8004f12 <_scanf_float+0x1a6>
 8004f2c:	f1bb 0f02 	cmp.w	fp, #2
 8004f30:	f47f af55 	bne.w	8004dde <_scanf_float+0x72>
 8004f34:	f04f 0b03 	mov.w	fp, #3
 8004f38:	e7da      	b.n	8004ef0 <_scanf_float+0x184>
 8004f3a:	f1bb 0f06 	cmp.w	fp, #6
 8004f3e:	f47f af4e 	bne.w	8004dde <_scanf_float+0x72>
 8004f42:	f04f 0b07 	mov.w	fp, #7
 8004f46:	e7d3      	b.n	8004ef0 <_scanf_float+0x184>
 8004f48:	6821      	ldr	r1, [r4, #0]
 8004f4a:	0588      	lsls	r0, r1, #22
 8004f4c:	f57f af47 	bpl.w	8004dde <_scanf_float+0x72>
 8004f50:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004f54:	6021      	str	r1, [r4, #0]
 8004f56:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f5a:	e7c9      	b.n	8004ef0 <_scanf_float+0x184>
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004f62:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004f66:	d006      	beq.n	8004f76 <_scanf_float+0x20a>
 8004f68:	0548      	lsls	r0, r1, #21
 8004f6a:	f57f af38 	bpl.w	8004dde <_scanf_float+0x72>
 8004f6e:	f1b9 0f00 	cmp.w	r9, #0
 8004f72:	f43f af3b 	beq.w	8004dec <_scanf_float+0x80>
 8004f76:	0588      	lsls	r0, r1, #22
 8004f78:	bf58      	it	pl
 8004f7a:	9802      	ldrpl	r0, [sp, #8]
 8004f7c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004f80:	bf58      	it	pl
 8004f82:	eba9 0000 	subpl.w	r0, r9, r0
 8004f86:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004f8a:	bf58      	it	pl
 8004f8c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004f90:	6021      	str	r1, [r4, #0]
 8004f92:	f04f 0900 	mov.w	r9, #0
 8004f96:	e7ab      	b.n	8004ef0 <_scanf_float+0x184>
 8004f98:	2203      	movs	r2, #3
 8004f9a:	e7a9      	b.n	8004ef0 <_scanf_float+0x184>
 8004f9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	9205      	str	r2, [sp, #20]
 8004fa6:	4798      	blx	r3
 8004fa8:	9a05      	ldr	r2, [sp, #20]
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f43f af04 	beq.w	8004db8 <_scanf_float+0x4c>
 8004fb0:	e715      	b.n	8004dde <_scanf_float+0x72>
 8004fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	4798      	blx	r3
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	6123      	str	r3, [r4, #16]
 8004fc6:	e715      	b.n	8004df4 <_scanf_float+0x88>
 8004fc8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d80a      	bhi.n	8004fe6 <_scanf_float+0x27a>
 8004fd0:	f1bb 0f02 	cmp.w	fp, #2
 8004fd4:	d967      	bls.n	80050a6 <_scanf_float+0x33a>
 8004fd6:	f1ab 0b03 	sub.w	fp, fp, #3
 8004fda:	fa5f fb8b 	uxtb.w	fp, fp
 8004fde:	eba5 0b0b 	sub.w	fp, r5, fp
 8004fe2:	455d      	cmp	r5, fp
 8004fe4:	d14a      	bne.n	800507c <_scanf_float+0x310>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	05da      	lsls	r2, r3, #23
 8004fea:	d51f      	bpl.n	800502c <_scanf_float+0x2c0>
 8004fec:	055b      	lsls	r3, r3, #21
 8004fee:	d467      	bmi.n	80050c0 <_scanf_float+0x354>
 8004ff0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	2965      	cmp	r1, #101	; 0x65
 8004ff8:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ffc:	f105 3bff 	add.w	fp, r5, #4294967295
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	d00d      	beq.n	8005020 <_scanf_float+0x2b4>
 8005004:	2945      	cmp	r1, #69	; 0x45
 8005006:	d00b      	beq.n	8005020 <_scanf_float+0x2b4>
 8005008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800500c:	4632      	mov	r2, r6
 800500e:	4638      	mov	r0, r7
 8005010:	4798      	blx	r3
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005018:	3b01      	subs	r3, #1
 800501a:	f1a5 0b02 	sub.w	fp, r5, #2
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005024:	4632      	mov	r2, r6
 8005026:	4638      	mov	r0, r7
 8005028:	4798      	blx	r3
 800502a:	465d      	mov	r5, fp
 800502c:	6826      	ldr	r6, [r4, #0]
 800502e:	f016 0610 	ands.w	r6, r6, #16
 8005032:	d176      	bne.n	8005122 <_scanf_float+0x3b6>
 8005034:	702e      	strb	r6, [r5, #0]
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d141      	bne.n	80050c6 <_scanf_float+0x35a>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	eba9 0303 	sub.w	r3, r9, r3
 8005048:	425a      	negs	r2, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d148      	bne.n	80050e0 <_scanf_float+0x374>
 800504e:	4641      	mov	r1, r8
 8005050:	2200      	movs	r2, #0
 8005052:	4638      	mov	r0, r7
 8005054:	f000 fee4 	bl	8005e20 <_strtod_r>
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	4680      	mov	r8, r0
 800505c:	f015 0f02 	tst.w	r5, #2
 8005060:	4689      	mov	r9, r1
 8005062:	f8da 3000 	ldr.w	r3, [sl]
 8005066:	d046      	beq.n	80050f6 <_scanf_float+0x38a>
 8005068:	1d1a      	adds	r2, r3, #4
 800506a:	f8ca 2000 	str.w	r2, [sl]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	e9c3 8900 	strd	r8, r9, [r3]
 8005074:	68e3      	ldr	r3, [r4, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60e3      	str	r3, [r4, #12]
 800507a:	e6bf      	b.n	8004dfc <_scanf_float+0x90>
 800507c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005080:	4632      	mov	r2, r6
 8005082:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005086:	4638      	mov	r0, r7
 8005088:	4798      	blx	r3
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	3b01      	subs	r3, #1
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	e7a7      	b.n	8004fe2 <_scanf_float+0x276>
 8005092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005096:	4632      	mov	r2, r6
 8005098:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800509c:	4638      	mov	r0, r7
 800509e:	4798      	blx	r3
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	4545      	cmp	r5, r8
 80050a8:	d8f3      	bhi.n	8005092 <_scanf_float+0x326>
 80050aa:	e6a6      	b.n	8004dfa <_scanf_float+0x8e>
 80050ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050b0:	4632      	mov	r2, r6
 80050b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80050b6:	4638      	mov	r0, r7
 80050b8:	4798      	blx	r3
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	3b01      	subs	r3, #1
 80050be:	6123      	str	r3, [r4, #16]
 80050c0:	4545      	cmp	r5, r8
 80050c2:	d8f3      	bhi.n	80050ac <_scanf_float+0x340>
 80050c4:	e699      	b.n	8004dfa <_scanf_float+0x8e>
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0c0      	beq.n	800504e <_scanf_float+0x2e2>
 80050cc:	9904      	ldr	r1, [sp, #16]
 80050ce:	230a      	movs	r3, #10
 80050d0:	4632      	mov	r2, r6
 80050d2:	3101      	adds	r1, #1
 80050d4:	4638      	mov	r0, r7
 80050d6:	f000 ff2f 	bl	8005f38 <_strtol_r>
 80050da:	9b03      	ldr	r3, [sp, #12]
 80050dc:	9d04      	ldr	r5, [sp, #16]
 80050de:	1ac2      	subs	r2, r0, r3
 80050e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80050e4:	429d      	cmp	r5, r3
 80050e6:	bf28      	it	cs
 80050e8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80050ec:	490e      	ldr	r1, [pc, #56]	; (8005128 <_scanf_float+0x3bc>)
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f854 	bl	800519c <siprintf>
 80050f4:	e7ab      	b.n	800504e <_scanf_float+0x2e2>
 80050f6:	1d1f      	adds	r7, r3, #4
 80050f8:	f015 0504 	ands.w	r5, r5, #4
 80050fc:	f8ca 7000 	str.w	r7, [sl]
 8005100:	d1b5      	bne.n	800506e <_scanf_float+0x302>
 8005102:	681f      	ldr	r7, [r3, #0]
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	f7fb fc80 	bl	8000a0c <__aeabi_dcmpun>
 800510c:	b120      	cbz	r0, 8005118 <_scanf_float+0x3ac>
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f80c 	bl	800512c <nanf>
 8005114:	6038      	str	r0, [r7, #0]
 8005116:	e7ad      	b.n	8005074 <_scanf_float+0x308>
 8005118:	4640      	mov	r0, r8
 800511a:	4649      	mov	r1, r9
 800511c:	f7fb fcd4 	bl	8000ac8 <__aeabi_d2f>
 8005120:	e7f8      	b.n	8005114 <_scanf_float+0x3a8>
 8005122:	2600      	movs	r6, #0
 8005124:	e66a      	b.n	8004dfc <_scanf_float+0x90>
 8005126:	bf00      	nop
 8005128:	08008e8c 	.word	0x08008e8c

0800512c <nanf>:
 800512c:	4800      	ldr	r0, [pc, #0]	; (8005130 <nanf+0x4>)
 800512e:	4770      	bx	lr
 8005130:	7fc00000 	.word	0x7fc00000

08005134 <sniprintf>:
 8005134:	b40c      	push	{r2, r3}
 8005136:	b530      	push	{r4, r5, lr}
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <sniprintf+0x64>)
 800513a:	1e0c      	subs	r4, r1, #0
 800513c:	b09d      	sub	sp, #116	; 0x74
 800513e:	681d      	ldr	r5, [r3, #0]
 8005140:	da08      	bge.n	8005154 <sniprintf+0x20>
 8005142:	238b      	movs	r3, #139	; 0x8b
 8005144:	f04f 30ff 	mov.w	r0, #4294967295
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	b01d      	add	sp, #116	; 0x74
 800514c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005150:	b002      	add	sp, #8
 8005152:	4770      	bx	lr
 8005154:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005158:	f8ad 3014 	strh.w	r3, [sp, #20]
 800515c:	bf0c      	ite	eq
 800515e:	4623      	moveq	r3, r4
 8005160:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	9307      	str	r3, [sp, #28]
 8005168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800516c:	9002      	str	r0, [sp, #8]
 800516e:	9006      	str	r0, [sp, #24]
 8005170:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005174:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005176:	ab21      	add	r3, sp, #132	; 0x84
 8005178:	a902      	add	r1, sp, #8
 800517a:	4628      	mov	r0, r5
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	f002 fda5 	bl	8007ccc <_svfiprintf_r>
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	bfbc      	itt	lt
 8005186:	238b      	movlt	r3, #139	; 0x8b
 8005188:	602b      	strlt	r3, [r5, #0]
 800518a:	2c00      	cmp	r4, #0
 800518c:	d0dd      	beq.n	800514a <sniprintf+0x16>
 800518e:	2200      	movs	r2, #0
 8005190:	9b02      	ldr	r3, [sp, #8]
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e7d9      	b.n	800514a <sniprintf+0x16>
 8005196:	bf00      	nop
 8005198:	200000a4 	.word	0x200000a4

0800519c <siprintf>:
 800519c:	b40e      	push	{r1, r2, r3}
 800519e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051a2:	b500      	push	{lr}
 80051a4:	b09c      	sub	sp, #112	; 0x70
 80051a6:	ab1d      	add	r3, sp, #116	; 0x74
 80051a8:	9002      	str	r0, [sp, #8]
 80051aa:	9006      	str	r0, [sp, #24]
 80051ac:	9107      	str	r1, [sp, #28]
 80051ae:	9104      	str	r1, [sp, #16]
 80051b0:	4808      	ldr	r0, [pc, #32]	; (80051d4 <siprintf+0x38>)
 80051b2:	4909      	ldr	r1, [pc, #36]	; (80051d8 <siprintf+0x3c>)
 80051b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051b8:	9105      	str	r1, [sp, #20]
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	a902      	add	r1, sp, #8
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	f002 fd84 	bl	8007ccc <_svfiprintf_r>
 80051c4:	2200      	movs	r2, #0
 80051c6:	9b02      	ldr	r3, [sp, #8]
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	b01c      	add	sp, #112	; 0x70
 80051cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d0:	b003      	add	sp, #12
 80051d2:	4770      	bx	lr
 80051d4:	200000a4 	.word	0x200000a4
 80051d8:	ffff0208 	.word	0xffff0208

080051dc <sulp>:
 80051dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e0:	460f      	mov	r7, r1
 80051e2:	4690      	mov	r8, r2
 80051e4:	f002 fb36 	bl	8007854 <__ulp>
 80051e8:	4604      	mov	r4, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	f1b8 0f00 	cmp.w	r8, #0
 80051f0:	d011      	beq.n	8005216 <sulp+0x3a>
 80051f2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80051f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd0b      	ble.n	8005216 <sulp+0x3a>
 80051fe:	2400      	movs	r4, #0
 8005200:	051b      	lsls	r3, r3, #20
 8005202:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005206:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800520a:	4622      	mov	r2, r4
 800520c:	462b      	mov	r3, r5
 800520e:	f7fb f963 	bl	80004d8 <__aeabi_dmul>
 8005212:	4604      	mov	r4, r0
 8005214:	460d      	mov	r5, r1
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005220 <_strtod_l>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	461f      	mov	r7, r3
 8005226:	2300      	movs	r3, #0
 8005228:	b0a1      	sub	sp, #132	; 0x84
 800522a:	4683      	mov	fp, r0
 800522c:	4638      	mov	r0, r7
 800522e:	460e      	mov	r6, r1
 8005230:	9217      	str	r2, [sp, #92]	; 0x5c
 8005232:	931c      	str	r3, [sp, #112]	; 0x70
 8005234:	f001 ffff 	bl	8007236 <__localeconv_l>
 8005238:	4680      	mov	r8, r0
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	f7fa ff88 	bl	8000150 <strlen>
 8005240:	f04f 0900 	mov.w	r9, #0
 8005244:	4604      	mov	r4, r0
 8005246:	f04f 0a00 	mov.w	sl, #0
 800524a:	961b      	str	r6, [sp, #108]	; 0x6c
 800524c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	2a0d      	cmp	r2, #13
 8005252:	d832      	bhi.n	80052ba <_strtod_l+0x9a>
 8005254:	2a09      	cmp	r2, #9
 8005256:	d236      	bcs.n	80052c6 <_strtod_l+0xa6>
 8005258:	2a00      	cmp	r2, #0
 800525a:	d03e      	beq.n	80052da <_strtod_l+0xba>
 800525c:	2300      	movs	r3, #0
 800525e:	930d      	str	r3, [sp, #52]	; 0x34
 8005260:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005262:	782b      	ldrb	r3, [r5, #0]
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	f040 80ac 	bne.w	80053c2 <_strtod_l+0x1a2>
 800526a:	786b      	ldrb	r3, [r5, #1]
 800526c:	2b58      	cmp	r3, #88	; 0x58
 800526e:	d001      	beq.n	8005274 <_strtod_l+0x54>
 8005270:	2b78      	cmp	r3, #120	; 0x78
 8005272:	d167      	bne.n	8005344 <_strtod_l+0x124>
 8005274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005276:	9702      	str	r7, [sp, #8]
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	ab1c      	add	r3, sp, #112	; 0x70
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	4a89      	ldr	r2, [pc, #548]	; (80054a4 <_strtod_l+0x284>)
 8005280:	ab1d      	add	r3, sp, #116	; 0x74
 8005282:	a91b      	add	r1, sp, #108	; 0x6c
 8005284:	4658      	mov	r0, fp
 8005286:	f001 fcfb 	bl	8006c80 <__gethex>
 800528a:	f010 0407 	ands.w	r4, r0, #7
 800528e:	4606      	mov	r6, r0
 8005290:	d005      	beq.n	800529e <_strtod_l+0x7e>
 8005292:	2c06      	cmp	r4, #6
 8005294:	d12b      	bne.n	80052ee <_strtod_l+0xce>
 8005296:	2300      	movs	r3, #0
 8005298:	3501      	adds	r5, #1
 800529a:	951b      	str	r5, [sp, #108]	; 0x6c
 800529c:	930d      	str	r3, [sp, #52]	; 0x34
 800529e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 85a6 	bne.w	8005df2 <_strtod_l+0xbd2>
 80052a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052a8:	b1e3      	cbz	r3, 80052e4 <_strtod_l+0xc4>
 80052aa:	464a      	mov	r2, r9
 80052ac:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	b021      	add	sp, #132	; 0x84
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ba:	2a2b      	cmp	r2, #43	; 0x2b
 80052bc:	d015      	beq.n	80052ea <_strtod_l+0xca>
 80052be:	2a2d      	cmp	r2, #45	; 0x2d
 80052c0:	d004      	beq.n	80052cc <_strtod_l+0xac>
 80052c2:	2a20      	cmp	r2, #32
 80052c4:	d1ca      	bne.n	800525c <_strtod_l+0x3c>
 80052c6:	3301      	adds	r3, #1
 80052c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80052ca:	e7bf      	b.n	800524c <_strtod_l+0x2c>
 80052cc:	2201      	movs	r2, #1
 80052ce:	920d      	str	r2, [sp, #52]	; 0x34
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1c2      	bne.n	8005260 <_strtod_l+0x40>
 80052da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 8585 	bne.w	8005dee <_strtod_l+0xbce>
 80052e4:	464a      	mov	r2, r9
 80052e6:	4653      	mov	r3, sl
 80052e8:	e7e2      	b.n	80052b0 <_strtod_l+0x90>
 80052ea:	2200      	movs	r2, #0
 80052ec:	e7ef      	b.n	80052ce <_strtod_l+0xae>
 80052ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80052f0:	b13a      	cbz	r2, 8005302 <_strtod_l+0xe2>
 80052f2:	2135      	movs	r1, #53	; 0x35
 80052f4:	a81e      	add	r0, sp, #120	; 0x78
 80052f6:	f002 fba0 	bl	8007a3a <__copybits>
 80052fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052fc:	4658      	mov	r0, fp
 80052fe:	f002 f812 	bl	8007326 <_Bfree>
 8005302:	3c01      	subs	r4, #1
 8005304:	2c04      	cmp	r4, #4
 8005306:	d806      	bhi.n	8005316 <_strtod_l+0xf6>
 8005308:	e8df f004 	tbb	[pc, r4]
 800530c:	1714030a 	.word	0x1714030a
 8005310:	0a          	.byte	0x0a
 8005311:	00          	.byte	0x00
 8005312:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005316:	0731      	lsls	r1, r6, #28
 8005318:	d5c1      	bpl.n	800529e <_strtod_l+0x7e>
 800531a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800531e:	e7be      	b.n	800529e <_strtod_l+0x7e>
 8005320:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005322:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005326:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800532a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800532e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005332:	e7f0      	b.n	8005316 <_strtod_l+0xf6>
 8005334:	f8df a170 	ldr.w	sl, [pc, #368]	; 80054a8 <_strtod_l+0x288>
 8005338:	e7ed      	b.n	8005316 <_strtod_l+0xf6>
 800533a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800533e:	f04f 39ff 	mov.w	r9, #4294967295
 8005342:	e7e8      	b.n	8005316 <_strtod_l+0xf6>
 8005344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	921b      	str	r2, [sp, #108]	; 0x6c
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b30      	cmp	r3, #48	; 0x30
 800534e:	d0f9      	beq.n	8005344 <_strtod_l+0x124>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0a4      	beq.n	800529e <_strtod_l+0x7e>
 8005354:	2301      	movs	r3, #1
 8005356:	2500      	movs	r5, #0
 8005358:	220a      	movs	r2, #10
 800535a:	9307      	str	r3, [sp, #28]
 800535c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800535e:	9506      	str	r5, [sp, #24]
 8005360:	9308      	str	r3, [sp, #32]
 8005362:	9504      	str	r5, [sp, #16]
 8005364:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005366:	7807      	ldrb	r7, [r0, #0]
 8005368:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800536c:	b2d9      	uxtb	r1, r3
 800536e:	2909      	cmp	r1, #9
 8005370:	d929      	bls.n	80053c6 <_strtod_l+0x1a6>
 8005372:	4622      	mov	r2, r4
 8005374:	f8d8 1000 	ldr.w	r1, [r8]
 8005378:	f002 fdb0 	bl	8007edc <strncmp>
 800537c:	2800      	cmp	r0, #0
 800537e:	d031      	beq.n	80053e4 <_strtod_l+0x1c4>
 8005380:	2000      	movs	r0, #0
 8005382:	463b      	mov	r3, r7
 8005384:	4602      	mov	r2, r0
 8005386:	9c04      	ldr	r4, [sp, #16]
 8005388:	9005      	str	r0, [sp, #20]
 800538a:	2b65      	cmp	r3, #101	; 0x65
 800538c:	d001      	beq.n	8005392 <_strtod_l+0x172>
 800538e:	2b45      	cmp	r3, #69	; 0x45
 8005390:	d114      	bne.n	80053bc <_strtod_l+0x19c>
 8005392:	b924      	cbnz	r4, 800539e <_strtod_l+0x17e>
 8005394:	b910      	cbnz	r0, 800539c <_strtod_l+0x17c>
 8005396:	9b07      	ldr	r3, [sp, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d09e      	beq.n	80052da <_strtod_l+0xba>
 800539c:	2400      	movs	r4, #0
 800539e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80053a0:	1c73      	adds	r3, r6, #1
 80053a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80053a4:	7873      	ldrb	r3, [r6, #1]
 80053a6:	2b2b      	cmp	r3, #43	; 0x2b
 80053a8:	d078      	beq.n	800549c <_strtod_l+0x27c>
 80053aa:	2b2d      	cmp	r3, #45	; 0x2d
 80053ac:	d070      	beq.n	8005490 <_strtod_l+0x270>
 80053ae:	f04f 0c00 	mov.w	ip, #0
 80053b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80053b6:	2f09      	cmp	r7, #9
 80053b8:	d97c      	bls.n	80054b4 <_strtod_l+0x294>
 80053ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80053bc:	f04f 0e00 	mov.w	lr, #0
 80053c0:	e09a      	b.n	80054f8 <_strtod_l+0x2d8>
 80053c2:	2300      	movs	r3, #0
 80053c4:	e7c7      	b.n	8005356 <_strtod_l+0x136>
 80053c6:	9904      	ldr	r1, [sp, #16]
 80053c8:	3001      	adds	r0, #1
 80053ca:	2908      	cmp	r1, #8
 80053cc:	bfd7      	itett	le
 80053ce:	9906      	ldrle	r1, [sp, #24]
 80053d0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80053d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80053d8:	9306      	strle	r3, [sp, #24]
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	901b      	str	r0, [sp, #108]	; 0x6c
 80053de:	3301      	adds	r3, #1
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	e7bf      	b.n	8005364 <_strtod_l+0x144>
 80053e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053e6:	191a      	adds	r2, r3, r4
 80053e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	5d1b      	ldrb	r3, [r3, r4]
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	d037      	beq.n	8005462 <_strtod_l+0x242>
 80053f2:	4602      	mov	r2, r0
 80053f4:	9c04      	ldr	r4, [sp, #16]
 80053f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80053fa:	2909      	cmp	r1, #9
 80053fc:	d913      	bls.n	8005426 <_strtod_l+0x206>
 80053fe:	2101      	movs	r1, #1
 8005400:	9105      	str	r1, [sp, #20]
 8005402:	e7c2      	b.n	800538a <_strtod_l+0x16a>
 8005404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005406:	3001      	adds	r0, #1
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	921b      	str	r2, [sp, #108]	; 0x6c
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d0f8      	beq.n	8005404 <_strtod_l+0x1e4>
 8005412:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005416:	2a08      	cmp	r2, #8
 8005418:	f200 84f0 	bhi.w	8005dfc <_strtod_l+0xbdc>
 800541c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800541e:	9208      	str	r2, [sp, #32]
 8005420:	4602      	mov	r2, r0
 8005422:	2000      	movs	r0, #0
 8005424:	4604      	mov	r4, r0
 8005426:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800542a:	f100 0101 	add.w	r1, r0, #1
 800542e:	d012      	beq.n	8005456 <_strtod_l+0x236>
 8005430:	440a      	add	r2, r1
 8005432:	270a      	movs	r7, #10
 8005434:	4621      	mov	r1, r4
 8005436:	eb00 0c04 	add.w	ip, r0, r4
 800543a:	458c      	cmp	ip, r1
 800543c:	d113      	bne.n	8005466 <_strtod_l+0x246>
 800543e:	1821      	adds	r1, r4, r0
 8005440:	2908      	cmp	r1, #8
 8005442:	f104 0401 	add.w	r4, r4, #1
 8005446:	4404      	add	r4, r0
 8005448:	dc19      	bgt.n	800547e <_strtod_l+0x25e>
 800544a:	210a      	movs	r1, #10
 800544c:	9b06      	ldr	r3, [sp, #24]
 800544e:	fb01 e303 	mla	r3, r1, r3, lr
 8005452:	9306      	str	r3, [sp, #24]
 8005454:	2100      	movs	r1, #0
 8005456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005458:	1c58      	adds	r0, r3, #1
 800545a:	901b      	str	r0, [sp, #108]	; 0x6c
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	4608      	mov	r0, r1
 8005460:	e7c9      	b.n	80053f6 <_strtod_l+0x1d6>
 8005462:	9804      	ldr	r0, [sp, #16]
 8005464:	e7d3      	b.n	800540e <_strtod_l+0x1ee>
 8005466:	2908      	cmp	r1, #8
 8005468:	f101 0101 	add.w	r1, r1, #1
 800546c:	dc03      	bgt.n	8005476 <_strtod_l+0x256>
 800546e:	9b06      	ldr	r3, [sp, #24]
 8005470:	437b      	muls	r3, r7
 8005472:	9306      	str	r3, [sp, #24]
 8005474:	e7e1      	b.n	800543a <_strtod_l+0x21a>
 8005476:	2910      	cmp	r1, #16
 8005478:	bfd8      	it	le
 800547a:	437d      	mulle	r5, r7
 800547c:	e7dd      	b.n	800543a <_strtod_l+0x21a>
 800547e:	2c10      	cmp	r4, #16
 8005480:	bfdc      	itt	le
 8005482:	210a      	movle	r1, #10
 8005484:	fb01 e505 	mlale	r5, r1, r5, lr
 8005488:	e7e4      	b.n	8005454 <_strtod_l+0x234>
 800548a:	2301      	movs	r3, #1
 800548c:	9305      	str	r3, [sp, #20]
 800548e:	e781      	b.n	8005394 <_strtod_l+0x174>
 8005490:	f04f 0c01 	mov.w	ip, #1
 8005494:	1cb3      	adds	r3, r6, #2
 8005496:	931b      	str	r3, [sp, #108]	; 0x6c
 8005498:	78b3      	ldrb	r3, [r6, #2]
 800549a:	e78a      	b.n	80053b2 <_strtod_l+0x192>
 800549c:	f04f 0c00 	mov.w	ip, #0
 80054a0:	e7f8      	b.n	8005494 <_strtod_l+0x274>
 80054a2:	bf00      	nop
 80054a4:	08008e94 	.word	0x08008e94
 80054a8:	7ff00000 	.word	0x7ff00000
 80054ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054ae:	1c5f      	adds	r7, r3, #1
 80054b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d0f9      	beq.n	80054ac <_strtod_l+0x28c>
 80054b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80054bc:	2f08      	cmp	r7, #8
 80054be:	f63f af7d 	bhi.w	80053bc <_strtod_l+0x19c>
 80054c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80054c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054c8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054cc:	1c5f      	adds	r7, r3, #1
 80054ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80054d6:	f1b8 0f09 	cmp.w	r8, #9
 80054da:	d937      	bls.n	800554c <_strtod_l+0x32c>
 80054dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054de:	1a7f      	subs	r7, r7, r1
 80054e0:	2f08      	cmp	r7, #8
 80054e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80054e6:	dc37      	bgt.n	8005558 <_strtod_l+0x338>
 80054e8:	45be      	cmp	lr, r7
 80054ea:	bfa8      	it	ge
 80054ec:	46be      	movge	lr, r7
 80054ee:	f1bc 0f00 	cmp.w	ip, #0
 80054f2:	d001      	beq.n	80054f8 <_strtod_l+0x2d8>
 80054f4:	f1ce 0e00 	rsb	lr, lr, #0
 80054f8:	2c00      	cmp	r4, #0
 80054fa:	d151      	bne.n	80055a0 <_strtod_l+0x380>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	f47f aece 	bne.w	800529e <_strtod_l+0x7e>
 8005502:	9a07      	ldr	r2, [sp, #28]
 8005504:	2a00      	cmp	r2, #0
 8005506:	f47f aeca 	bne.w	800529e <_strtod_l+0x7e>
 800550a:	9a05      	ldr	r2, [sp, #20]
 800550c:	2a00      	cmp	r2, #0
 800550e:	f47f aee4 	bne.w	80052da <_strtod_l+0xba>
 8005512:	2b4e      	cmp	r3, #78	; 0x4e
 8005514:	d027      	beq.n	8005566 <_strtod_l+0x346>
 8005516:	dc21      	bgt.n	800555c <_strtod_l+0x33c>
 8005518:	2b49      	cmp	r3, #73	; 0x49
 800551a:	f47f aede 	bne.w	80052da <_strtod_l+0xba>
 800551e:	49a4      	ldr	r1, [pc, #656]	; (80057b0 <_strtod_l+0x590>)
 8005520:	a81b      	add	r0, sp, #108	; 0x6c
 8005522:	f001 fde1 	bl	80070e8 <__match>
 8005526:	2800      	cmp	r0, #0
 8005528:	f43f aed7 	beq.w	80052da <_strtod_l+0xba>
 800552c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800552e:	49a1      	ldr	r1, [pc, #644]	; (80057b4 <_strtod_l+0x594>)
 8005530:	3b01      	subs	r3, #1
 8005532:	a81b      	add	r0, sp, #108	; 0x6c
 8005534:	931b      	str	r3, [sp, #108]	; 0x6c
 8005536:	f001 fdd7 	bl	80070e8 <__match>
 800553a:	b910      	cbnz	r0, 8005542 <_strtod_l+0x322>
 800553c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800553e:	3301      	adds	r3, #1
 8005540:	931b      	str	r3, [sp, #108]	; 0x6c
 8005542:	f8df a284 	ldr.w	sl, [pc, #644]	; 80057c8 <_strtod_l+0x5a8>
 8005546:	f04f 0900 	mov.w	r9, #0
 800554a:	e6a8      	b.n	800529e <_strtod_l+0x7e>
 800554c:	210a      	movs	r1, #10
 800554e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005552:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005556:	e7b8      	b.n	80054ca <_strtod_l+0x2aa>
 8005558:	46be      	mov	lr, r7
 800555a:	e7c8      	b.n	80054ee <_strtod_l+0x2ce>
 800555c:	2b69      	cmp	r3, #105	; 0x69
 800555e:	d0de      	beq.n	800551e <_strtod_l+0x2fe>
 8005560:	2b6e      	cmp	r3, #110	; 0x6e
 8005562:	f47f aeba 	bne.w	80052da <_strtod_l+0xba>
 8005566:	4994      	ldr	r1, [pc, #592]	; (80057b8 <_strtod_l+0x598>)
 8005568:	a81b      	add	r0, sp, #108	; 0x6c
 800556a:	f001 fdbd 	bl	80070e8 <__match>
 800556e:	2800      	cmp	r0, #0
 8005570:	f43f aeb3 	beq.w	80052da <_strtod_l+0xba>
 8005574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b28      	cmp	r3, #40	; 0x28
 800557a:	d10e      	bne.n	800559a <_strtod_l+0x37a>
 800557c:	aa1e      	add	r2, sp, #120	; 0x78
 800557e:	498f      	ldr	r1, [pc, #572]	; (80057bc <_strtod_l+0x59c>)
 8005580:	a81b      	add	r0, sp, #108	; 0x6c
 8005582:	f001 fdc5 	bl	8007110 <__hexnan>
 8005586:	2805      	cmp	r0, #5
 8005588:	d107      	bne.n	800559a <_strtod_l+0x37a>
 800558a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800558c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005590:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005594:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005598:	e681      	b.n	800529e <_strtod_l+0x7e>
 800559a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80057d0 <_strtod_l+0x5b0>
 800559e:	e7d2      	b.n	8005546 <_strtod_l+0x326>
 80055a0:	ebae 0302 	sub.w	r3, lr, r2
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	9b04      	ldr	r3, [sp, #16]
 80055a8:	9806      	ldr	r0, [sp, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf08      	it	eq
 80055ae:	4623      	moveq	r3, r4
 80055b0:	2c10      	cmp	r4, #16
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	46a0      	mov	r8, r4
 80055b6:	bfa8      	it	ge
 80055b8:	f04f 0810 	movge.w	r8, #16
 80055bc:	f7fa ff12 	bl	80003e4 <__aeabi_ui2d>
 80055c0:	2c09      	cmp	r4, #9
 80055c2:	4681      	mov	r9, r0
 80055c4:	468a      	mov	sl, r1
 80055c6:	dc13      	bgt.n	80055f0 <_strtod_l+0x3d0>
 80055c8:	9b07      	ldr	r3, [sp, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f43f ae67 	beq.w	800529e <_strtod_l+0x7e>
 80055d0:	9b07      	ldr	r3, [sp, #28]
 80055d2:	dd7e      	ble.n	80056d2 <_strtod_l+0x4b2>
 80055d4:	2b16      	cmp	r3, #22
 80055d6:	dc65      	bgt.n	80056a4 <_strtod_l+0x484>
 80055d8:	4a79      	ldr	r2, [pc, #484]	; (80057c0 <_strtod_l+0x5a0>)
 80055da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80055de:	464a      	mov	r2, r9
 80055e0:	e9de 0100 	ldrd	r0, r1, [lr]
 80055e4:	4653      	mov	r3, sl
 80055e6:	f7fa ff77 	bl	80004d8 <__aeabi_dmul>
 80055ea:	4681      	mov	r9, r0
 80055ec:	468a      	mov	sl, r1
 80055ee:	e656      	b.n	800529e <_strtod_l+0x7e>
 80055f0:	4b73      	ldr	r3, [pc, #460]	; (80057c0 <_strtod_l+0x5a0>)
 80055f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80055f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80055fa:	f7fa ff6d 	bl	80004d8 <__aeabi_dmul>
 80055fe:	4606      	mov	r6, r0
 8005600:	4628      	mov	r0, r5
 8005602:	460f      	mov	r7, r1
 8005604:	f7fa feee 	bl	80003e4 <__aeabi_ui2d>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4630      	mov	r0, r6
 800560e:	4639      	mov	r1, r7
 8005610:	f7fa fdac 	bl	800016c <__adddf3>
 8005614:	2c0f      	cmp	r4, #15
 8005616:	4681      	mov	r9, r0
 8005618:	468a      	mov	sl, r1
 800561a:	ddd5      	ble.n	80055c8 <_strtod_l+0x3a8>
 800561c:	9b07      	ldr	r3, [sp, #28]
 800561e:	eba4 0808 	sub.w	r8, r4, r8
 8005622:	4498      	add	r8, r3
 8005624:	f1b8 0f00 	cmp.w	r8, #0
 8005628:	f340 809a 	ble.w	8005760 <_strtod_l+0x540>
 800562c:	f018 030f 	ands.w	r3, r8, #15
 8005630:	d00a      	beq.n	8005648 <_strtod_l+0x428>
 8005632:	4963      	ldr	r1, [pc, #396]	; (80057c0 <_strtod_l+0x5a0>)
 8005634:	464a      	mov	r2, r9
 8005636:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800563a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800563e:	4653      	mov	r3, sl
 8005640:	f7fa ff4a 	bl	80004d8 <__aeabi_dmul>
 8005644:	4681      	mov	r9, r0
 8005646:	468a      	mov	sl, r1
 8005648:	f038 080f 	bics.w	r8, r8, #15
 800564c:	d077      	beq.n	800573e <_strtod_l+0x51e>
 800564e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005652:	dd4b      	ble.n	80056ec <_strtod_l+0x4cc>
 8005654:	f04f 0800 	mov.w	r8, #0
 8005658:	f8cd 8010 	str.w	r8, [sp, #16]
 800565c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005660:	f8cd 8018 	str.w	r8, [sp, #24]
 8005664:	2322      	movs	r3, #34	; 0x22
 8005666:	f04f 0900 	mov.w	r9, #0
 800566a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80057c8 <_strtod_l+0x5a8>
 800566e:	f8cb 3000 	str.w	r3, [fp]
 8005672:	9b08      	ldr	r3, [sp, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f43f ae12 	beq.w	800529e <_strtod_l+0x7e>
 800567a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800567c:	4658      	mov	r0, fp
 800567e:	f001 fe52 	bl	8007326 <_Bfree>
 8005682:	9906      	ldr	r1, [sp, #24]
 8005684:	4658      	mov	r0, fp
 8005686:	f001 fe4e 	bl	8007326 <_Bfree>
 800568a:	9904      	ldr	r1, [sp, #16]
 800568c:	4658      	mov	r0, fp
 800568e:	f001 fe4a 	bl	8007326 <_Bfree>
 8005692:	9908      	ldr	r1, [sp, #32]
 8005694:	4658      	mov	r0, fp
 8005696:	f001 fe46 	bl	8007326 <_Bfree>
 800569a:	4641      	mov	r1, r8
 800569c:	4658      	mov	r0, fp
 800569e:	f001 fe42 	bl	8007326 <_Bfree>
 80056a2:	e5fc      	b.n	800529e <_strtod_l+0x7e>
 80056a4:	9a07      	ldr	r2, [sp, #28]
 80056a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80056aa:	4293      	cmp	r3, r2
 80056ac:	dbb6      	blt.n	800561c <_strtod_l+0x3fc>
 80056ae:	4d44      	ldr	r5, [pc, #272]	; (80057c0 <_strtod_l+0x5a0>)
 80056b0:	f1c4 040f 	rsb	r4, r4, #15
 80056b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80056b8:	464a      	mov	r2, r9
 80056ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056be:	4653      	mov	r3, sl
 80056c0:	f7fa ff0a 	bl	80004d8 <__aeabi_dmul>
 80056c4:	9b07      	ldr	r3, [sp, #28]
 80056c6:	1b1c      	subs	r4, r3, r4
 80056c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80056cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056d0:	e789      	b.n	80055e6 <_strtod_l+0x3c6>
 80056d2:	f113 0f16 	cmn.w	r3, #22
 80056d6:	dba1      	blt.n	800561c <_strtod_l+0x3fc>
 80056d8:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <_strtod_l+0x5a0>)
 80056da:	4648      	mov	r0, r9
 80056dc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80056e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80056e4:	4651      	mov	r1, sl
 80056e6:	f7fb f821 	bl	800072c <__aeabi_ddiv>
 80056ea:	e77e      	b.n	80055ea <_strtod_l+0x3ca>
 80056ec:	2300      	movs	r3, #0
 80056ee:	4648      	mov	r0, r9
 80056f0:	4651      	mov	r1, sl
 80056f2:	461d      	mov	r5, r3
 80056f4:	4e33      	ldr	r6, [pc, #204]	; (80057c4 <_strtod_l+0x5a4>)
 80056f6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80056fa:	f1b8 0f01 	cmp.w	r8, #1
 80056fe:	dc21      	bgt.n	8005744 <_strtod_l+0x524>
 8005700:	b10b      	cbz	r3, 8005706 <_strtod_l+0x4e6>
 8005702:	4681      	mov	r9, r0
 8005704:	468a      	mov	sl, r1
 8005706:	4b2f      	ldr	r3, [pc, #188]	; (80057c4 <_strtod_l+0x5a4>)
 8005708:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800570c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005710:	464a      	mov	r2, r9
 8005712:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005716:	4653      	mov	r3, sl
 8005718:	f7fa fede 	bl	80004d8 <__aeabi_dmul>
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <_strtod_l+0x5a8>)
 800571e:	460a      	mov	r2, r1
 8005720:	400b      	ands	r3, r1
 8005722:	492a      	ldr	r1, [pc, #168]	; (80057cc <_strtod_l+0x5ac>)
 8005724:	4681      	mov	r9, r0
 8005726:	428b      	cmp	r3, r1
 8005728:	d894      	bhi.n	8005654 <_strtod_l+0x434>
 800572a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800572e:	428b      	cmp	r3, r1
 8005730:	bf86      	itte	hi
 8005732:	f04f 39ff 	movhi.w	r9, #4294967295
 8005736:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80057d4 <_strtod_l+0x5b4>
 800573a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800573e:	2300      	movs	r3, #0
 8005740:	9305      	str	r3, [sp, #20]
 8005742:	e07b      	b.n	800583c <_strtod_l+0x61c>
 8005744:	f018 0f01 	tst.w	r8, #1
 8005748:	d006      	beq.n	8005758 <_strtod_l+0x538>
 800574a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fec1 	bl	80004d8 <__aeabi_dmul>
 8005756:	2301      	movs	r3, #1
 8005758:	3501      	adds	r5, #1
 800575a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800575e:	e7cc      	b.n	80056fa <_strtod_l+0x4da>
 8005760:	d0ed      	beq.n	800573e <_strtod_l+0x51e>
 8005762:	f1c8 0800 	rsb	r8, r8, #0
 8005766:	f018 020f 	ands.w	r2, r8, #15
 800576a:	d00a      	beq.n	8005782 <_strtod_l+0x562>
 800576c:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <_strtod_l+0x5a0>)
 800576e:	4648      	mov	r0, r9
 8005770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005774:	4651      	mov	r1, sl
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa ffd7 	bl	800072c <__aeabi_ddiv>
 800577e:	4681      	mov	r9, r0
 8005780:	468a      	mov	sl, r1
 8005782:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005786:	d0da      	beq.n	800573e <_strtod_l+0x51e>
 8005788:	f1b8 0f1f 	cmp.w	r8, #31
 800578c:	dd24      	ble.n	80057d8 <_strtod_l+0x5b8>
 800578e:	f04f 0800 	mov.w	r8, #0
 8005792:	f8cd 8010 	str.w	r8, [sp, #16]
 8005796:	f8cd 8020 	str.w	r8, [sp, #32]
 800579a:	f8cd 8018 	str.w	r8, [sp, #24]
 800579e:	2322      	movs	r3, #34	; 0x22
 80057a0:	f04f 0900 	mov.w	r9, #0
 80057a4:	f04f 0a00 	mov.w	sl, #0
 80057a8:	f8cb 3000 	str.w	r3, [fp]
 80057ac:	e761      	b.n	8005672 <_strtod_l+0x452>
 80057ae:	bf00      	nop
 80057b0:	08008e5d 	.word	0x08008e5d
 80057b4:	08008eeb 	.word	0x08008eeb
 80057b8:	08008e65 	.word	0x08008e65
 80057bc:	08008ea8 	.word	0x08008ea8
 80057c0:	08008f28 	.word	0x08008f28
 80057c4:	08008f00 	.word	0x08008f00
 80057c8:	7ff00000 	.word	0x7ff00000
 80057cc:	7ca00000 	.word	0x7ca00000
 80057d0:	fff80000 	.word	0xfff80000
 80057d4:	7fefffff 	.word	0x7fefffff
 80057d8:	f018 0310 	ands.w	r3, r8, #16
 80057dc:	bf18      	it	ne
 80057de:	236a      	movne	r3, #106	; 0x6a
 80057e0:	4648      	mov	r0, r9
 80057e2:	9305      	str	r3, [sp, #20]
 80057e4:	4651      	mov	r1, sl
 80057e6:	2300      	movs	r3, #0
 80057e8:	4da1      	ldr	r5, [pc, #644]	; (8005a70 <_strtod_l+0x850>)
 80057ea:	f1b8 0f00 	cmp.w	r8, #0
 80057ee:	f300 8113 	bgt.w	8005a18 <_strtod_l+0x7f8>
 80057f2:	b10b      	cbz	r3, 80057f8 <_strtod_l+0x5d8>
 80057f4:	4681      	mov	r9, r0
 80057f6:	468a      	mov	sl, r1
 80057f8:	9b05      	ldr	r3, [sp, #20]
 80057fa:	b1bb      	cbz	r3, 800582c <_strtod_l+0x60c>
 80057fc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005800:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005804:	2b00      	cmp	r3, #0
 8005806:	4651      	mov	r1, sl
 8005808:	dd10      	ble.n	800582c <_strtod_l+0x60c>
 800580a:	2b1f      	cmp	r3, #31
 800580c:	f340 8110 	ble.w	8005a30 <_strtod_l+0x810>
 8005810:	2b34      	cmp	r3, #52	; 0x34
 8005812:	bfd8      	it	le
 8005814:	f04f 32ff 	movle.w	r2, #4294967295
 8005818:	f04f 0900 	mov.w	r9, #0
 800581c:	bfcf      	iteee	gt
 800581e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005822:	3b20      	suble	r3, #32
 8005824:	fa02 f303 	lslle.w	r3, r2, r3
 8005828:	ea03 0a01 	andle.w	sl, r3, r1
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	4648      	mov	r0, r9
 8005832:	4651      	mov	r1, sl
 8005834:	f7fb f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 8005838:	2800      	cmp	r0, #0
 800583a:	d1a8      	bne.n	800578e <_strtod_l+0x56e>
 800583c:	9b06      	ldr	r3, [sp, #24]
 800583e:	9a04      	ldr	r2, [sp, #16]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	9908      	ldr	r1, [sp, #32]
 8005844:	4623      	mov	r3, r4
 8005846:	4658      	mov	r0, fp
 8005848:	f001 fdbf 	bl	80073ca <__s2b>
 800584c:	9008      	str	r0, [sp, #32]
 800584e:	2800      	cmp	r0, #0
 8005850:	f43f af00 	beq.w	8005654 <_strtod_l+0x434>
 8005854:	9a07      	ldr	r2, [sp, #28]
 8005856:	9b07      	ldr	r3, [sp, #28]
 8005858:	2a00      	cmp	r2, #0
 800585a:	f1c3 0300 	rsb	r3, r3, #0
 800585e:	bfa8      	it	ge
 8005860:	2300      	movge	r3, #0
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	930e      	str	r3, [sp, #56]	; 0x38
 8005868:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800586c:	9316      	str	r3, [sp, #88]	; 0x58
 800586e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005872:	9b08      	ldr	r3, [sp, #32]
 8005874:	4658      	mov	r0, fp
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	f001 fd21 	bl	80072be <_Balloc>
 800587c:	9006      	str	r0, [sp, #24]
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f aef0 	beq.w	8005664 <_strtod_l+0x444>
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	300c      	adds	r0, #12
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	f103 010c 	add.w	r1, r3, #12
 800588e:	3202      	adds	r2, #2
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	f001 fd09 	bl	80072a8 <memcpy>
 8005896:	ab1e      	add	r3, sp, #120	; 0x78
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	ab1d      	add	r3, sp, #116	; 0x74
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	464a      	mov	r2, r9
 80058a0:	4653      	mov	r3, sl
 80058a2:	4658      	mov	r0, fp
 80058a4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80058a8:	f002 f84a 	bl	8007940 <__d2b>
 80058ac:	901c      	str	r0, [sp, #112]	; 0x70
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f43f aed8 	beq.w	8005664 <_strtod_l+0x444>
 80058b4:	2101      	movs	r1, #1
 80058b6:	4658      	mov	r0, fp
 80058b8:	f001 fe13 	bl	80074e2 <__i2b>
 80058bc:	9004      	str	r0, [sp, #16]
 80058be:	4603      	mov	r3, r0
 80058c0:	2800      	cmp	r0, #0
 80058c2:	f43f aecf 	beq.w	8005664 <_strtod_l+0x444>
 80058c6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80058c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	bfab      	itete	ge
 80058ce:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80058d0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80058d2:	18ee      	addge	r6, r5, r3
 80058d4:	1b5c      	sublt	r4, r3, r5
 80058d6:	9b05      	ldr	r3, [sp, #20]
 80058d8:	bfa8      	it	ge
 80058da:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80058dc:	eba5 0503 	sub.w	r5, r5, r3
 80058e0:	4415      	add	r5, r2
 80058e2:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <_strtod_l+0x854>)
 80058e4:	f105 35ff 	add.w	r5, r5, #4294967295
 80058e8:	bfb8      	it	lt
 80058ea:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80058ec:	429d      	cmp	r5, r3
 80058ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80058f2:	f280 80af 	bge.w	8005a54 <_strtod_l+0x834>
 80058f6:	1b5b      	subs	r3, r3, r5
 80058f8:	2b1f      	cmp	r3, #31
 80058fa:	eba2 0203 	sub.w	r2, r2, r3
 80058fe:	f04f 0701 	mov.w	r7, #1
 8005902:	f300 809c 	bgt.w	8005a3e <_strtod_l+0x81e>
 8005906:	2500      	movs	r5, #0
 8005908:	fa07 f303 	lsl.w	r3, r7, r3
 800590c:	930f      	str	r3, [sp, #60]	; 0x3c
 800590e:	18b7      	adds	r7, r6, r2
 8005910:	9b05      	ldr	r3, [sp, #20]
 8005912:	42be      	cmp	r6, r7
 8005914:	4414      	add	r4, r2
 8005916:	441c      	add	r4, r3
 8005918:	4633      	mov	r3, r6
 800591a:	bfa8      	it	ge
 800591c:	463b      	movge	r3, r7
 800591e:	42a3      	cmp	r3, r4
 8005920:	bfa8      	it	ge
 8005922:	4623      	movge	r3, r4
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfc2      	ittt	gt
 8005928:	1aff      	subgt	r7, r7, r3
 800592a:	1ae4      	subgt	r4, r4, r3
 800592c:	1af6      	subgt	r6, r6, r3
 800592e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005930:	b1bb      	cbz	r3, 8005962 <_strtod_l+0x742>
 8005932:	461a      	mov	r2, r3
 8005934:	9904      	ldr	r1, [sp, #16]
 8005936:	4658      	mov	r0, fp
 8005938:	f001 fe72 	bl	8007620 <__pow5mult>
 800593c:	9004      	str	r0, [sp, #16]
 800593e:	2800      	cmp	r0, #0
 8005940:	f43f ae90 	beq.w	8005664 <_strtod_l+0x444>
 8005944:	4601      	mov	r1, r0
 8005946:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005948:	4658      	mov	r0, fp
 800594a:	f001 fdd3 	bl	80074f4 <__multiply>
 800594e:	9009      	str	r0, [sp, #36]	; 0x24
 8005950:	2800      	cmp	r0, #0
 8005952:	f43f ae87 	beq.w	8005664 <_strtod_l+0x444>
 8005956:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005958:	4658      	mov	r0, fp
 800595a:	f001 fce4 	bl	8007326 <_Bfree>
 800595e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005960:	931c      	str	r3, [sp, #112]	; 0x70
 8005962:	2f00      	cmp	r7, #0
 8005964:	dc7a      	bgt.n	8005a5c <_strtod_l+0x83c>
 8005966:	9b07      	ldr	r3, [sp, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	dd08      	ble.n	800597e <_strtod_l+0x75e>
 800596c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800596e:	9906      	ldr	r1, [sp, #24]
 8005970:	4658      	mov	r0, fp
 8005972:	f001 fe55 	bl	8007620 <__pow5mult>
 8005976:	9006      	str	r0, [sp, #24]
 8005978:	2800      	cmp	r0, #0
 800597a:	f43f ae73 	beq.w	8005664 <_strtod_l+0x444>
 800597e:	2c00      	cmp	r4, #0
 8005980:	dd08      	ble.n	8005994 <_strtod_l+0x774>
 8005982:	4622      	mov	r2, r4
 8005984:	9906      	ldr	r1, [sp, #24]
 8005986:	4658      	mov	r0, fp
 8005988:	f001 fe98 	bl	80076bc <__lshift>
 800598c:	9006      	str	r0, [sp, #24]
 800598e:	2800      	cmp	r0, #0
 8005990:	f43f ae68 	beq.w	8005664 <_strtod_l+0x444>
 8005994:	2e00      	cmp	r6, #0
 8005996:	dd08      	ble.n	80059aa <_strtod_l+0x78a>
 8005998:	4632      	mov	r2, r6
 800599a:	9904      	ldr	r1, [sp, #16]
 800599c:	4658      	mov	r0, fp
 800599e:	f001 fe8d 	bl	80076bc <__lshift>
 80059a2:	9004      	str	r0, [sp, #16]
 80059a4:	2800      	cmp	r0, #0
 80059a6:	f43f ae5d 	beq.w	8005664 <_strtod_l+0x444>
 80059aa:	9a06      	ldr	r2, [sp, #24]
 80059ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059ae:	4658      	mov	r0, fp
 80059b0:	f001 fef2 	bl	8007798 <__mdiff>
 80059b4:	4680      	mov	r8, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f ae54 	beq.w	8005664 <_strtod_l+0x444>
 80059bc:	2400      	movs	r4, #0
 80059be:	68c3      	ldr	r3, [r0, #12]
 80059c0:	9904      	ldr	r1, [sp, #16]
 80059c2:	60c4      	str	r4, [r0, #12]
 80059c4:	930c      	str	r3, [sp, #48]	; 0x30
 80059c6:	f001 fecd 	bl	8007764 <__mcmp>
 80059ca:	42a0      	cmp	r0, r4
 80059cc:	da54      	bge.n	8005a78 <_strtod_l+0x858>
 80059ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d0:	b9f3      	cbnz	r3, 8005a10 <_strtod_l+0x7f0>
 80059d2:	f1b9 0f00 	cmp.w	r9, #0
 80059d6:	d11b      	bne.n	8005a10 <_strtod_l+0x7f0>
 80059d8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80059dc:	b9c3      	cbnz	r3, 8005a10 <_strtod_l+0x7f0>
 80059de:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059e2:	0d1b      	lsrs	r3, r3, #20
 80059e4:	051b      	lsls	r3, r3, #20
 80059e6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80059ea:	d911      	bls.n	8005a10 <_strtod_l+0x7f0>
 80059ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80059f0:	b91b      	cbnz	r3, 80059fa <_strtod_l+0x7da>
 80059f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	dd0a      	ble.n	8005a10 <_strtod_l+0x7f0>
 80059fa:	4641      	mov	r1, r8
 80059fc:	2201      	movs	r2, #1
 80059fe:	4658      	mov	r0, fp
 8005a00:	f001 fe5c 	bl	80076bc <__lshift>
 8005a04:	9904      	ldr	r1, [sp, #16]
 8005a06:	4680      	mov	r8, r0
 8005a08:	f001 feac 	bl	8007764 <__mcmp>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	dc68      	bgt.n	8005ae2 <_strtod_l+0x8c2>
 8005a10:	9b05      	ldr	r3, [sp, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d172      	bne.n	8005afc <_strtod_l+0x8dc>
 8005a16:	e630      	b.n	800567a <_strtod_l+0x45a>
 8005a18:	f018 0f01 	tst.w	r8, #1
 8005a1c:	d004      	beq.n	8005a28 <_strtod_l+0x808>
 8005a1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a22:	f7fa fd59 	bl	80004d8 <__aeabi_dmul>
 8005a26:	2301      	movs	r3, #1
 8005a28:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a2c:	3508      	adds	r5, #8
 8005a2e:	e6dc      	b.n	80057ea <_strtod_l+0x5ca>
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	ea03 0909 	and.w	r9, r3, r9
 8005a3c:	e6f6      	b.n	800582c <_strtod_l+0x60c>
 8005a3e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005a42:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005a46:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005a4a:	35e2      	adds	r5, #226	; 0xe2
 8005a4c:	fa07 f505 	lsl.w	r5, r7, r5
 8005a50:	970f      	str	r7, [sp, #60]	; 0x3c
 8005a52:	e75c      	b.n	800590e <_strtod_l+0x6ee>
 8005a54:	2301      	movs	r3, #1
 8005a56:	2500      	movs	r5, #0
 8005a58:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a5a:	e758      	b.n	800590e <_strtod_l+0x6ee>
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a60:	4658      	mov	r0, fp
 8005a62:	f001 fe2b 	bl	80076bc <__lshift>
 8005a66:	901c      	str	r0, [sp, #112]	; 0x70
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f47f af7c 	bne.w	8005966 <_strtod_l+0x746>
 8005a6e:	e5f9      	b.n	8005664 <_strtod_l+0x444>
 8005a70:	08008ec0 	.word	0x08008ec0
 8005a74:	fffffc02 	.word	0xfffffc02
 8005a78:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005a7c:	f040 8089 	bne.w	8005b92 <_strtod_l+0x972>
 8005a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a82:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005a86:	b342      	cbz	r2, 8005ada <_strtod_l+0x8ba>
 8005a88:	4aaf      	ldr	r2, [pc, #700]	; (8005d48 <_strtod_l+0xb28>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d156      	bne.n	8005b3c <_strtod_l+0x91c>
 8005a8e:	9b05      	ldr	r3, [sp, #20]
 8005a90:	4648      	mov	r0, r9
 8005a92:	b1eb      	cbz	r3, 8005ad0 <_strtod_l+0x8b0>
 8005a94:	4653      	mov	r3, sl
 8005a96:	4aad      	ldr	r2, [pc, #692]	; (8005d4c <_strtod_l+0xb2c>)
 8005a98:	f04f 31ff 	mov.w	r1, #4294967295
 8005a9c:	401a      	ands	r2, r3
 8005a9e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005aa2:	d818      	bhi.n	8005ad6 <_strtod_l+0x8b6>
 8005aa4:	0d12      	lsrs	r2, r2, #20
 8005aa6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	4298      	cmp	r0, r3
 8005ab0:	d144      	bne.n	8005b3c <_strtod_l+0x91c>
 8005ab2:	4ba7      	ldr	r3, [pc, #668]	; (8005d50 <_strtod_l+0xb30>)
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d102      	bne.n	8005ac0 <_strtod_l+0x8a0>
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f add2 	beq.w	8005664 <_strtod_l+0x444>
 8005ac0:	4ba2      	ldr	r3, [pc, #648]	; (8005d4c <_strtod_l+0xb2c>)
 8005ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac4:	f04f 0900 	mov.w	r9, #0
 8005ac8:	401a      	ands	r2, r3
 8005aca:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005ace:	e79f      	b.n	8005a10 <_strtod_l+0x7f0>
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	e7eb      	b.n	8005aae <_strtod_l+0x88e>
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	e7e9      	b.n	8005aae <_strtod_l+0x88e>
 8005ada:	bb7b      	cbnz	r3, 8005b3c <_strtod_l+0x91c>
 8005adc:	f1b9 0f00 	cmp.w	r9, #0
 8005ae0:	d12c      	bne.n	8005b3c <_strtod_l+0x91c>
 8005ae2:	9905      	ldr	r1, [sp, #20]
 8005ae4:	4653      	mov	r3, sl
 8005ae6:	4a99      	ldr	r2, [pc, #612]	; (8005d4c <_strtod_l+0xb2c>)
 8005ae8:	b1f1      	cbz	r1, 8005b28 <_strtod_l+0x908>
 8005aea:	ea02 010a 	and.w	r1, r2, sl
 8005aee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005af2:	dc19      	bgt.n	8005b28 <_strtod_l+0x908>
 8005af4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005af8:	f77f ae51 	ble.w	800579e <_strtod_l+0x57e>
 8005afc:	2300      	movs	r3, #0
 8005afe:	4a95      	ldr	r2, [pc, #596]	; (8005d54 <_strtod_l+0xb34>)
 8005b00:	4648      	mov	r0, r9
 8005b02:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005b06:	4651      	mov	r1, sl
 8005b08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	4681      	mov	r9, r0
 8005b12:	468a      	mov	sl, r1
 8005b14:	2900      	cmp	r1, #0
 8005b16:	f47f adb0 	bne.w	800567a <_strtod_l+0x45a>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f47f adad 	bne.w	800567a <_strtod_l+0x45a>
 8005b20:	2322      	movs	r3, #34	; 0x22
 8005b22:	f8cb 3000 	str.w	r3, [fp]
 8005b26:	e5a8      	b.n	800567a <_strtod_l+0x45a>
 8005b28:	4013      	ands	r3, r2
 8005b2a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005b2e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005b32:	f04f 39ff 	mov.w	r9, #4294967295
 8005b36:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005b3a:	e769      	b.n	8005a10 <_strtod_l+0x7f0>
 8005b3c:	b19d      	cbz	r5, 8005b66 <_strtod_l+0x946>
 8005b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b40:	421d      	tst	r5, r3
 8005b42:	f43f af65 	beq.w	8005a10 <_strtod_l+0x7f0>
 8005b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b48:	9a05      	ldr	r2, [sp, #20]
 8005b4a:	4648      	mov	r0, r9
 8005b4c:	4651      	mov	r1, sl
 8005b4e:	b173      	cbz	r3, 8005b6e <_strtod_l+0x94e>
 8005b50:	f7ff fb44 	bl	80051dc <sulp>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b5c:	f7fa fb06 	bl	800016c <__adddf3>
 8005b60:	4681      	mov	r9, r0
 8005b62:	468a      	mov	sl, r1
 8005b64:	e754      	b.n	8005a10 <_strtod_l+0x7f0>
 8005b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b68:	ea13 0f09 	tst.w	r3, r9
 8005b6c:	e7e9      	b.n	8005b42 <_strtod_l+0x922>
 8005b6e:	f7ff fb35 	bl	80051dc <sulp>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b7a:	f7fa faf5 	bl	8000168 <__aeabi_dsub>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2300      	movs	r3, #0
 8005b82:	4681      	mov	r9, r0
 8005b84:	468a      	mov	sl, r1
 8005b86:	f7fa ff0f 	bl	80009a8 <__aeabi_dcmpeq>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	f47f ae07 	bne.w	800579e <_strtod_l+0x57e>
 8005b90:	e73e      	b.n	8005a10 <_strtod_l+0x7f0>
 8005b92:	9904      	ldr	r1, [sp, #16]
 8005b94:	4640      	mov	r0, r8
 8005b96:	f001 ff22 	bl	80079de <__ratio>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	460f      	mov	r7, r1
 8005ba4:	f7fa ff14 	bl	80009d0 <__aeabi_dcmple>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d075      	beq.n	8005c98 <_strtod_l+0xa78>
 8005bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d047      	beq.n	8005c42 <_strtod_l+0xa22>
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	4f68      	ldr	r7, [pc, #416]	; (8005d58 <_strtod_l+0xb38>)
 8005bb6:	4d68      	ldr	r5, [pc, #416]	; (8005d58 <_strtod_l+0xb38>)
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bbe:	0d1b      	lsrs	r3, r3, #20
 8005bc0:	051b      	lsls	r3, r3, #20
 8005bc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bc6:	4b65      	ldr	r3, [pc, #404]	; (8005d5c <_strtod_l+0xb3c>)
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	f040 80cf 	bne.w	8005d6c <_strtod_l+0xb4c>
 8005bce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bd2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	4648      	mov	r0, r9
 8005bda:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005bde:	4651      	mov	r1, sl
 8005be0:	f001 fe38 	bl	8007854 <__ulp>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4630      	mov	r0, r6
 8005bea:	4639      	mov	r1, r7
 8005bec:	f7fa fc74 	bl	80004d8 <__aeabi_dmul>
 8005bf0:	464a      	mov	r2, r9
 8005bf2:	4653      	mov	r3, sl
 8005bf4:	f7fa faba 	bl	800016c <__adddf3>
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4954      	ldr	r1, [pc, #336]	; (8005d4c <_strtod_l+0xb2c>)
 8005bfc:	4a58      	ldr	r2, [pc, #352]	; (8005d60 <_strtod_l+0xb40>)
 8005bfe:	4019      	ands	r1, r3
 8005c00:	4291      	cmp	r1, r2
 8005c02:	4681      	mov	r9, r0
 8005c04:	d95e      	bls.n	8005cc4 <_strtod_l+0xaa4>
 8005c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d103      	bne.n	8005c18 <_strtod_l+0x9f8>
 8005c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c12:	3301      	adds	r3, #1
 8005c14:	f43f ad26 	beq.w	8005664 <_strtod_l+0x444>
 8005c18:	f04f 39ff 	mov.w	r9, #4294967295
 8005c1c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005d50 <_strtod_l+0xb30>
 8005c20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005c22:	4658      	mov	r0, fp
 8005c24:	f001 fb7f 	bl	8007326 <_Bfree>
 8005c28:	9906      	ldr	r1, [sp, #24]
 8005c2a:	4658      	mov	r0, fp
 8005c2c:	f001 fb7b 	bl	8007326 <_Bfree>
 8005c30:	9904      	ldr	r1, [sp, #16]
 8005c32:	4658      	mov	r0, fp
 8005c34:	f001 fb77 	bl	8007326 <_Bfree>
 8005c38:	4641      	mov	r1, r8
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f001 fb73 	bl	8007326 <_Bfree>
 8005c40:	e617      	b.n	8005872 <_strtod_l+0x652>
 8005c42:	f1b9 0f00 	cmp.w	r9, #0
 8005c46:	d119      	bne.n	8005c7c <_strtod_l+0xa5c>
 8005c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c4e:	b9e3      	cbnz	r3, 8005c8a <_strtod_l+0xa6a>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4b41      	ldr	r3, [pc, #260]	; (8005d58 <_strtod_l+0xb38>)
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa feb0 	bl	80009bc <__aeabi_dcmplt>
 8005c5c:	b9c8      	cbnz	r0, 8005c92 <_strtod_l+0xa72>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <_strtod_l+0xb44>)
 8005c62:	4630      	mov	r0, r6
 8005c64:	4639      	mov	r1, r7
 8005c66:	f7fa fc37 	bl	80004d8 <__aeabi_dmul>
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c72:	9418      	str	r4, [sp, #96]	; 0x60
 8005c74:	9319      	str	r3, [sp, #100]	; 0x64
 8005c76:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005c7a:	e79d      	b.n	8005bb8 <_strtod_l+0x998>
 8005c7c:	f1b9 0f01 	cmp.w	r9, #1
 8005c80:	d103      	bne.n	8005c8a <_strtod_l+0xa6a>
 8005c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f43f ad8a 	beq.w	800579e <_strtod_l+0x57e>
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	4f36      	ldr	r7, [pc, #216]	; (8005d68 <_strtod_l+0xb48>)
 8005c8e:	2400      	movs	r4, #0
 8005c90:	e791      	b.n	8005bb6 <_strtod_l+0x996>
 8005c92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005c94:	4d33      	ldr	r5, [pc, #204]	; (8005d64 <_strtod_l+0xb44>)
 8005c96:	e7ea      	b.n	8005c6e <_strtod_l+0xa4e>
 8005c98:	4b32      	ldr	r3, [pc, #200]	; (8005d64 <_strtod_l+0xb44>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fc1a 	bl	80004d8 <__aeabi_dmul>
 8005ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	b933      	cbnz	r3, 8005cba <_strtod_l+0xa9a>
 8005cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cb0:	9010      	str	r0, [sp, #64]	; 0x40
 8005cb2:	9311      	str	r3, [sp, #68]	; 0x44
 8005cb4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cb8:	e77e      	b.n	8005bb8 <_strtod_l+0x998>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005cc2:	e7f7      	b.n	8005cb4 <_strtod_l+0xa94>
 8005cc4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005cc8:	9b05      	ldr	r3, [sp, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1a8      	bne.n	8005c20 <_strtod_l+0xa00>
 8005cce:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005cd2:	0d1b      	lsrs	r3, r3, #20
 8005cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cd6:	051b      	lsls	r3, r3, #20
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	4656      	mov	r6, sl
 8005cdc:	d1a0      	bne.n	8005c20 <_strtod_l+0xa00>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f7fa fea9 	bl	8000a38 <__aeabi_d2iz>
 8005ce6:	f7fa fb8d 	bl	8000404 <__aeabi_i2d>
 8005cea:	460b      	mov	r3, r1
 8005cec:	4602      	mov	r2, r0
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f7fa fa39 	bl	8000168 <__aeabi_dsub>
 8005cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	b933      	cbnz	r3, 8005d0c <_strtod_l+0xaec>
 8005cfe:	f1b9 0f00 	cmp.w	r9, #0
 8005d02:	d103      	bne.n	8005d0c <_strtod_l+0xaec>
 8005d04:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	d06a      	beq.n	8005de2 <_strtod_l+0xbc2>
 8005d0c:	a30a      	add	r3, pc, #40	; (adr r3, 8005d38 <_strtod_l+0xb18>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	f7fa fe51 	bl	80009bc <__aeabi_dcmplt>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f47f acad 	bne.w	800567a <_strtod_l+0x45a>
 8005d20:	a307      	add	r3, pc, #28	; (adr r3, 8005d40 <_strtod_l+0xb20>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	4620      	mov	r0, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	f7fa fe65 	bl	80009f8 <__aeabi_dcmpgt>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f43f af76 	beq.w	8005c20 <_strtod_l+0xa00>
 8005d34:	e4a1      	b.n	800567a <_strtod_l+0x45a>
 8005d36:	bf00      	nop
 8005d38:	94a03595 	.word	0x94a03595
 8005d3c:	3fdfffff 	.word	0x3fdfffff
 8005d40:	35afe535 	.word	0x35afe535
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	000fffff 	.word	0x000fffff
 8005d4c:	7ff00000 	.word	0x7ff00000
 8005d50:	7fefffff 	.word	0x7fefffff
 8005d54:	39500000 	.word	0x39500000
 8005d58:	3ff00000 	.word	0x3ff00000
 8005d5c:	7fe00000 	.word	0x7fe00000
 8005d60:	7c9fffff 	.word	0x7c9fffff
 8005d64:	3fe00000 	.word	0x3fe00000
 8005d68:	bff00000 	.word	0xbff00000
 8005d6c:	9b05      	ldr	r3, [sp, #20]
 8005d6e:	b313      	cbz	r3, 8005db6 <_strtod_l+0xb96>
 8005d70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005d76:	d81e      	bhi.n	8005db6 <_strtod_l+0xb96>
 8005d78:	a325      	add	r3, pc, #148	; (adr r3, 8005e10 <_strtod_l+0xbf0>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fe25 	bl	80009d0 <__aeabi_dcmple>
 8005d86:	b190      	cbz	r0, 8005dae <_strtod_l+0xb8e>
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f7fa fe7c 	bl	8000a88 <__aeabi_d2uiz>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bf08      	it	eq
 8005d94:	2001      	moveq	r0, #1
 8005d96:	f7fa fb25 	bl	80003e4 <__aeabi_ui2d>
 8005d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	b9d3      	cbnz	r3, 8005dd8 <_strtod_l+0xbb8>
 8005da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005da6:	9012      	str	r0, [sp, #72]	; 0x48
 8005da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005daa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005dae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005db0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005db4:	1a9f      	subs	r7, r3, r2
 8005db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dba:	f001 fd4b 	bl	8007854 <__ulp>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f7fa fb87 	bl	80004d8 <__aeabi_dmul>
 8005dca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dce:	f7fa f9cd 	bl	800016c <__adddf3>
 8005dd2:	4681      	mov	r9, r0
 8005dd4:	468a      	mov	sl, r1
 8005dd6:	e777      	b.n	8005cc8 <_strtod_l+0xaa8>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005de0:	e7e3      	b.n	8005daa <_strtod_l+0xb8a>
 8005de2:	a30d      	add	r3, pc, #52	; (adr r3, 8005e18 <_strtod_l+0xbf8>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f7fa fde8 	bl	80009bc <__aeabi_dcmplt>
 8005dec:	e79f      	b.n	8005d2e <_strtod_l+0xb0e>
 8005dee:	2300      	movs	r3, #0
 8005df0:	930d      	str	r3, [sp, #52]	; 0x34
 8005df2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005df4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f7ff ba55 	b.w	80052a6 <_strtod_l+0x86>
 8005dfc:	2b65      	cmp	r3, #101	; 0x65
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f43f ab42 	beq.w	800548a <_strtod_l+0x26a>
 8005e06:	2101      	movs	r1, #1
 8005e08:	4614      	mov	r4, r2
 8005e0a:	9105      	str	r1, [sp, #20]
 8005e0c:	f7ff babf 	b.w	800538e <_strtod_l+0x16e>
 8005e10:	ffc00000 	.word	0xffc00000
 8005e14:	41dfffff 	.word	0x41dfffff
 8005e18:	94a03595 	.word	0x94a03595
 8005e1c:	3fcfffff 	.word	0x3fcfffff

08005e20 <_strtod_r>:
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <_strtod_r+0x18>)
 8005e22:	b410      	push	{r4}
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4c05      	ldr	r4, [pc, #20]	; (8005e3c <_strtod_r+0x1c>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf08      	it	eq
 8005e2e:	4623      	moveq	r3, r4
 8005e30:	bc10      	pop	{r4}
 8005e32:	f7ff b9f5 	b.w	8005220 <_strtod_l>
 8005e36:	bf00      	nop
 8005e38:	200000a4 	.word	0x200000a4
 8005e3c:	20000108 	.word	0x20000108

08005e40 <_strtol_l.isra.0>:
 8005e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	4680      	mov	r8, r0
 8005e46:	4689      	mov	r9, r1
 8005e48:	4692      	mov	sl, r2
 8005e4a:	461e      	mov	r6, r3
 8005e4c:	460f      	mov	r7, r1
 8005e4e:	463d      	mov	r5, r7
 8005e50:	9808      	ldr	r0, [sp, #32]
 8005e52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e56:	f001 f9eb 	bl	8007230 <__locale_ctype_ptr_l>
 8005e5a:	4420      	add	r0, r4
 8005e5c:	7843      	ldrb	r3, [r0, #1]
 8005e5e:	f013 0308 	ands.w	r3, r3, #8
 8005e62:	d132      	bne.n	8005eca <_strtol_l.isra.0+0x8a>
 8005e64:	2c2d      	cmp	r4, #45	; 0x2d
 8005e66:	d132      	bne.n	8005ece <_strtol_l.isra.0+0x8e>
 8005e68:	2201      	movs	r2, #1
 8005e6a:	787c      	ldrb	r4, [r7, #1]
 8005e6c:	1cbd      	adds	r5, r7, #2
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	d05d      	beq.n	8005f2e <_strtol_l.isra.0+0xee>
 8005e72:	2e10      	cmp	r6, #16
 8005e74:	d109      	bne.n	8005e8a <_strtol_l.isra.0+0x4a>
 8005e76:	2c30      	cmp	r4, #48	; 0x30
 8005e78:	d107      	bne.n	8005e8a <_strtol_l.isra.0+0x4a>
 8005e7a:	782b      	ldrb	r3, [r5, #0]
 8005e7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e80:	2b58      	cmp	r3, #88	; 0x58
 8005e82:	d14f      	bne.n	8005f24 <_strtol_l.isra.0+0xe4>
 8005e84:	2610      	movs	r6, #16
 8005e86:	786c      	ldrb	r4, [r5, #1]
 8005e88:	3502      	adds	r5, #2
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	bf14      	ite	ne
 8005e8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005e92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005e96:	2700      	movs	r7, #0
 8005e98:	fbb1 fcf6 	udiv	ip, r1, r6
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005ea2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005ea6:	2b09      	cmp	r3, #9
 8005ea8:	d817      	bhi.n	8005eda <_strtol_l.isra.0+0x9a>
 8005eaa:	461c      	mov	r4, r3
 8005eac:	42a6      	cmp	r6, r4
 8005eae:	dd23      	ble.n	8005ef8 <_strtol_l.isra.0+0xb8>
 8005eb0:	1c7b      	adds	r3, r7, #1
 8005eb2:	d007      	beq.n	8005ec4 <_strtol_l.isra.0+0x84>
 8005eb4:	4584      	cmp	ip, r0
 8005eb6:	d31c      	bcc.n	8005ef2 <_strtol_l.isra.0+0xb2>
 8005eb8:	d101      	bne.n	8005ebe <_strtol_l.isra.0+0x7e>
 8005eba:	45a6      	cmp	lr, r4
 8005ebc:	db19      	blt.n	8005ef2 <_strtol_l.isra.0+0xb2>
 8005ebe:	2701      	movs	r7, #1
 8005ec0:	fb00 4006 	mla	r0, r0, r6, r4
 8005ec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ec8:	e7eb      	b.n	8005ea2 <_strtol_l.isra.0+0x62>
 8005eca:	462f      	mov	r7, r5
 8005ecc:	e7bf      	b.n	8005e4e <_strtol_l.isra.0+0xe>
 8005ece:	2c2b      	cmp	r4, #43	; 0x2b
 8005ed0:	bf04      	itt	eq
 8005ed2:	1cbd      	addeq	r5, r7, #2
 8005ed4:	787c      	ldrbeq	r4, [r7, #1]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	e7c9      	b.n	8005e6e <_strtol_l.isra.0+0x2e>
 8005eda:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005ede:	2b19      	cmp	r3, #25
 8005ee0:	d801      	bhi.n	8005ee6 <_strtol_l.isra.0+0xa6>
 8005ee2:	3c37      	subs	r4, #55	; 0x37
 8005ee4:	e7e2      	b.n	8005eac <_strtol_l.isra.0+0x6c>
 8005ee6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005eea:	2b19      	cmp	r3, #25
 8005eec:	d804      	bhi.n	8005ef8 <_strtol_l.isra.0+0xb8>
 8005eee:	3c57      	subs	r4, #87	; 0x57
 8005ef0:	e7dc      	b.n	8005eac <_strtol_l.isra.0+0x6c>
 8005ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef6:	e7e5      	b.n	8005ec4 <_strtol_l.isra.0+0x84>
 8005ef8:	1c7b      	adds	r3, r7, #1
 8005efa:	d108      	bne.n	8005f0e <_strtol_l.isra.0+0xce>
 8005efc:	2322      	movs	r3, #34	; 0x22
 8005efe:	4608      	mov	r0, r1
 8005f00:	f8c8 3000 	str.w	r3, [r8]
 8005f04:	f1ba 0f00 	cmp.w	sl, #0
 8005f08:	d107      	bne.n	8005f1a <_strtol_l.isra.0+0xda>
 8005f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0e:	b102      	cbz	r2, 8005f12 <_strtol_l.isra.0+0xd2>
 8005f10:	4240      	negs	r0, r0
 8005f12:	f1ba 0f00 	cmp.w	sl, #0
 8005f16:	d0f8      	beq.n	8005f0a <_strtol_l.isra.0+0xca>
 8005f18:	b10f      	cbz	r7, 8005f1e <_strtol_l.isra.0+0xde>
 8005f1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f1e:	f8ca 9000 	str.w	r9, [sl]
 8005f22:	e7f2      	b.n	8005f0a <_strtol_l.isra.0+0xca>
 8005f24:	2430      	movs	r4, #48	; 0x30
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d1af      	bne.n	8005e8a <_strtol_l.isra.0+0x4a>
 8005f2a:	2608      	movs	r6, #8
 8005f2c:	e7ad      	b.n	8005e8a <_strtol_l.isra.0+0x4a>
 8005f2e:	2c30      	cmp	r4, #48	; 0x30
 8005f30:	d0a3      	beq.n	8005e7a <_strtol_l.isra.0+0x3a>
 8005f32:	260a      	movs	r6, #10
 8005f34:	e7a9      	b.n	8005e8a <_strtol_l.isra.0+0x4a>
	...

08005f38 <_strtol_r>:
 8005f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f3a:	4c06      	ldr	r4, [pc, #24]	; (8005f54 <_strtol_r+0x1c>)
 8005f3c:	4d06      	ldr	r5, [pc, #24]	; (8005f58 <_strtol_r+0x20>)
 8005f3e:	6824      	ldr	r4, [r4, #0]
 8005f40:	6a24      	ldr	r4, [r4, #32]
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	bf08      	it	eq
 8005f46:	462c      	moveq	r4, r5
 8005f48:	9400      	str	r4, [sp, #0]
 8005f4a:	f7ff ff79 	bl	8005e40 <_strtol_l.isra.0>
 8005f4e:	b003      	add	sp, #12
 8005f50:	bd30      	pop	{r4, r5, pc}
 8005f52:	bf00      	nop
 8005f54:	200000a4 	.word	0x200000a4
 8005f58:	20000108 	.word	0x20000108

08005f5c <quorem>:
 8005f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	6903      	ldr	r3, [r0, #16]
 8005f62:	690c      	ldr	r4, [r1, #16]
 8005f64:	4680      	mov	r8, r0
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	f2c0 8084 	blt.w	8006074 <quorem+0x118>
 8005f6c:	3c01      	subs	r4, #1
 8005f6e:	f101 0714 	add.w	r7, r1, #20
 8005f72:	f100 0614 	add.w	r6, r0, #20
 8005f76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f7e:	3501      	adds	r5, #1
 8005f80:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f84:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f88:	eb06 030c 	add.w	r3, r6, ip
 8005f8c:	eb07 090c 	add.w	r9, r7, ip
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	b39d      	cbz	r5, 8005ffc <quorem+0xa0>
 8005f94:	f04f 0a00 	mov.w	sl, #0
 8005f98:	4638      	mov	r0, r7
 8005f9a:	46b6      	mov	lr, r6
 8005f9c:	46d3      	mov	fp, sl
 8005f9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fa2:	b293      	uxth	r3, r2
 8005fa4:	fb05 a303 	mla	r3, r5, r3, sl
 8005fa8:	0c12      	lsrs	r2, r2, #16
 8005faa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fae:	fb05 a202 	mla	r2, r5, r2, sl
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ebab 0303 	sub.w	r3, fp, r3
 8005fb8:	f8de b000 	ldr.w	fp, [lr]
 8005fbc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fc0:	fa1f fb8b 	uxth.w	fp, fp
 8005fc4:	445b      	add	r3, fp
 8005fc6:	fa1f fb82 	uxth.w	fp, r2
 8005fca:	f8de 2000 	ldr.w	r2, [lr]
 8005fce:	4581      	cmp	r9, r0
 8005fd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fde:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005fe2:	f84e 3b04 	str.w	r3, [lr], #4
 8005fe6:	d2da      	bcs.n	8005f9e <quorem+0x42>
 8005fe8:	f856 300c 	ldr.w	r3, [r6, ip]
 8005fec:	b933      	cbnz	r3, 8005ffc <quorem+0xa0>
 8005fee:	9b01      	ldr	r3, [sp, #4]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	429e      	cmp	r6, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	d331      	bcc.n	800605c <quorem+0x100>
 8005ff8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	f001 fbb1 	bl	8007764 <__mcmp>
 8006002:	2800      	cmp	r0, #0
 8006004:	db26      	blt.n	8006054 <quorem+0xf8>
 8006006:	4630      	mov	r0, r6
 8006008:	f04f 0c00 	mov.w	ip, #0
 800600c:	3501      	adds	r5, #1
 800600e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006012:	f8d0 e000 	ldr.w	lr, [r0]
 8006016:	b28b      	uxth	r3, r1
 8006018:	ebac 0303 	sub.w	r3, ip, r3
 800601c:	fa1f f28e 	uxth.w	r2, lr
 8006020:	4413      	add	r3, r2
 8006022:	0c0a      	lsrs	r2, r1, #16
 8006024:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800602c:	b29b      	uxth	r3, r3
 800602e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006032:	45b9      	cmp	r9, r7
 8006034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006038:	f840 3b04 	str.w	r3, [r0], #4
 800603c:	d2e7      	bcs.n	800600e <quorem+0xb2>
 800603e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006042:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006046:	b92a      	cbnz	r2, 8006054 <quorem+0xf8>
 8006048:	3b04      	subs	r3, #4
 800604a:	429e      	cmp	r6, r3
 800604c:	461a      	mov	r2, r3
 800604e:	d30b      	bcc.n	8006068 <quorem+0x10c>
 8006050:	f8c8 4010 	str.w	r4, [r8, #16]
 8006054:	4628      	mov	r0, r5
 8006056:	b003      	add	sp, #12
 8006058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	3b04      	subs	r3, #4
 8006060:	2a00      	cmp	r2, #0
 8006062:	d1c9      	bne.n	8005ff8 <quorem+0x9c>
 8006064:	3c01      	subs	r4, #1
 8006066:	e7c4      	b.n	8005ff2 <quorem+0x96>
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	3b04      	subs	r3, #4
 800606c:	2a00      	cmp	r2, #0
 800606e:	d1ef      	bne.n	8006050 <quorem+0xf4>
 8006070:	3c01      	subs	r4, #1
 8006072:	e7ea      	b.n	800604a <quorem+0xee>
 8006074:	2000      	movs	r0, #0
 8006076:	e7ee      	b.n	8006056 <quorem+0xfa>

08006078 <_dtoa_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	4616      	mov	r6, r2
 800607e:	461f      	mov	r7, r3
 8006080:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006082:	b095      	sub	sp, #84	; 0x54
 8006084:	4604      	mov	r4, r0
 8006086:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800608a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800608e:	b93d      	cbnz	r5, 80060a0 <_dtoa_r+0x28>
 8006090:	2010      	movs	r0, #16
 8006092:	f001 f8e1 	bl	8007258 <malloc>
 8006096:	6260      	str	r0, [r4, #36]	; 0x24
 8006098:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800609c:	6005      	str	r5, [r0, #0]
 800609e:	60c5      	str	r5, [r0, #12]
 80060a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a2:	6819      	ldr	r1, [r3, #0]
 80060a4:	b151      	cbz	r1, 80060bc <_dtoa_r+0x44>
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	2301      	movs	r3, #1
 80060aa:	4093      	lsls	r3, r2
 80060ac:	604a      	str	r2, [r1, #4]
 80060ae:	608b      	str	r3, [r1, #8]
 80060b0:	4620      	mov	r0, r4
 80060b2:	f001 f938 	bl	8007326 <_Bfree>
 80060b6:	2200      	movs	r2, #0
 80060b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	1e3b      	subs	r3, r7, #0
 80060be:	bfaf      	iteee	ge
 80060c0:	2300      	movge	r3, #0
 80060c2:	2201      	movlt	r2, #1
 80060c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060c8:	9303      	strlt	r3, [sp, #12]
 80060ca:	bfac      	ite	ge
 80060cc:	f8c8 3000 	strge.w	r3, [r8]
 80060d0:	f8c8 2000 	strlt.w	r2, [r8]
 80060d4:	4bae      	ldr	r3, [pc, #696]	; (8006390 <_dtoa_r+0x318>)
 80060d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060da:	ea33 0308 	bics.w	r3, r3, r8
 80060de:	d11b      	bne.n	8006118 <_dtoa_r+0xa0>
 80060e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80060e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	b923      	cbnz	r3, 80060f6 <_dtoa_r+0x7e>
 80060ec:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f000 8545 	beq.w	8006b80 <_dtoa_r+0xb08>
 80060f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f8:	b953      	cbnz	r3, 8006110 <_dtoa_r+0x98>
 80060fa:	4ba6      	ldr	r3, [pc, #664]	; (8006394 <_dtoa_r+0x31c>)
 80060fc:	e021      	b.n	8006142 <_dtoa_r+0xca>
 80060fe:	4ba6      	ldr	r3, [pc, #664]	; (8006398 <_dtoa_r+0x320>)
 8006100:	9306      	str	r3, [sp, #24]
 8006102:	3308      	adds	r3, #8
 8006104:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	9806      	ldr	r0, [sp, #24]
 800610a:	b015      	add	sp, #84	; 0x54
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	4ba0      	ldr	r3, [pc, #640]	; (8006394 <_dtoa_r+0x31c>)
 8006112:	9306      	str	r3, [sp, #24]
 8006114:	3303      	adds	r3, #3
 8006116:	e7f5      	b.n	8006104 <_dtoa_r+0x8c>
 8006118:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	4630      	mov	r0, r6
 8006122:	4639      	mov	r1, r7
 8006124:	f7fa fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8006128:	4682      	mov	sl, r0
 800612a:	b160      	cbz	r0, 8006146 <_dtoa_r+0xce>
 800612c:	2301      	movs	r3, #1
 800612e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8520 	beq.w	8006b7a <_dtoa_r+0xb02>
 800613a:	4b98      	ldr	r3, [pc, #608]	; (800639c <_dtoa_r+0x324>)
 800613c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	3b01      	subs	r3, #1
 8006142:	9306      	str	r3, [sp, #24]
 8006144:	e7e0      	b.n	8006108 <_dtoa_r+0x90>
 8006146:	ab12      	add	r3, sp, #72	; 0x48
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	ab13      	add	r3, sp, #76	; 0x4c
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	4632      	mov	r2, r6
 8006150:	463b      	mov	r3, r7
 8006152:	4620      	mov	r0, r4
 8006154:	f001 fbf4 	bl	8007940 <__d2b>
 8006158:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800615c:	4683      	mov	fp, r0
 800615e:	2d00      	cmp	r5, #0
 8006160:	d07d      	beq.n	800625e <_dtoa_r+0x1e6>
 8006162:	46b0      	mov	r8, r6
 8006164:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006168:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800616c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006170:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006174:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006178:	2200      	movs	r2, #0
 800617a:	4b89      	ldr	r3, [pc, #548]	; (80063a0 <_dtoa_r+0x328>)
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7f9 fff2 	bl	8000168 <__aeabi_dsub>
 8006184:	a37c      	add	r3, pc, #496	; (adr r3, 8006378 <_dtoa_r+0x300>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f9a5 	bl	80004d8 <__aeabi_dmul>
 800618e:	a37c      	add	r3, pc, #496	; (adr r3, 8006380 <_dtoa_r+0x308>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f7f9 ffea 	bl	800016c <__adddf3>
 8006198:	4606      	mov	r6, r0
 800619a:	4628      	mov	r0, r5
 800619c:	460f      	mov	r7, r1
 800619e:	f7fa f931 	bl	8000404 <__aeabi_i2d>
 80061a2:	a379      	add	r3, pc, #484	; (adr r3, 8006388 <_dtoa_r+0x310>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa f996 	bl	80004d8 <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7f9 ffda 	bl	800016c <__adddf3>
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa fc3c 	bl	8000a38 <__aeabi_d2iz>
 80061c0:	2200      	movs	r2, #0
 80061c2:	4682      	mov	sl, r0
 80061c4:	2300      	movs	r3, #0
 80061c6:	4630      	mov	r0, r6
 80061c8:	4639      	mov	r1, r7
 80061ca:	f7fa fbf7 	bl	80009bc <__aeabi_dcmplt>
 80061ce:	b148      	cbz	r0, 80061e4 <_dtoa_r+0x16c>
 80061d0:	4650      	mov	r0, sl
 80061d2:	f7fa f917 	bl	8000404 <__aeabi_i2d>
 80061d6:	4632      	mov	r2, r6
 80061d8:	463b      	mov	r3, r7
 80061da:	f7fa fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80061de:	b908      	cbnz	r0, 80061e4 <_dtoa_r+0x16c>
 80061e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061e4:	f1ba 0f16 	cmp.w	sl, #22
 80061e8:	d85a      	bhi.n	80062a0 <_dtoa_r+0x228>
 80061ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ee:	496d      	ldr	r1, [pc, #436]	; (80063a4 <_dtoa_r+0x32c>)
 80061f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80061f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f8:	f7fa fbfe 	bl	80009f8 <__aeabi_dcmpgt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d051      	beq.n	80062a4 <_dtoa_r+0x22c>
 8006200:	2300      	movs	r3, #0
 8006202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006206:	930d      	str	r3, [sp, #52]	; 0x34
 8006208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800620a:	1b5d      	subs	r5, r3, r5
 800620c:	1e6b      	subs	r3, r5, #1
 800620e:	9307      	str	r3, [sp, #28]
 8006210:	bf43      	ittte	mi
 8006212:	2300      	movmi	r3, #0
 8006214:	f1c5 0901 	rsbmi	r9, r5, #1
 8006218:	9307      	strmi	r3, [sp, #28]
 800621a:	f04f 0900 	movpl.w	r9, #0
 800621e:	f1ba 0f00 	cmp.w	sl, #0
 8006222:	db41      	blt.n	80062a8 <_dtoa_r+0x230>
 8006224:	9b07      	ldr	r3, [sp, #28]
 8006226:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800622a:	4453      	add	r3, sl
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	2300      	movs	r3, #0
 8006230:	9308      	str	r3, [sp, #32]
 8006232:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006234:	2b09      	cmp	r3, #9
 8006236:	f200 808f 	bhi.w	8006358 <_dtoa_r+0x2e0>
 800623a:	2b05      	cmp	r3, #5
 800623c:	bfc4      	itt	gt
 800623e:	3b04      	subgt	r3, #4
 8006240:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006242:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006244:	bfc8      	it	gt
 8006246:	2500      	movgt	r5, #0
 8006248:	f1a3 0302 	sub.w	r3, r3, #2
 800624c:	bfd8      	it	le
 800624e:	2501      	movle	r5, #1
 8006250:	2b03      	cmp	r3, #3
 8006252:	f200 808d 	bhi.w	8006370 <_dtoa_r+0x2f8>
 8006256:	e8df f003 	tbb	[pc, r3]
 800625a:	7d7b      	.short	0x7d7b
 800625c:	6f2f      	.short	0x6f2f
 800625e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006262:	441d      	add	r5, r3
 8006264:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006268:	2820      	cmp	r0, #32
 800626a:	dd13      	ble.n	8006294 <_dtoa_r+0x21c>
 800626c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	fa08 f800 	lsl.w	r8, r8, r0
 8006276:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800627a:	fa23 f000 	lsr.w	r0, r3, r0
 800627e:	ea48 0000 	orr.w	r0, r8, r0
 8006282:	f7fa f8af 	bl	80003e4 <__aeabi_ui2d>
 8006286:	2301      	movs	r3, #1
 8006288:	4680      	mov	r8, r0
 800628a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800628e:	3d01      	subs	r5, #1
 8006290:	9310      	str	r3, [sp, #64]	; 0x40
 8006292:	e771      	b.n	8006178 <_dtoa_r+0x100>
 8006294:	9b02      	ldr	r3, [sp, #8]
 8006296:	f1c0 0020 	rsb	r0, r0, #32
 800629a:	fa03 f000 	lsl.w	r0, r3, r0
 800629e:	e7f0      	b.n	8006282 <_dtoa_r+0x20a>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e7b0      	b.n	8006206 <_dtoa_r+0x18e>
 80062a4:	900d      	str	r0, [sp, #52]	; 0x34
 80062a6:	e7af      	b.n	8006208 <_dtoa_r+0x190>
 80062a8:	f1ca 0300 	rsb	r3, sl, #0
 80062ac:	9308      	str	r3, [sp, #32]
 80062ae:	2300      	movs	r3, #0
 80062b0:	eba9 090a 	sub.w	r9, r9, sl
 80062b4:	930c      	str	r3, [sp, #48]	; 0x30
 80062b6:	e7bc      	b.n	8006232 <_dtoa_r+0x1ba>
 80062b8:	2301      	movs	r3, #1
 80062ba:	9309      	str	r3, [sp, #36]	; 0x24
 80062bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	dd74      	ble.n	80063ac <_dtoa_r+0x334>
 80062c2:	4698      	mov	r8, r3
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	2200      	movs	r2, #0
 80062c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062ca:	6072      	str	r2, [r6, #4]
 80062cc:	2204      	movs	r2, #4
 80062ce:	f102 0014 	add.w	r0, r2, #20
 80062d2:	4298      	cmp	r0, r3
 80062d4:	6871      	ldr	r1, [r6, #4]
 80062d6:	d96e      	bls.n	80063b6 <_dtoa_r+0x33e>
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fff0 	bl	80072be <_Balloc>
 80062de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f1b8 0f0e 	cmp.w	r8, #14
 80062e8:	9306      	str	r3, [sp, #24]
 80062ea:	f200 80ed 	bhi.w	80064c8 <_dtoa_r+0x450>
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	f000 80ea 	beq.w	80064c8 <_dtoa_r+0x450>
 80062f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062f8:	f1ba 0f00 	cmp.w	sl, #0
 80062fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006300:	dd77      	ble.n	80063f2 <_dtoa_r+0x37a>
 8006302:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <_dtoa_r+0x32c>)
 8006304:	f00a 030f 	and.w	r3, sl, #15
 8006308:	ea4f 162a 	mov.w	r6, sl, asr #4
 800630c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006310:	06f0      	lsls	r0, r6, #27
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800631a:	d568      	bpl.n	80063ee <_dtoa_r+0x376>
 800631c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006320:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <_dtoa_r+0x330>)
 8006322:	2503      	movs	r5, #3
 8006324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006328:	f7fa fa00 	bl	800072c <__aeabi_ddiv>
 800632c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006330:	f006 060f 	and.w	r6, r6, #15
 8006334:	4f1c      	ldr	r7, [pc, #112]	; (80063a8 <_dtoa_r+0x330>)
 8006336:	e04f      	b.n	80063d8 <_dtoa_r+0x360>
 8006338:	2301      	movs	r3, #1
 800633a:	9309      	str	r3, [sp, #36]	; 0x24
 800633c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800633e:	4453      	add	r3, sl
 8006340:	f103 0801 	add.w	r8, r3, #1
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	4643      	mov	r3, r8
 8006348:	2b01      	cmp	r3, #1
 800634a:	bfb8      	it	lt
 800634c:	2301      	movlt	r3, #1
 800634e:	e7ba      	b.n	80062c6 <_dtoa_r+0x24e>
 8006350:	2300      	movs	r3, #0
 8006352:	e7b2      	b.n	80062ba <_dtoa_r+0x242>
 8006354:	2300      	movs	r3, #0
 8006356:	e7f0      	b.n	800633a <_dtoa_r+0x2c2>
 8006358:	2501      	movs	r5, #1
 800635a:	2300      	movs	r3, #0
 800635c:	9509      	str	r5, [sp, #36]	; 0x24
 800635e:	931e      	str	r3, [sp, #120]	; 0x78
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	2200      	movs	r2, #0
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	4698      	mov	r8, r3
 800636a:	2312      	movs	r3, #18
 800636c:	921f      	str	r2, [sp, #124]	; 0x7c
 800636e:	e7aa      	b.n	80062c6 <_dtoa_r+0x24e>
 8006370:	2301      	movs	r3, #1
 8006372:	9309      	str	r3, [sp, #36]	; 0x24
 8006374:	e7f4      	b.n	8006360 <_dtoa_r+0x2e8>
 8006376:	bf00      	nop
 8006378:	636f4361 	.word	0x636f4361
 800637c:	3fd287a7 	.word	0x3fd287a7
 8006380:	8b60c8b3 	.word	0x8b60c8b3
 8006384:	3fc68a28 	.word	0x3fc68a28
 8006388:	509f79fb 	.word	0x509f79fb
 800638c:	3fd34413 	.word	0x3fd34413
 8006390:	7ff00000 	.word	0x7ff00000
 8006394:	08008ef1 	.word	0x08008ef1
 8006398:	08008ee8 	.word	0x08008ee8
 800639c:	08008e69 	.word	0x08008e69
 80063a0:	3ff80000 	.word	0x3ff80000
 80063a4:	08008f28 	.word	0x08008f28
 80063a8:	08008f00 	.word	0x08008f00
 80063ac:	2301      	movs	r3, #1
 80063ae:	9304      	str	r3, [sp, #16]
 80063b0:	4698      	mov	r8, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	e7da      	b.n	800636c <_dtoa_r+0x2f4>
 80063b6:	3101      	adds	r1, #1
 80063b8:	6071      	str	r1, [r6, #4]
 80063ba:	0052      	lsls	r2, r2, #1
 80063bc:	e787      	b.n	80062ce <_dtoa_r+0x256>
 80063be:	07f1      	lsls	r1, r6, #31
 80063c0:	d508      	bpl.n	80063d4 <_dtoa_r+0x35c>
 80063c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ca:	f7fa f885 	bl	80004d8 <__aeabi_dmul>
 80063ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063d2:	3501      	adds	r5, #1
 80063d4:	1076      	asrs	r6, r6, #1
 80063d6:	3708      	adds	r7, #8
 80063d8:	2e00      	cmp	r6, #0
 80063da:	d1f0      	bne.n	80063be <_dtoa_r+0x346>
 80063dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e4:	f7fa f9a2 	bl	800072c <__aeabi_ddiv>
 80063e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ec:	e01b      	b.n	8006426 <_dtoa_r+0x3ae>
 80063ee:	2502      	movs	r5, #2
 80063f0:	e7a0      	b.n	8006334 <_dtoa_r+0x2bc>
 80063f2:	f000 80a4 	beq.w	800653e <_dtoa_r+0x4c6>
 80063f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80063fa:	f1ca 0600 	rsb	r6, sl, #0
 80063fe:	4ba0      	ldr	r3, [pc, #640]	; (8006680 <_dtoa_r+0x608>)
 8006400:	f006 020f 	and.w	r2, r6, #15
 8006404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f864 	bl	80004d8 <__aeabi_dmul>
 8006410:	2502      	movs	r5, #2
 8006412:	2300      	movs	r3, #0
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	4f9a      	ldr	r7, [pc, #616]	; (8006684 <_dtoa_r+0x60c>)
 800641a:	1136      	asrs	r6, r6, #4
 800641c:	2e00      	cmp	r6, #0
 800641e:	f040 8083 	bne.w	8006528 <_dtoa_r+0x4b0>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e0      	bne.n	80063e8 <_dtoa_r+0x370>
 8006426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 808a 	beq.w	8006542 <_dtoa_r+0x4ca>
 800642e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006432:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006436:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800643a:	2200      	movs	r2, #0
 800643c:	4b92      	ldr	r3, [pc, #584]	; (8006688 <_dtoa_r+0x610>)
 800643e:	f7fa fabd 	bl	80009bc <__aeabi_dcmplt>
 8006442:	2800      	cmp	r0, #0
 8006444:	d07d      	beq.n	8006542 <_dtoa_r+0x4ca>
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	d07a      	beq.n	8006542 <_dtoa_r+0x4ca>
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	dd36      	ble.n	80064c0 <_dtoa_r+0x448>
 8006452:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006456:	2200      	movs	r2, #0
 8006458:	4b8c      	ldr	r3, [pc, #560]	; (800668c <_dtoa_r+0x614>)
 800645a:	f7fa f83d 	bl	80004d8 <__aeabi_dmul>
 800645e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006462:	9e04      	ldr	r6, [sp, #16]
 8006464:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006468:	3501      	adds	r5, #1
 800646a:	4628      	mov	r0, r5
 800646c:	f7f9 ffca 	bl	8000404 <__aeabi_i2d>
 8006470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006474:	f7fa f830 	bl	80004d8 <__aeabi_dmul>
 8006478:	2200      	movs	r2, #0
 800647a:	4b85      	ldr	r3, [pc, #532]	; (8006690 <_dtoa_r+0x618>)
 800647c:	f7f9 fe76 	bl	800016c <__adddf3>
 8006480:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006484:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006488:	950b      	str	r5, [sp, #44]	; 0x2c
 800648a:	2e00      	cmp	r6, #0
 800648c:	d15c      	bne.n	8006548 <_dtoa_r+0x4d0>
 800648e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	4b7f      	ldr	r3, [pc, #508]	; (8006694 <_dtoa_r+0x61c>)
 8006496:	f7f9 fe67 	bl	8000168 <__aeabi_dsub>
 800649a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649c:	462b      	mov	r3, r5
 800649e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a2:	f7fa faa9 	bl	80009f8 <__aeabi_dcmpgt>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	f040 8281 	bne.w	80069ae <_dtoa_r+0x936>
 80064ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80064b6:	f7fa fa81 	bl	80009bc <__aeabi_dcmplt>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	f040 8275 	bne.w	80069aa <_dtoa_r+0x932>
 80064c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80064c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f2c0 814b 	blt.w	8006766 <_dtoa_r+0x6ee>
 80064d0:	f1ba 0f0e 	cmp.w	sl, #14
 80064d4:	f300 8147 	bgt.w	8006766 <_dtoa_r+0x6ee>
 80064d8:	4b69      	ldr	r3, [pc, #420]	; (8006680 <_dtoa_r+0x608>)
 80064da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f280 80d7 	bge.w	800669c <_dtoa_r+0x624>
 80064ee:	f1b8 0f00 	cmp.w	r8, #0
 80064f2:	f300 80d3 	bgt.w	800669c <_dtoa_r+0x624>
 80064f6:	f040 8257 	bne.w	80069a8 <_dtoa_r+0x930>
 80064fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064fe:	2200      	movs	r2, #0
 8006500:	4b64      	ldr	r3, [pc, #400]	; (8006694 <_dtoa_r+0x61c>)
 8006502:	f7f9 ffe9 	bl	80004d8 <__aeabi_dmul>
 8006506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800650a:	f7fa fa6b 	bl	80009e4 <__aeabi_dcmpge>
 800650e:	4646      	mov	r6, r8
 8006510:	4647      	mov	r7, r8
 8006512:	2800      	cmp	r0, #0
 8006514:	f040 822d 	bne.w	8006972 <_dtoa_r+0x8fa>
 8006518:	9b06      	ldr	r3, [sp, #24]
 800651a:	9a06      	ldr	r2, [sp, #24]
 800651c:	1c5d      	adds	r5, r3, #1
 800651e:	2331      	movs	r3, #49	; 0x31
 8006520:	f10a 0a01 	add.w	sl, sl, #1
 8006524:	7013      	strb	r3, [r2, #0]
 8006526:	e228      	b.n	800697a <_dtoa_r+0x902>
 8006528:	07f2      	lsls	r2, r6, #31
 800652a:	d505      	bpl.n	8006538 <_dtoa_r+0x4c0>
 800652c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006530:	f7f9 ffd2 	bl	80004d8 <__aeabi_dmul>
 8006534:	2301      	movs	r3, #1
 8006536:	3501      	adds	r5, #1
 8006538:	1076      	asrs	r6, r6, #1
 800653a:	3708      	adds	r7, #8
 800653c:	e76e      	b.n	800641c <_dtoa_r+0x3a4>
 800653e:	2502      	movs	r5, #2
 8006540:	e771      	b.n	8006426 <_dtoa_r+0x3ae>
 8006542:	4657      	mov	r7, sl
 8006544:	4646      	mov	r6, r8
 8006546:	e790      	b.n	800646a <_dtoa_r+0x3f2>
 8006548:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <_dtoa_r+0x608>)
 800654a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800654e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d048      	beq.n	80065ea <_dtoa_r+0x572>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	2000      	movs	r0, #0
 800655e:	494e      	ldr	r1, [pc, #312]	; (8006698 <_dtoa_r+0x620>)
 8006560:	f7fa f8e4 	bl	800072c <__aeabi_ddiv>
 8006564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006568:	f7f9 fdfe 	bl	8000168 <__aeabi_dsub>
 800656c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006570:	9d06      	ldr	r5, [sp, #24]
 8006572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006576:	f7fa fa5f 	bl	8000a38 <__aeabi_d2iz>
 800657a:	9011      	str	r0, [sp, #68]	; 0x44
 800657c:	f7f9 ff42 	bl	8000404 <__aeabi_i2d>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006588:	f7f9 fdee 	bl	8000168 <__aeabi_dsub>
 800658c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800658e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006592:	3330      	adds	r3, #48	; 0x30
 8006594:	f805 3b01 	strb.w	r3, [r5], #1
 8006598:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800659c:	f7fa fa0e 	bl	80009bc <__aeabi_dcmplt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d163      	bne.n	800666c <_dtoa_r+0x5f4>
 80065a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065a8:	2000      	movs	r0, #0
 80065aa:	4937      	ldr	r1, [pc, #220]	; (8006688 <_dtoa_r+0x610>)
 80065ac:	f7f9 fddc 	bl	8000168 <__aeabi_dsub>
 80065b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065b4:	f7fa fa02 	bl	80009bc <__aeabi_dcmplt>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	f040 80b5 	bne.w	8006728 <_dtoa_r+0x6b0>
 80065be:	9b06      	ldr	r3, [sp, #24]
 80065c0:	1aeb      	subs	r3, r5, r3
 80065c2:	429e      	cmp	r6, r3
 80065c4:	f77f af7c 	ble.w	80064c0 <_dtoa_r+0x448>
 80065c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065cc:	2200      	movs	r2, #0
 80065ce:	4b2f      	ldr	r3, [pc, #188]	; (800668c <_dtoa_r+0x614>)
 80065d0:	f7f9 ff82 	bl	80004d8 <__aeabi_dmul>
 80065d4:	2200      	movs	r2, #0
 80065d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <_dtoa_r+0x614>)
 80065e0:	f7f9 ff7a 	bl	80004d8 <__aeabi_dmul>
 80065e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065e8:	e7c3      	b.n	8006572 <_dtoa_r+0x4fa>
 80065ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065ee:	f7f9 ff73 	bl	80004d8 <__aeabi_dmul>
 80065f2:	9b06      	ldr	r3, [sp, #24]
 80065f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065f8:	199d      	adds	r5, r3, r6
 80065fa:	461e      	mov	r6, r3
 80065fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006600:	f7fa fa1a 	bl	8000a38 <__aeabi_d2iz>
 8006604:	9011      	str	r0, [sp, #68]	; 0x44
 8006606:	f7f9 fefd 	bl	8000404 <__aeabi_i2d>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006612:	f7f9 fda9 	bl	8000168 <__aeabi_dsub>
 8006616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800661c:	3330      	adds	r3, #48	; 0x30
 800661e:	f806 3b01 	strb.w	r3, [r6], #1
 8006622:	42ae      	cmp	r6, r5
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	d124      	bne.n	8006674 <_dtoa_r+0x5fc>
 800662a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800662e:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <_dtoa_r+0x620>)
 8006630:	f7f9 fd9c 	bl	800016c <__adddf3>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800663c:	f7fa f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 8006640:	2800      	cmp	r0, #0
 8006642:	d171      	bne.n	8006728 <_dtoa_r+0x6b0>
 8006644:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006648:	2000      	movs	r0, #0
 800664a:	4913      	ldr	r1, [pc, #76]	; (8006698 <_dtoa_r+0x620>)
 800664c:	f7f9 fd8c 	bl	8000168 <__aeabi_dsub>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006658:	f7fa f9b0 	bl	80009bc <__aeabi_dcmplt>
 800665c:	2800      	cmp	r0, #0
 800665e:	f43f af2f 	beq.w	80064c0 <_dtoa_r+0x448>
 8006662:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006666:	1e6a      	subs	r2, r5, #1
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d001      	beq.n	8006670 <_dtoa_r+0x5f8>
 800666c:	46ba      	mov	sl, r7
 800666e:	e04a      	b.n	8006706 <_dtoa_r+0x68e>
 8006670:	4615      	mov	r5, r2
 8006672:	e7f6      	b.n	8006662 <_dtoa_r+0x5ea>
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <_dtoa_r+0x614>)
 8006676:	f7f9 ff2f 	bl	80004d8 <__aeabi_dmul>
 800667a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667e:	e7bd      	b.n	80065fc <_dtoa_r+0x584>
 8006680:	08008f28 	.word	0x08008f28
 8006684:	08008f00 	.word	0x08008f00
 8006688:	3ff00000 	.word	0x3ff00000
 800668c:	40240000 	.word	0x40240000
 8006690:	401c0000 	.word	0x401c0000
 8006694:	40140000 	.word	0x40140000
 8006698:	3fe00000 	.word	0x3fe00000
 800669c:	9d06      	ldr	r5, [sp, #24]
 800669e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7fa f83f 	bl	800072c <__aeabi_ddiv>
 80066ae:	f7fa f9c3 	bl	8000a38 <__aeabi_d2iz>
 80066b2:	4681      	mov	r9, r0
 80066b4:	f7f9 fea6 	bl	8000404 <__aeabi_i2d>
 80066b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066bc:	f7f9 ff0c 	bl	80004d8 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7f9 fd4e 	bl	8000168 <__aeabi_dsub>
 80066cc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80066d0:	f805 6b01 	strb.w	r6, [r5], #1
 80066d4:	9e06      	ldr	r6, [sp, #24]
 80066d6:	4602      	mov	r2, r0
 80066d8:	1bae      	subs	r6, r5, r6
 80066da:	45b0      	cmp	r8, r6
 80066dc:	460b      	mov	r3, r1
 80066de:	d135      	bne.n	800674c <_dtoa_r+0x6d4>
 80066e0:	f7f9 fd44 	bl	800016c <__adddf3>
 80066e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e8:	4606      	mov	r6, r0
 80066ea:	460f      	mov	r7, r1
 80066ec:	f7fa f984 	bl	80009f8 <__aeabi_dcmpgt>
 80066f0:	b9c8      	cbnz	r0, 8006726 <_dtoa_r+0x6ae>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7fa f955 	bl	80009a8 <__aeabi_dcmpeq>
 80066fe:	b110      	cbz	r0, 8006706 <_dtoa_r+0x68e>
 8006700:	f019 0f01 	tst.w	r9, #1
 8006704:	d10f      	bne.n	8006726 <_dtoa_r+0x6ae>
 8006706:	4659      	mov	r1, fp
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fe0c 	bl	8007326 <_Bfree>
 800670e:	2300      	movs	r3, #0
 8006710:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006712:	702b      	strb	r3, [r5, #0]
 8006714:	f10a 0301 	add.w	r3, sl, #1
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800671c:	2b00      	cmp	r3, #0
 800671e:	f43f acf3 	beq.w	8006108 <_dtoa_r+0x90>
 8006722:	601d      	str	r5, [r3, #0]
 8006724:	e4f0      	b.n	8006108 <_dtoa_r+0x90>
 8006726:	4657      	mov	r7, sl
 8006728:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800672c:	1e6b      	subs	r3, r5, #1
 800672e:	2a39      	cmp	r2, #57	; 0x39
 8006730:	d106      	bne.n	8006740 <_dtoa_r+0x6c8>
 8006732:	9a06      	ldr	r2, [sp, #24]
 8006734:	429a      	cmp	r2, r3
 8006736:	d107      	bne.n	8006748 <_dtoa_r+0x6d0>
 8006738:	2330      	movs	r3, #48	; 0x30
 800673a:	7013      	strb	r3, [r2, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	3701      	adds	r7, #1
 8006740:	781a      	ldrb	r2, [r3, #0]
 8006742:	3201      	adds	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e791      	b.n	800666c <_dtoa_r+0x5f4>
 8006748:	461d      	mov	r5, r3
 800674a:	e7ed      	b.n	8006728 <_dtoa_r+0x6b0>
 800674c:	2200      	movs	r2, #0
 800674e:	4b99      	ldr	r3, [pc, #612]	; (80069b4 <_dtoa_r+0x93c>)
 8006750:	f7f9 fec2 	bl	80004d8 <__aeabi_dmul>
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	f7fa f924 	bl	80009a8 <__aeabi_dcmpeq>
 8006760:	2800      	cmp	r0, #0
 8006762:	d09e      	beq.n	80066a2 <_dtoa_r+0x62a>
 8006764:	e7cf      	b.n	8006706 <_dtoa_r+0x68e>
 8006766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006768:	2a00      	cmp	r2, #0
 800676a:	f000 8088 	beq.w	800687e <_dtoa_r+0x806>
 800676e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006770:	2a01      	cmp	r2, #1
 8006772:	dc6d      	bgt.n	8006850 <_dtoa_r+0x7d8>
 8006774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006776:	2a00      	cmp	r2, #0
 8006778:	d066      	beq.n	8006848 <_dtoa_r+0x7d0>
 800677a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800677e:	464d      	mov	r5, r9
 8006780:	9e08      	ldr	r6, [sp, #32]
 8006782:	9a07      	ldr	r2, [sp, #28]
 8006784:	2101      	movs	r1, #1
 8006786:	441a      	add	r2, r3
 8006788:	4620      	mov	r0, r4
 800678a:	4499      	add	r9, r3
 800678c:	9207      	str	r2, [sp, #28]
 800678e:	f000 fea8 	bl	80074e2 <__i2b>
 8006792:	4607      	mov	r7, r0
 8006794:	2d00      	cmp	r5, #0
 8006796:	dd0b      	ble.n	80067b0 <_dtoa_r+0x738>
 8006798:	9b07      	ldr	r3, [sp, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	dd08      	ble.n	80067b0 <_dtoa_r+0x738>
 800679e:	42ab      	cmp	r3, r5
 80067a0:	bfa8      	it	ge
 80067a2:	462b      	movge	r3, r5
 80067a4:	9a07      	ldr	r2, [sp, #28]
 80067a6:	eba9 0903 	sub.w	r9, r9, r3
 80067aa:	1aed      	subs	r5, r5, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	9307      	str	r3, [sp, #28]
 80067b0:	9b08      	ldr	r3, [sp, #32]
 80067b2:	b1eb      	cbz	r3, 80067f0 <_dtoa_r+0x778>
 80067b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d065      	beq.n	8006886 <_dtoa_r+0x80e>
 80067ba:	b18e      	cbz	r6, 80067e0 <_dtoa_r+0x768>
 80067bc:	4639      	mov	r1, r7
 80067be:	4632      	mov	r2, r6
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 ff2d 	bl	8007620 <__pow5mult>
 80067c6:	465a      	mov	r2, fp
 80067c8:	4601      	mov	r1, r0
 80067ca:	4607      	mov	r7, r0
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fe91 	bl	80074f4 <__multiply>
 80067d2:	4659      	mov	r1, fp
 80067d4:	900a      	str	r0, [sp, #40]	; 0x28
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fda5 	bl	8007326 <_Bfree>
 80067dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067de:	469b      	mov	fp, r3
 80067e0:	9b08      	ldr	r3, [sp, #32]
 80067e2:	1b9a      	subs	r2, r3, r6
 80067e4:	d004      	beq.n	80067f0 <_dtoa_r+0x778>
 80067e6:	4659      	mov	r1, fp
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 ff19 	bl	8007620 <__pow5mult>
 80067ee:	4683      	mov	fp, r0
 80067f0:	2101      	movs	r1, #1
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fe75 	bl	80074e2 <__i2b>
 80067f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fa:	4606      	mov	r6, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 81c6 	beq.w	8006b8e <_dtoa_r+0xb16>
 8006802:	461a      	mov	r2, r3
 8006804:	4601      	mov	r1, r0
 8006806:	4620      	mov	r0, r4
 8006808:	f000 ff0a 	bl	8007620 <__pow5mult>
 800680c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800680e:	4606      	mov	r6, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	dc3e      	bgt.n	8006892 <_dtoa_r+0x81a>
 8006814:	9b02      	ldr	r3, [sp, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d137      	bne.n	800688a <_dtoa_r+0x812>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006820:	2b00      	cmp	r3, #0
 8006822:	d134      	bne.n	800688e <_dtoa_r+0x816>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800682a:	0d1b      	lsrs	r3, r3, #20
 800682c:	051b      	lsls	r3, r3, #20
 800682e:	b12b      	cbz	r3, 800683c <_dtoa_r+0x7c4>
 8006830:	9b07      	ldr	r3, [sp, #28]
 8006832:	f109 0901 	add.w	r9, r9, #1
 8006836:	3301      	adds	r3, #1
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	2301      	movs	r3, #1
 800683c:	9308      	str	r3, [sp, #32]
 800683e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006840:	2b00      	cmp	r3, #0
 8006842:	d128      	bne.n	8006896 <_dtoa_r+0x81e>
 8006844:	2001      	movs	r0, #1
 8006846:	e02e      	b.n	80068a6 <_dtoa_r+0x82e>
 8006848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800684a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800684e:	e796      	b.n	800677e <_dtoa_r+0x706>
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	f108 36ff 	add.w	r6, r8, #4294967295
 8006856:	42b3      	cmp	r3, r6
 8006858:	bfb7      	itett	lt
 800685a:	9b08      	ldrlt	r3, [sp, #32]
 800685c:	1b9e      	subge	r6, r3, r6
 800685e:	1af2      	sublt	r2, r6, r3
 8006860:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006862:	bfbf      	itttt	lt
 8006864:	9608      	strlt	r6, [sp, #32]
 8006866:	189b      	addlt	r3, r3, r2
 8006868:	930c      	strlt	r3, [sp, #48]	; 0x30
 800686a:	2600      	movlt	r6, #0
 800686c:	f1b8 0f00 	cmp.w	r8, #0
 8006870:	bfb9      	ittee	lt
 8006872:	eba9 0508 	sublt.w	r5, r9, r8
 8006876:	2300      	movlt	r3, #0
 8006878:	464d      	movge	r5, r9
 800687a:	4643      	movge	r3, r8
 800687c:	e781      	b.n	8006782 <_dtoa_r+0x70a>
 800687e:	9e08      	ldr	r6, [sp, #32]
 8006880:	464d      	mov	r5, r9
 8006882:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006884:	e786      	b.n	8006794 <_dtoa_r+0x71c>
 8006886:	9a08      	ldr	r2, [sp, #32]
 8006888:	e7ad      	b.n	80067e6 <_dtoa_r+0x76e>
 800688a:	2300      	movs	r3, #0
 800688c:	e7d6      	b.n	800683c <_dtoa_r+0x7c4>
 800688e:	9b02      	ldr	r3, [sp, #8]
 8006890:	e7d4      	b.n	800683c <_dtoa_r+0x7c4>
 8006892:	2300      	movs	r3, #0
 8006894:	9308      	str	r3, [sp, #32]
 8006896:	6933      	ldr	r3, [r6, #16]
 8006898:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800689c:	6918      	ldr	r0, [r3, #16]
 800689e:	f000 fdd2 	bl	8007446 <__hi0bits>
 80068a2:	f1c0 0020 	rsb	r0, r0, #32
 80068a6:	9b07      	ldr	r3, [sp, #28]
 80068a8:	4418      	add	r0, r3
 80068aa:	f010 001f 	ands.w	r0, r0, #31
 80068ae:	d047      	beq.n	8006940 <_dtoa_r+0x8c8>
 80068b0:	f1c0 0320 	rsb	r3, r0, #32
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	dd3b      	ble.n	8006930 <_dtoa_r+0x8b8>
 80068b8:	9b07      	ldr	r3, [sp, #28]
 80068ba:	f1c0 001c 	rsb	r0, r0, #28
 80068be:	4481      	add	r9, r0
 80068c0:	4405      	add	r5, r0
 80068c2:	4403      	add	r3, r0
 80068c4:	9307      	str	r3, [sp, #28]
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	dd05      	ble.n	80068d8 <_dtoa_r+0x860>
 80068cc:	4659      	mov	r1, fp
 80068ce:	464a      	mov	r2, r9
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 fef3 	bl	80076bc <__lshift>
 80068d6:	4683      	mov	fp, r0
 80068d8:	9b07      	ldr	r3, [sp, #28]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dd05      	ble.n	80068ea <_dtoa_r+0x872>
 80068de:	4631      	mov	r1, r6
 80068e0:	461a      	mov	r2, r3
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 feea 	bl	80076bc <__lshift>
 80068e8:	4606      	mov	r6, r0
 80068ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ec:	b353      	cbz	r3, 8006944 <_dtoa_r+0x8cc>
 80068ee:	4631      	mov	r1, r6
 80068f0:	4658      	mov	r0, fp
 80068f2:	f000 ff37 	bl	8007764 <__mcmp>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	da24      	bge.n	8006944 <_dtoa_r+0x8cc>
 80068fa:	2300      	movs	r3, #0
 80068fc:	4659      	mov	r1, fp
 80068fe:	220a      	movs	r2, #10
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fd27 	bl	8007354 <__multadd>
 8006906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006908:	f10a 3aff 	add.w	sl, sl, #4294967295
 800690c:	4683      	mov	fp, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8144 	beq.w	8006b9c <_dtoa_r+0xb24>
 8006914:	2300      	movs	r3, #0
 8006916:	4639      	mov	r1, r7
 8006918:	220a      	movs	r2, #10
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fd1a 	bl	8007354 <__multadd>
 8006920:	9b04      	ldr	r3, [sp, #16]
 8006922:	4607      	mov	r7, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	dc4d      	bgt.n	80069c4 <_dtoa_r+0x94c>
 8006928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800692a:	2b02      	cmp	r3, #2
 800692c:	dd4a      	ble.n	80069c4 <_dtoa_r+0x94c>
 800692e:	e011      	b.n	8006954 <_dtoa_r+0x8dc>
 8006930:	d0c9      	beq.n	80068c6 <_dtoa_r+0x84e>
 8006932:	9a07      	ldr	r2, [sp, #28]
 8006934:	331c      	adds	r3, #28
 8006936:	441a      	add	r2, r3
 8006938:	4499      	add	r9, r3
 800693a:	441d      	add	r5, r3
 800693c:	4613      	mov	r3, r2
 800693e:	e7c1      	b.n	80068c4 <_dtoa_r+0x84c>
 8006940:	4603      	mov	r3, r0
 8006942:	e7f6      	b.n	8006932 <_dtoa_r+0x8ba>
 8006944:	f1b8 0f00 	cmp.w	r8, #0
 8006948:	dc36      	bgt.n	80069b8 <_dtoa_r+0x940>
 800694a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800694c:	2b02      	cmp	r3, #2
 800694e:	dd33      	ble.n	80069b8 <_dtoa_r+0x940>
 8006950:	f8cd 8010 	str.w	r8, [sp, #16]
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	b963      	cbnz	r3, 8006972 <_dtoa_r+0x8fa>
 8006958:	4631      	mov	r1, r6
 800695a:	2205      	movs	r2, #5
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fcf9 	bl	8007354 <__multadd>
 8006962:	4601      	mov	r1, r0
 8006964:	4606      	mov	r6, r0
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fefc 	bl	8007764 <__mcmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	f73f add3 	bgt.w	8006518 <_dtoa_r+0x4a0>
 8006972:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006974:	9d06      	ldr	r5, [sp, #24]
 8006976:	ea6f 0a03 	mvn.w	sl, r3
 800697a:	f04f 0900 	mov.w	r9, #0
 800697e:	4631      	mov	r1, r6
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fcd0 	bl	8007326 <_Bfree>
 8006986:	2f00      	cmp	r7, #0
 8006988:	f43f aebd 	beq.w	8006706 <_dtoa_r+0x68e>
 800698c:	f1b9 0f00 	cmp.w	r9, #0
 8006990:	d005      	beq.n	800699e <_dtoa_r+0x926>
 8006992:	45b9      	cmp	r9, r7
 8006994:	d003      	beq.n	800699e <_dtoa_r+0x926>
 8006996:	4649      	mov	r1, r9
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fcc4 	bl	8007326 <_Bfree>
 800699e:	4639      	mov	r1, r7
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fcc0 	bl	8007326 <_Bfree>
 80069a6:	e6ae      	b.n	8006706 <_dtoa_r+0x68e>
 80069a8:	2600      	movs	r6, #0
 80069aa:	4637      	mov	r7, r6
 80069ac:	e7e1      	b.n	8006972 <_dtoa_r+0x8fa>
 80069ae:	46ba      	mov	sl, r7
 80069b0:	4637      	mov	r7, r6
 80069b2:	e5b1      	b.n	8006518 <_dtoa_r+0x4a0>
 80069b4:	40240000 	.word	0x40240000
 80069b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80f3 	beq.w	8006baa <_dtoa_r+0xb32>
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	dd05      	ble.n	80069d4 <_dtoa_r+0x95c>
 80069c8:	4639      	mov	r1, r7
 80069ca:	462a      	mov	r2, r5
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fe75 	bl	80076bc <__lshift>
 80069d2:	4607      	mov	r7, r0
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d04c      	beq.n	8006a74 <_dtoa_r+0x9fc>
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4620      	mov	r0, r4
 80069de:	f000 fc6e 	bl	80072be <_Balloc>
 80069e2:	4605      	mov	r5, r0
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	f107 010c 	add.w	r1, r7, #12
 80069ea:	3202      	adds	r2, #2
 80069ec:	0092      	lsls	r2, r2, #2
 80069ee:	300c      	adds	r0, #12
 80069f0:	f000 fc5a 	bl	80072a8 <memcpy>
 80069f4:	2201      	movs	r2, #1
 80069f6:	4629      	mov	r1, r5
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fe5f 	bl	80076bc <__lshift>
 80069fe:	46b9      	mov	r9, r7
 8006a00:	4607      	mov	r7, r0
 8006a02:	9b06      	ldr	r3, [sp, #24]
 8006a04:	9307      	str	r3, [sp, #28]
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	9308      	str	r3, [sp, #32]
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4658      	mov	r0, fp
 8006a12:	f7ff faa3 	bl	8005f5c <quorem>
 8006a16:	4649      	mov	r1, r9
 8006a18:	4605      	mov	r5, r0
 8006a1a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 fea0 	bl	8007764 <__mcmp>
 8006a24:	463a      	mov	r2, r7
 8006a26:	9002      	str	r0, [sp, #8]
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 feb4 	bl	8007798 <__mdiff>
 8006a30:	68c3      	ldr	r3, [r0, #12]
 8006a32:	4602      	mov	r2, r0
 8006a34:	bb03      	cbnz	r3, 8006a78 <_dtoa_r+0xa00>
 8006a36:	4601      	mov	r1, r0
 8006a38:	9009      	str	r0, [sp, #36]	; 0x24
 8006a3a:	4658      	mov	r0, fp
 8006a3c:	f000 fe92 	bl	8007764 <__mcmp>
 8006a40:	4603      	mov	r3, r0
 8006a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a44:	4611      	mov	r1, r2
 8006a46:	4620      	mov	r0, r4
 8006a48:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4a:	f000 fc6c 	bl	8007326 <_Bfree>
 8006a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a50:	b9a3      	cbnz	r3, 8006a7c <_dtoa_r+0xa04>
 8006a52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a54:	b992      	cbnz	r2, 8006a7c <_dtoa_r+0xa04>
 8006a56:	9a08      	ldr	r2, [sp, #32]
 8006a58:	b982      	cbnz	r2, 8006a7c <_dtoa_r+0xa04>
 8006a5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a5e:	d029      	beq.n	8006ab4 <_dtoa_r+0xa3c>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dd01      	ble.n	8006a6a <_dtoa_r+0x9f2>
 8006a66:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a6a:	9b07      	ldr	r3, [sp, #28]
 8006a6c:	1c5d      	adds	r5, r3, #1
 8006a6e:	f883 8000 	strb.w	r8, [r3]
 8006a72:	e784      	b.n	800697e <_dtoa_r+0x906>
 8006a74:	4638      	mov	r0, r7
 8006a76:	e7c2      	b.n	80069fe <_dtoa_r+0x986>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e7e3      	b.n	8006a44 <_dtoa_r+0x9cc>
 8006a7c:	9a02      	ldr	r2, [sp, #8]
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	db04      	blt.n	8006a8c <_dtoa_r+0xa14>
 8006a82:	d123      	bne.n	8006acc <_dtoa_r+0xa54>
 8006a84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a86:	bb0a      	cbnz	r2, 8006acc <_dtoa_r+0xa54>
 8006a88:	9a08      	ldr	r2, [sp, #32]
 8006a8a:	b9fa      	cbnz	r2, 8006acc <_dtoa_r+0xa54>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	ddec      	ble.n	8006a6a <_dtoa_r+0x9f2>
 8006a90:	4659      	mov	r1, fp
 8006a92:	2201      	movs	r2, #1
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fe11 	bl	80076bc <__lshift>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4683      	mov	fp, r0
 8006a9e:	f000 fe61 	bl	8007764 <__mcmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	dc03      	bgt.n	8006aae <_dtoa_r+0xa36>
 8006aa6:	d1e0      	bne.n	8006a6a <_dtoa_r+0x9f2>
 8006aa8:	f018 0f01 	tst.w	r8, #1
 8006aac:	d0dd      	beq.n	8006a6a <_dtoa_r+0x9f2>
 8006aae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ab2:	d1d8      	bne.n	8006a66 <_dtoa_r+0x9ee>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	9a07      	ldr	r2, [sp, #28]
 8006ab8:	1c5d      	adds	r5, r3, #1
 8006aba:	2339      	movs	r3, #57	; 0x39
 8006abc:	7013      	strb	r3, [r2, #0]
 8006abe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ac2:	1e6a      	subs	r2, r5, #1
 8006ac4:	2b39      	cmp	r3, #57	; 0x39
 8006ac6:	d04d      	beq.n	8006b64 <_dtoa_r+0xaec>
 8006ac8:	3301      	adds	r3, #1
 8006aca:	e052      	b.n	8006b72 <_dtoa_r+0xafa>
 8006acc:	9a07      	ldr	r2, [sp, #28]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f102 0501 	add.w	r5, r2, #1
 8006ad4:	dd06      	ble.n	8006ae4 <_dtoa_r+0xa6c>
 8006ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ada:	d0eb      	beq.n	8006ab4 <_dtoa_r+0xa3c>
 8006adc:	f108 0801 	add.w	r8, r8, #1
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	e7c4      	b.n	8006a6e <_dtoa_r+0x9f6>
 8006ae4:	9b06      	ldr	r3, [sp, #24]
 8006ae6:	9a04      	ldr	r2, [sp, #16]
 8006ae8:	1aeb      	subs	r3, r5, r3
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006af0:	d021      	beq.n	8006b36 <_dtoa_r+0xabe>
 8006af2:	4659      	mov	r1, fp
 8006af4:	2300      	movs	r3, #0
 8006af6:	220a      	movs	r2, #10
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fc2b 	bl	8007354 <__multadd>
 8006afe:	45b9      	cmp	r9, r7
 8006b00:	4683      	mov	fp, r0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	f04f 020a 	mov.w	r2, #10
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	d105      	bne.n	8006b1c <_dtoa_r+0xaa4>
 8006b10:	f000 fc20 	bl	8007354 <__multadd>
 8006b14:	4681      	mov	r9, r0
 8006b16:	4607      	mov	r7, r0
 8006b18:	9507      	str	r5, [sp, #28]
 8006b1a:	e778      	b.n	8006a0e <_dtoa_r+0x996>
 8006b1c:	f000 fc1a 	bl	8007354 <__multadd>
 8006b20:	4639      	mov	r1, r7
 8006b22:	4681      	mov	r9, r0
 8006b24:	2300      	movs	r3, #0
 8006b26:	220a      	movs	r2, #10
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fc13 	bl	8007354 <__multadd>
 8006b2e:	4607      	mov	r7, r0
 8006b30:	e7f2      	b.n	8006b18 <_dtoa_r+0xaa0>
 8006b32:	f04f 0900 	mov.w	r9, #0
 8006b36:	4659      	mov	r1, fp
 8006b38:	2201      	movs	r2, #1
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 fdbe 	bl	80076bc <__lshift>
 8006b40:	4631      	mov	r1, r6
 8006b42:	4683      	mov	fp, r0
 8006b44:	f000 fe0e 	bl	8007764 <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dcb8      	bgt.n	8006abe <_dtoa_r+0xa46>
 8006b4c:	d102      	bne.n	8006b54 <_dtoa_r+0xadc>
 8006b4e:	f018 0f01 	tst.w	r8, #1
 8006b52:	d1b4      	bne.n	8006abe <_dtoa_r+0xa46>
 8006b54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b58:	1e6a      	subs	r2, r5, #1
 8006b5a:	2b30      	cmp	r3, #48	; 0x30
 8006b5c:	f47f af0f 	bne.w	800697e <_dtoa_r+0x906>
 8006b60:	4615      	mov	r5, r2
 8006b62:	e7f7      	b.n	8006b54 <_dtoa_r+0xadc>
 8006b64:	9b06      	ldr	r3, [sp, #24]
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d105      	bne.n	8006b76 <_dtoa_r+0xafe>
 8006b6a:	2331      	movs	r3, #49	; 0x31
 8006b6c:	9a06      	ldr	r2, [sp, #24]
 8006b6e:	f10a 0a01 	add.w	sl, sl, #1
 8006b72:	7013      	strb	r3, [r2, #0]
 8006b74:	e703      	b.n	800697e <_dtoa_r+0x906>
 8006b76:	4615      	mov	r5, r2
 8006b78:	e7a1      	b.n	8006abe <_dtoa_r+0xa46>
 8006b7a:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <_dtoa_r+0xb60>)
 8006b7c:	f7ff bae1 	b.w	8006142 <_dtoa_r+0xca>
 8006b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f47f aabb 	bne.w	80060fe <_dtoa_r+0x86>
 8006b88:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <_dtoa_r+0xb64>)
 8006b8a:	f7ff bada 	b.w	8006142 <_dtoa_r+0xca>
 8006b8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	f77f ae3f 	ble.w	8006814 <_dtoa_r+0x79c>
 8006b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	e653      	b.n	8006844 <_dtoa_r+0x7cc>
 8006b9c:	9b04      	ldr	r3, [sp, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dc03      	bgt.n	8006baa <_dtoa_r+0xb32>
 8006ba2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	f73f aed5 	bgt.w	8006954 <_dtoa_r+0x8dc>
 8006baa:	9d06      	ldr	r5, [sp, #24]
 8006bac:	4631      	mov	r1, r6
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f7ff f9d4 	bl	8005f5c <quorem>
 8006bb4:	9b06      	ldr	r3, [sp, #24]
 8006bb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006bba:	f805 8b01 	strb.w	r8, [r5], #1
 8006bbe:	9a04      	ldr	r2, [sp, #16]
 8006bc0:	1aeb      	subs	r3, r5, r3
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	ddb5      	ble.n	8006b32 <_dtoa_r+0xaba>
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	2300      	movs	r3, #0
 8006bca:	220a      	movs	r2, #10
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fbc1 	bl	8007354 <__multadd>
 8006bd2:	4683      	mov	fp, r0
 8006bd4:	e7ea      	b.n	8006bac <_dtoa_r+0xb34>
 8006bd6:	bf00      	nop
 8006bd8:	08008e68 	.word	0x08008e68
 8006bdc:	08008ee8 	.word	0x08008ee8

08006be0 <rshift>:
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	6906      	ldr	r6, [r0, #16]
 8006be4:	114b      	asrs	r3, r1, #5
 8006be6:	429e      	cmp	r6, r3
 8006be8:	f100 0414 	add.w	r4, r0, #20
 8006bec:	dd31      	ble.n	8006c52 <rshift+0x72>
 8006bee:	f011 011f 	ands.w	r1, r1, #31
 8006bf2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006bf6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006bfa:	d108      	bne.n	8006c0e <rshift+0x2e>
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	42b2      	cmp	r2, r6
 8006c00:	460b      	mov	r3, r1
 8006c02:	d211      	bcs.n	8006c28 <rshift+0x48>
 8006c04:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c08:	f841 3b04 	str.w	r3, [r1], #4
 8006c0c:	e7f7      	b.n	8006bfe <rshift+0x1e>
 8006c0e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c12:	4623      	mov	r3, r4
 8006c14:	f1c1 0c20 	rsb	ip, r1, #32
 8006c18:	40cd      	lsrs	r5, r1
 8006c1a:	3204      	adds	r2, #4
 8006c1c:	42b2      	cmp	r2, r6
 8006c1e:	4617      	mov	r7, r2
 8006c20:	d30d      	bcc.n	8006c3e <rshift+0x5e>
 8006c22:	601d      	str	r5, [r3, #0]
 8006c24:	b105      	cbz	r5, 8006c28 <rshift+0x48>
 8006c26:	3304      	adds	r3, #4
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	eba3 0204 	sub.w	r2, r3, r4
 8006c2e:	bf08      	it	eq
 8006c30:	2300      	moveq	r3, #0
 8006c32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c36:	6102      	str	r2, [r0, #16]
 8006c38:	bf08      	it	eq
 8006c3a:	6143      	streq	r3, [r0, #20]
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3e:	683f      	ldr	r7, [r7, #0]
 8006c40:	fa07 f70c 	lsl.w	r7, r7, ip
 8006c44:	433d      	orrs	r5, r7
 8006c46:	f843 5b04 	str.w	r5, [r3], #4
 8006c4a:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c4e:	40cd      	lsrs	r5, r1
 8006c50:	e7e4      	b.n	8006c1c <rshift+0x3c>
 8006c52:	4623      	mov	r3, r4
 8006c54:	e7e8      	b.n	8006c28 <rshift+0x48>

08006c56 <__hexdig_fun>:
 8006c56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c5a:	2b09      	cmp	r3, #9
 8006c5c:	d802      	bhi.n	8006c64 <__hexdig_fun+0xe>
 8006c5e:	3820      	subs	r0, #32
 8006c60:	b2c0      	uxtb	r0, r0
 8006c62:	4770      	bx	lr
 8006c64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c68:	2b05      	cmp	r3, #5
 8006c6a:	d801      	bhi.n	8006c70 <__hexdig_fun+0x1a>
 8006c6c:	3847      	subs	r0, #71	; 0x47
 8006c6e:	e7f7      	b.n	8006c60 <__hexdig_fun+0xa>
 8006c70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d801      	bhi.n	8006c7c <__hexdig_fun+0x26>
 8006c78:	3827      	subs	r0, #39	; 0x27
 8006c7a:	e7f1      	b.n	8006c60 <__hexdig_fun+0xa>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	4770      	bx	lr

08006c80 <__gethex>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	b08b      	sub	sp, #44	; 0x2c
 8006c86:	9002      	str	r0, [sp, #8]
 8006c88:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006c8a:	468a      	mov	sl, r1
 8006c8c:	4690      	mov	r8, r2
 8006c8e:	9306      	str	r3, [sp, #24]
 8006c90:	f000 fad1 	bl	8007236 <__localeconv_l>
 8006c94:	6803      	ldr	r3, [r0, #0]
 8006c96:	f04f 0b00 	mov.w	fp, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	f7f9 fa57 	bl	8000150 <strlen>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	9001      	str	r0, [sp, #4]
 8006ca6:	4403      	add	r3, r0
 8006ca8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cac:	9307      	str	r3, [sp, #28]
 8006cae:	f8da 3000 	ldr.w	r3, [sl]
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	461f      	mov	r7, r3
 8006cb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cba:	2830      	cmp	r0, #48	; 0x30
 8006cbc:	d06c      	beq.n	8006d98 <__gethex+0x118>
 8006cbe:	f7ff ffca 	bl	8006c56 <__hexdig_fun>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d16a      	bne.n	8006d9e <__gethex+0x11e>
 8006cc8:	9a01      	ldr	r2, [sp, #4]
 8006cca:	9903      	ldr	r1, [sp, #12]
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f001 f905 	bl	8007edc <strncmp>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d166      	bne.n	8006da4 <__gethex+0x124>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	5cf8      	ldrb	r0, [r7, r3]
 8006cda:	18fe      	adds	r6, r7, r3
 8006cdc:	f7ff ffbb 	bl	8006c56 <__hexdig_fun>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d062      	beq.n	8006daa <__gethex+0x12a>
 8006ce4:	4633      	mov	r3, r6
 8006ce6:	7818      	ldrb	r0, [r3, #0]
 8006ce8:	461f      	mov	r7, r3
 8006cea:	2830      	cmp	r0, #48	; 0x30
 8006cec:	f103 0301 	add.w	r3, r3, #1
 8006cf0:	d0f9      	beq.n	8006ce6 <__gethex+0x66>
 8006cf2:	f7ff ffb0 	bl	8006c56 <__hexdig_fun>
 8006cf6:	fab0 f580 	clz	r5, r0
 8006cfa:	4634      	mov	r4, r6
 8006cfc:	f04f 0b01 	mov.w	fp, #1
 8006d00:	096d      	lsrs	r5, r5, #5
 8006d02:	463a      	mov	r2, r7
 8006d04:	4616      	mov	r6, r2
 8006d06:	7830      	ldrb	r0, [r6, #0]
 8006d08:	3201      	adds	r2, #1
 8006d0a:	f7ff ffa4 	bl	8006c56 <__hexdig_fun>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1f8      	bne.n	8006d04 <__gethex+0x84>
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	9903      	ldr	r1, [sp, #12]
 8006d16:	4630      	mov	r0, r6
 8006d18:	f001 f8e0 	bl	8007edc <strncmp>
 8006d1c:	b950      	cbnz	r0, 8006d34 <__gethex+0xb4>
 8006d1e:	b954      	cbnz	r4, 8006d36 <__gethex+0xb6>
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	18f4      	adds	r4, r6, r3
 8006d24:	4622      	mov	r2, r4
 8006d26:	4616      	mov	r6, r2
 8006d28:	7830      	ldrb	r0, [r6, #0]
 8006d2a:	3201      	adds	r2, #1
 8006d2c:	f7ff ff93 	bl	8006c56 <__hexdig_fun>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1f8      	bne.n	8006d26 <__gethex+0xa6>
 8006d34:	b10c      	cbz	r4, 8006d3a <__gethex+0xba>
 8006d36:	1ba4      	subs	r4, r4, r6
 8006d38:	00a4      	lsls	r4, r4, #2
 8006d3a:	7833      	ldrb	r3, [r6, #0]
 8006d3c:	2b50      	cmp	r3, #80	; 0x50
 8006d3e:	d001      	beq.n	8006d44 <__gethex+0xc4>
 8006d40:	2b70      	cmp	r3, #112	; 0x70
 8006d42:	d140      	bne.n	8006dc6 <__gethex+0x146>
 8006d44:	7873      	ldrb	r3, [r6, #1]
 8006d46:	2b2b      	cmp	r3, #43	; 0x2b
 8006d48:	d031      	beq.n	8006dae <__gethex+0x12e>
 8006d4a:	2b2d      	cmp	r3, #45	; 0x2d
 8006d4c:	d033      	beq.n	8006db6 <__gethex+0x136>
 8006d4e:	f04f 0900 	mov.w	r9, #0
 8006d52:	1c71      	adds	r1, r6, #1
 8006d54:	7808      	ldrb	r0, [r1, #0]
 8006d56:	f7ff ff7e 	bl	8006c56 <__hexdig_fun>
 8006d5a:	1e43      	subs	r3, r0, #1
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b18      	cmp	r3, #24
 8006d60:	d831      	bhi.n	8006dc6 <__gethex+0x146>
 8006d62:	f1a0 0210 	sub.w	r2, r0, #16
 8006d66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d6a:	f7ff ff74 	bl	8006c56 <__hexdig_fun>
 8006d6e:	1e43      	subs	r3, r0, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b18      	cmp	r3, #24
 8006d74:	d922      	bls.n	8006dbc <__gethex+0x13c>
 8006d76:	f1b9 0f00 	cmp.w	r9, #0
 8006d7a:	d000      	beq.n	8006d7e <__gethex+0xfe>
 8006d7c:	4252      	negs	r2, r2
 8006d7e:	4414      	add	r4, r2
 8006d80:	f8ca 1000 	str.w	r1, [sl]
 8006d84:	b30d      	cbz	r5, 8006dca <__gethex+0x14a>
 8006d86:	f1bb 0f00 	cmp.w	fp, #0
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2706      	moveq	r7, #6
 8006d8e:	2700      	movne	r7, #0
 8006d90:	4638      	mov	r0, r7
 8006d92:	b00b      	add	sp, #44	; 0x2c
 8006d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d98:	f10b 0b01 	add.w	fp, fp, #1
 8006d9c:	e78a      	b.n	8006cb4 <__gethex+0x34>
 8006d9e:	2500      	movs	r5, #0
 8006da0:	462c      	mov	r4, r5
 8006da2:	e7ae      	b.n	8006d02 <__gethex+0x82>
 8006da4:	463e      	mov	r6, r7
 8006da6:	2501      	movs	r5, #1
 8006da8:	e7c7      	b.n	8006d3a <__gethex+0xba>
 8006daa:	4604      	mov	r4, r0
 8006dac:	e7fb      	b.n	8006da6 <__gethex+0x126>
 8006dae:	f04f 0900 	mov.w	r9, #0
 8006db2:	1cb1      	adds	r1, r6, #2
 8006db4:	e7ce      	b.n	8006d54 <__gethex+0xd4>
 8006db6:	f04f 0901 	mov.w	r9, #1
 8006dba:	e7fa      	b.n	8006db2 <__gethex+0x132>
 8006dbc:	230a      	movs	r3, #10
 8006dbe:	fb03 0202 	mla	r2, r3, r2, r0
 8006dc2:	3a10      	subs	r2, #16
 8006dc4:	e7cf      	b.n	8006d66 <__gethex+0xe6>
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	e7da      	b.n	8006d80 <__gethex+0x100>
 8006dca:	4629      	mov	r1, r5
 8006dcc:	1bf3      	subs	r3, r6, r7
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	2b07      	cmp	r3, #7
 8006dd2:	dc49      	bgt.n	8006e68 <__gethex+0x1e8>
 8006dd4:	9802      	ldr	r0, [sp, #8]
 8006dd6:	f000 fa72 	bl	80072be <_Balloc>
 8006dda:	f04f 0b00 	mov.w	fp, #0
 8006dde:	4605      	mov	r5, r0
 8006de0:	46da      	mov	sl, fp
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	f100 0914 	add.w	r9, r0, #20
 8006de8:	f1c3 0301 	rsb	r3, r3, #1
 8006dec:	f8cd 9010 	str.w	r9, [sp, #16]
 8006df0:	9308      	str	r3, [sp, #32]
 8006df2:	42b7      	cmp	r7, r6
 8006df4:	d33b      	bcc.n	8006e6e <__gethex+0x1ee>
 8006df6:	9804      	ldr	r0, [sp, #16]
 8006df8:	f840 ab04 	str.w	sl, [r0], #4
 8006dfc:	eba0 0009 	sub.w	r0, r0, r9
 8006e00:	1080      	asrs	r0, r0, #2
 8006e02:	6128      	str	r0, [r5, #16]
 8006e04:	0147      	lsls	r7, r0, #5
 8006e06:	4650      	mov	r0, sl
 8006e08:	f000 fb1d 	bl	8007446 <__hi0bits>
 8006e0c:	f8d8 6000 	ldr.w	r6, [r8]
 8006e10:	1a3f      	subs	r7, r7, r0
 8006e12:	42b7      	cmp	r7, r6
 8006e14:	dd64      	ble.n	8006ee0 <__gethex+0x260>
 8006e16:	1bbf      	subs	r7, r7, r6
 8006e18:	4639      	mov	r1, r7
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 fe27 	bl	8007a6e <__any_on>
 8006e20:	4682      	mov	sl, r0
 8006e22:	b178      	cbz	r0, 8006e44 <__gethex+0x1c4>
 8006e24:	f04f 0a01 	mov.w	sl, #1
 8006e28:	1e7b      	subs	r3, r7, #1
 8006e2a:	1159      	asrs	r1, r3, #5
 8006e2c:	f003 021f 	and.w	r2, r3, #31
 8006e30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e34:	fa0a f202 	lsl.w	r2, sl, r2
 8006e38:	420a      	tst	r2, r1
 8006e3a:	d003      	beq.n	8006e44 <__gethex+0x1c4>
 8006e3c:	4553      	cmp	r3, sl
 8006e3e:	dc46      	bgt.n	8006ece <__gethex+0x24e>
 8006e40:	f04f 0a02 	mov.w	sl, #2
 8006e44:	4639      	mov	r1, r7
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff feca 	bl	8006be0 <rshift>
 8006e4c:	443c      	add	r4, r7
 8006e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	da52      	bge.n	8006efc <__gethex+0x27c>
 8006e56:	4629      	mov	r1, r5
 8006e58:	9802      	ldr	r0, [sp, #8]
 8006e5a:	f000 fa64 	bl	8007326 <_Bfree>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e62:	27a3      	movs	r7, #163	; 0xa3
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e793      	b.n	8006d90 <__gethex+0x110>
 8006e68:	3101      	adds	r1, #1
 8006e6a:	105b      	asrs	r3, r3, #1
 8006e6c:	e7b0      	b.n	8006dd0 <__gethex+0x150>
 8006e6e:	1e73      	subs	r3, r6, #1
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	9a07      	ldr	r2, [sp, #28]
 8006e74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d018      	beq.n	8006eae <__gethex+0x22e>
 8006e7c:	f1bb 0f20 	cmp.w	fp, #32
 8006e80:	d107      	bne.n	8006e92 <__gethex+0x212>
 8006e82:	9b04      	ldr	r3, [sp, #16]
 8006e84:	f8c3 a000 	str.w	sl, [r3]
 8006e88:	f04f 0a00 	mov.w	sl, #0
 8006e8c:	46d3      	mov	fp, sl
 8006e8e:	3304      	adds	r3, #4
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e96:	f7ff fede 	bl	8006c56 <__hexdig_fun>
 8006e9a:	f000 000f 	and.w	r0, r0, #15
 8006e9e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ea2:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ea6:	f10b 0b04 	add.w	fp, fp, #4
 8006eaa:	9b05      	ldr	r3, [sp, #20]
 8006eac:	e00d      	b.n	8006eca <__gethex+0x24a>
 8006eae:	9b05      	ldr	r3, [sp, #20]
 8006eb0:	9a08      	ldr	r2, [sp, #32]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	42bb      	cmp	r3, r7
 8006eb6:	d3e1      	bcc.n	8006e7c <__gethex+0x1fc>
 8006eb8:	4618      	mov	r0, r3
 8006eba:	9a01      	ldr	r2, [sp, #4]
 8006ebc:	9903      	ldr	r1, [sp, #12]
 8006ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec0:	f001 f80c 	bl	8007edc <strncmp>
 8006ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d1d8      	bne.n	8006e7c <__gethex+0x1fc>
 8006eca:	461e      	mov	r6, r3
 8006ecc:	e791      	b.n	8006df2 <__gethex+0x172>
 8006ece:	1eb9      	subs	r1, r7, #2
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 fdcc 	bl	8007a6e <__any_on>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0b2      	beq.n	8006e40 <__gethex+0x1c0>
 8006eda:	f04f 0a03 	mov.w	sl, #3
 8006ede:	e7b1      	b.n	8006e44 <__gethex+0x1c4>
 8006ee0:	da09      	bge.n	8006ef6 <__gethex+0x276>
 8006ee2:	1bf7      	subs	r7, r6, r7
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	9802      	ldr	r0, [sp, #8]
 8006eea:	f000 fbe7 	bl	80076bc <__lshift>
 8006eee:	4605      	mov	r5, r0
 8006ef0:	1be4      	subs	r4, r4, r7
 8006ef2:	f100 0914 	add.w	r9, r0, #20
 8006ef6:	f04f 0a00 	mov.w	sl, #0
 8006efa:	e7a8      	b.n	8006e4e <__gethex+0x1ce>
 8006efc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f00:	42a0      	cmp	r0, r4
 8006f02:	dd6b      	ble.n	8006fdc <__gethex+0x35c>
 8006f04:	1b04      	subs	r4, r0, r4
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	dc2e      	bgt.n	8006f68 <__gethex+0x2e8>
 8006f0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d022      	beq.n	8006f58 <__gethex+0x2d8>
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d024      	beq.n	8006f60 <__gethex+0x2e0>
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d115      	bne.n	8006f46 <__gethex+0x2c6>
 8006f1a:	42a6      	cmp	r6, r4
 8006f1c:	d113      	bne.n	8006f46 <__gethex+0x2c6>
 8006f1e:	2e01      	cmp	r6, #1
 8006f20:	dc0b      	bgt.n	8006f3a <__gethex+0x2ba>
 8006f22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f26:	9a06      	ldr	r2, [sp, #24]
 8006f28:	2762      	movs	r7, #98	; 0x62
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	612b      	str	r3, [r5, #16]
 8006f30:	f8c9 3000 	str.w	r3, [r9]
 8006f34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f36:	601d      	str	r5, [r3, #0]
 8006f38:	e72a      	b.n	8006d90 <__gethex+0x110>
 8006f3a:	1e71      	subs	r1, r6, #1
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 fd96 	bl	8007a6e <__any_on>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d1ed      	bne.n	8006f22 <__gethex+0x2a2>
 8006f46:	4629      	mov	r1, r5
 8006f48:	9802      	ldr	r0, [sp, #8]
 8006f4a:	f000 f9ec 	bl	8007326 <_Bfree>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f52:	2750      	movs	r7, #80	; 0x50
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e71b      	b.n	8006d90 <__gethex+0x110>
 8006f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0e1      	beq.n	8006f22 <__gethex+0x2a2>
 8006f5e:	e7f2      	b.n	8006f46 <__gethex+0x2c6>
 8006f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1dd      	bne.n	8006f22 <__gethex+0x2a2>
 8006f66:	e7ee      	b.n	8006f46 <__gethex+0x2c6>
 8006f68:	1e67      	subs	r7, r4, #1
 8006f6a:	f1ba 0f00 	cmp.w	sl, #0
 8006f6e:	d132      	bne.n	8006fd6 <__gethex+0x356>
 8006f70:	b127      	cbz	r7, 8006f7c <__gethex+0x2fc>
 8006f72:	4639      	mov	r1, r7
 8006f74:	4628      	mov	r0, r5
 8006f76:	f000 fd7a 	bl	8007a6e <__any_on>
 8006f7a:	4682      	mov	sl, r0
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	117a      	asrs	r2, r7, #5
 8006f80:	f007 071f 	and.w	r7, r7, #31
 8006f84:	fa03 f707 	lsl.w	r7, r3, r7
 8006f88:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	421f      	tst	r7, r3
 8006f90:	f04f 0702 	mov.w	r7, #2
 8006f94:	4628      	mov	r0, r5
 8006f96:	bf18      	it	ne
 8006f98:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f9c:	1b36      	subs	r6, r6, r4
 8006f9e:	f7ff fe1f 	bl	8006be0 <rshift>
 8006fa2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006fa6:	f1ba 0f00 	cmp.w	sl, #0
 8006faa:	d048      	beq.n	800703e <__gethex+0x3be>
 8006fac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d015      	beq.n	8006fe0 <__gethex+0x360>
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d017      	beq.n	8006fe8 <__gethex+0x368>
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d109      	bne.n	8006fd0 <__gethex+0x350>
 8006fbc:	f01a 0f02 	tst.w	sl, #2
 8006fc0:	d006      	beq.n	8006fd0 <__gethex+0x350>
 8006fc2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fc6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006fca:	f01a 0f01 	tst.w	sl, #1
 8006fce:	d10e      	bne.n	8006fee <__gethex+0x36e>
 8006fd0:	f047 0710 	orr.w	r7, r7, #16
 8006fd4:	e033      	b.n	800703e <__gethex+0x3be>
 8006fd6:	f04f 0a01 	mov.w	sl, #1
 8006fda:	e7cf      	b.n	8006f7c <__gethex+0x2fc>
 8006fdc:	2701      	movs	r7, #1
 8006fde:	e7e2      	b.n	8006fa6 <__gethex+0x326>
 8006fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe2:	f1c3 0301 	rsb	r3, r3, #1
 8006fe6:	9315      	str	r3, [sp, #84]	; 0x54
 8006fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <__gethex+0x350>
 8006fee:	f04f 0c00 	mov.w	ip, #0
 8006ff2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006ff6:	f105 0314 	add.w	r3, r5, #20
 8006ffa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006ffe:	eb03 010a 	add.w	r1, r3, sl
 8007002:	4618      	mov	r0, r3
 8007004:	f853 2b04 	ldr.w	r2, [r3], #4
 8007008:	f1b2 3fff 	cmp.w	r2, #4294967295
 800700c:	d01c      	beq.n	8007048 <__gethex+0x3c8>
 800700e:	3201      	adds	r2, #1
 8007010:	6002      	str	r2, [r0, #0]
 8007012:	2f02      	cmp	r7, #2
 8007014:	f105 0314 	add.w	r3, r5, #20
 8007018:	d138      	bne.n	800708c <__gethex+0x40c>
 800701a:	f8d8 2000 	ldr.w	r2, [r8]
 800701e:	3a01      	subs	r2, #1
 8007020:	42b2      	cmp	r2, r6
 8007022:	d10a      	bne.n	800703a <__gethex+0x3ba>
 8007024:	2201      	movs	r2, #1
 8007026:	1171      	asrs	r1, r6, #5
 8007028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800702c:	f006 061f 	and.w	r6, r6, #31
 8007030:	fa02 f606 	lsl.w	r6, r2, r6
 8007034:	421e      	tst	r6, r3
 8007036:	bf18      	it	ne
 8007038:	4617      	movne	r7, r2
 800703a:	f047 0720 	orr.w	r7, r7, #32
 800703e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007040:	601d      	str	r5, [r3, #0]
 8007042:	9b06      	ldr	r3, [sp, #24]
 8007044:	601c      	str	r4, [r3, #0]
 8007046:	e6a3      	b.n	8006d90 <__gethex+0x110>
 8007048:	4299      	cmp	r1, r3
 800704a:	f843 cc04 	str.w	ip, [r3, #-4]
 800704e:	d8d8      	bhi.n	8007002 <__gethex+0x382>
 8007050:	68ab      	ldr	r3, [r5, #8]
 8007052:	4599      	cmp	r9, r3
 8007054:	db12      	blt.n	800707c <__gethex+0x3fc>
 8007056:	6869      	ldr	r1, [r5, #4]
 8007058:	9802      	ldr	r0, [sp, #8]
 800705a:	3101      	adds	r1, #1
 800705c:	f000 f92f 	bl	80072be <_Balloc>
 8007060:	4683      	mov	fp, r0
 8007062:	692a      	ldr	r2, [r5, #16]
 8007064:	f105 010c 	add.w	r1, r5, #12
 8007068:	3202      	adds	r2, #2
 800706a:	0092      	lsls	r2, r2, #2
 800706c:	300c      	adds	r0, #12
 800706e:	f000 f91b 	bl	80072a8 <memcpy>
 8007072:	4629      	mov	r1, r5
 8007074:	9802      	ldr	r0, [sp, #8]
 8007076:	f000 f956 	bl	8007326 <_Bfree>
 800707a:	465d      	mov	r5, fp
 800707c:	692b      	ldr	r3, [r5, #16]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	612a      	str	r2, [r5, #16]
 8007082:	2201      	movs	r2, #1
 8007084:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007088:	615a      	str	r2, [r3, #20]
 800708a:	e7c2      	b.n	8007012 <__gethex+0x392>
 800708c:	692a      	ldr	r2, [r5, #16]
 800708e:	454a      	cmp	r2, r9
 8007090:	dd0b      	ble.n	80070aa <__gethex+0x42a>
 8007092:	2101      	movs	r1, #1
 8007094:	4628      	mov	r0, r5
 8007096:	f7ff fda3 	bl	8006be0 <rshift>
 800709a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800709e:	3401      	adds	r4, #1
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	f6ff aed8 	blt.w	8006e56 <__gethex+0x1d6>
 80070a6:	2701      	movs	r7, #1
 80070a8:	e7c7      	b.n	800703a <__gethex+0x3ba>
 80070aa:	f016 061f 	ands.w	r6, r6, #31
 80070ae:	d0fa      	beq.n	80070a6 <__gethex+0x426>
 80070b0:	449a      	add	sl, r3
 80070b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80070b6:	f000 f9c6 	bl	8007446 <__hi0bits>
 80070ba:	f1c6 0620 	rsb	r6, r6, #32
 80070be:	42b0      	cmp	r0, r6
 80070c0:	dbe7      	blt.n	8007092 <__gethex+0x412>
 80070c2:	e7f0      	b.n	80070a6 <__gethex+0x426>

080070c4 <L_shift>:
 80070c4:	f1c2 0208 	rsb	r2, r2, #8
 80070c8:	0092      	lsls	r2, r2, #2
 80070ca:	b570      	push	{r4, r5, r6, lr}
 80070cc:	f1c2 0620 	rsb	r6, r2, #32
 80070d0:	6843      	ldr	r3, [r0, #4]
 80070d2:	6804      	ldr	r4, [r0, #0]
 80070d4:	fa03 f506 	lsl.w	r5, r3, r6
 80070d8:	432c      	orrs	r4, r5
 80070da:	40d3      	lsrs	r3, r2
 80070dc:	6004      	str	r4, [r0, #0]
 80070de:	f840 3f04 	str.w	r3, [r0, #4]!
 80070e2:	4288      	cmp	r0, r1
 80070e4:	d3f4      	bcc.n	80070d0 <L_shift+0xc>
 80070e6:	bd70      	pop	{r4, r5, r6, pc}

080070e8 <__match>:
 80070e8:	b530      	push	{r4, r5, lr}
 80070ea:	6803      	ldr	r3, [r0, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f2:	b914      	cbnz	r4, 80070fa <__match+0x12>
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	2001      	movs	r0, #1
 80070f8:	bd30      	pop	{r4, r5, pc}
 80070fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007102:	2d19      	cmp	r5, #25
 8007104:	bf98      	it	ls
 8007106:	3220      	addls	r2, #32
 8007108:	42a2      	cmp	r2, r4
 800710a:	d0f0      	beq.n	80070ee <__match+0x6>
 800710c:	2000      	movs	r0, #0
 800710e:	e7f3      	b.n	80070f8 <__match+0x10>

08007110 <__hexnan>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	2500      	movs	r5, #0
 8007116:	680b      	ldr	r3, [r1, #0]
 8007118:	4682      	mov	sl, r0
 800711a:	115f      	asrs	r7, r3, #5
 800711c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007120:	f013 031f 	ands.w	r3, r3, #31
 8007124:	bf18      	it	ne
 8007126:	3704      	addne	r7, #4
 8007128:	1f3e      	subs	r6, r7, #4
 800712a:	4690      	mov	r8, r2
 800712c:	46b1      	mov	r9, r6
 800712e:	4634      	mov	r4, r6
 8007130:	46ab      	mov	fp, r5
 8007132:	b087      	sub	sp, #28
 8007134:	6801      	ldr	r1, [r0, #0]
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	f847 5c04 	str.w	r5, [r7, #-4]
 800713c:	9502      	str	r5, [sp, #8]
 800713e:	784a      	ldrb	r2, [r1, #1]
 8007140:	1c4b      	adds	r3, r1, #1
 8007142:	9303      	str	r3, [sp, #12]
 8007144:	b342      	cbz	r2, 8007198 <__hexnan+0x88>
 8007146:	4610      	mov	r0, r2
 8007148:	9105      	str	r1, [sp, #20]
 800714a:	9204      	str	r2, [sp, #16]
 800714c:	f7ff fd83 	bl	8006c56 <__hexdig_fun>
 8007150:	2800      	cmp	r0, #0
 8007152:	d143      	bne.n	80071dc <__hexnan+0xcc>
 8007154:	9a04      	ldr	r2, [sp, #16]
 8007156:	9905      	ldr	r1, [sp, #20]
 8007158:	2a20      	cmp	r2, #32
 800715a:	d818      	bhi.n	800718e <__hexnan+0x7e>
 800715c:	9b02      	ldr	r3, [sp, #8]
 800715e:	459b      	cmp	fp, r3
 8007160:	dd13      	ble.n	800718a <__hexnan+0x7a>
 8007162:	454c      	cmp	r4, r9
 8007164:	d206      	bcs.n	8007174 <__hexnan+0x64>
 8007166:	2d07      	cmp	r5, #7
 8007168:	dc04      	bgt.n	8007174 <__hexnan+0x64>
 800716a:	462a      	mov	r2, r5
 800716c:	4649      	mov	r1, r9
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff ffa8 	bl	80070c4 <L_shift>
 8007174:	4544      	cmp	r4, r8
 8007176:	d944      	bls.n	8007202 <__hexnan+0xf2>
 8007178:	2300      	movs	r3, #0
 800717a:	f1a4 0904 	sub.w	r9, r4, #4
 800717e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007182:	461d      	mov	r5, r3
 8007184:	464c      	mov	r4, r9
 8007186:	f8cd b008 	str.w	fp, [sp, #8]
 800718a:	9903      	ldr	r1, [sp, #12]
 800718c:	e7d7      	b.n	800713e <__hexnan+0x2e>
 800718e:	2a29      	cmp	r2, #41	; 0x29
 8007190:	d14a      	bne.n	8007228 <__hexnan+0x118>
 8007192:	3102      	adds	r1, #2
 8007194:	f8ca 1000 	str.w	r1, [sl]
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	d044      	beq.n	8007228 <__hexnan+0x118>
 800719e:	454c      	cmp	r4, r9
 80071a0:	d206      	bcs.n	80071b0 <__hexnan+0xa0>
 80071a2:	2d07      	cmp	r5, #7
 80071a4:	dc04      	bgt.n	80071b0 <__hexnan+0xa0>
 80071a6:	462a      	mov	r2, r5
 80071a8:	4649      	mov	r1, r9
 80071aa:	4620      	mov	r0, r4
 80071ac:	f7ff ff8a 	bl	80070c4 <L_shift>
 80071b0:	4544      	cmp	r4, r8
 80071b2:	d928      	bls.n	8007206 <__hexnan+0xf6>
 80071b4:	4643      	mov	r3, r8
 80071b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80071ba:	42a6      	cmp	r6, r4
 80071bc:	f843 2b04 	str.w	r2, [r3], #4
 80071c0:	d2f9      	bcs.n	80071b6 <__hexnan+0xa6>
 80071c2:	2200      	movs	r2, #0
 80071c4:	f843 2b04 	str.w	r2, [r3], #4
 80071c8:	429e      	cmp	r6, r3
 80071ca:	d2fb      	bcs.n	80071c4 <__hexnan+0xb4>
 80071cc:	6833      	ldr	r3, [r6, #0]
 80071ce:	b91b      	cbnz	r3, 80071d8 <__hexnan+0xc8>
 80071d0:	4546      	cmp	r6, r8
 80071d2:	d127      	bne.n	8007224 <__hexnan+0x114>
 80071d4:	2301      	movs	r3, #1
 80071d6:	6033      	str	r3, [r6, #0]
 80071d8:	2005      	movs	r0, #5
 80071da:	e026      	b.n	800722a <__hexnan+0x11a>
 80071dc:	3501      	adds	r5, #1
 80071de:	2d08      	cmp	r5, #8
 80071e0:	f10b 0b01 	add.w	fp, fp, #1
 80071e4:	dd06      	ble.n	80071f4 <__hexnan+0xe4>
 80071e6:	4544      	cmp	r4, r8
 80071e8:	d9cf      	bls.n	800718a <__hexnan+0x7a>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2501      	movs	r5, #1
 80071ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80071f2:	3c04      	subs	r4, #4
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	f000 000f 	and.w	r0, r0, #15
 80071fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80071fe:	6020      	str	r0, [r4, #0]
 8007200:	e7c3      	b.n	800718a <__hexnan+0x7a>
 8007202:	2508      	movs	r5, #8
 8007204:	e7c1      	b.n	800718a <__hexnan+0x7a>
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0df      	beq.n	80071cc <__hexnan+0xbc>
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	f1c3 0320 	rsb	r3, r3, #32
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800721c:	401a      	ands	r2, r3
 800721e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007222:	e7d3      	b.n	80071cc <__hexnan+0xbc>
 8007224:	3e04      	subs	r6, #4
 8007226:	e7d1      	b.n	80071cc <__hexnan+0xbc>
 8007228:	2004      	movs	r0, #4
 800722a:	b007      	add	sp, #28
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007230 <__locale_ctype_ptr_l>:
 8007230:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007234:	4770      	bx	lr

08007236 <__localeconv_l>:
 8007236:	30f0      	adds	r0, #240	; 0xf0
 8007238:	4770      	bx	lr
	...

0800723c <_localeconv_r>:
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <_localeconv_r+0x14>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a18      	ldr	r0, [r3, #32]
 8007242:	4b04      	ldr	r3, [pc, #16]	; (8007254 <_localeconv_r+0x18>)
 8007244:	2800      	cmp	r0, #0
 8007246:	bf08      	it	eq
 8007248:	4618      	moveq	r0, r3
 800724a:	30f0      	adds	r0, #240	; 0xf0
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	200000a4 	.word	0x200000a4
 8007254:	20000108 	.word	0x20000108

08007258 <malloc>:
 8007258:	4b02      	ldr	r3, [pc, #8]	; (8007264 <malloc+0xc>)
 800725a:	4601      	mov	r1, r0
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	f000 bc81 	b.w	8007b64 <_malloc_r>
 8007262:	bf00      	nop
 8007264:	200000a4 	.word	0x200000a4

08007268 <__ascii_mbtowc>:
 8007268:	b082      	sub	sp, #8
 800726a:	b901      	cbnz	r1, 800726e <__ascii_mbtowc+0x6>
 800726c:	a901      	add	r1, sp, #4
 800726e:	b142      	cbz	r2, 8007282 <__ascii_mbtowc+0x1a>
 8007270:	b14b      	cbz	r3, 8007286 <__ascii_mbtowc+0x1e>
 8007272:	7813      	ldrb	r3, [r2, #0]
 8007274:	600b      	str	r3, [r1, #0]
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	1c10      	adds	r0, r2, #0
 800727a:	bf18      	it	ne
 800727c:	2001      	movne	r0, #1
 800727e:	b002      	add	sp, #8
 8007280:	4770      	bx	lr
 8007282:	4610      	mov	r0, r2
 8007284:	e7fb      	b.n	800727e <__ascii_mbtowc+0x16>
 8007286:	f06f 0001 	mvn.w	r0, #1
 800728a:	e7f8      	b.n	800727e <__ascii_mbtowc+0x16>

0800728c <memchr>:
 800728c:	b510      	push	{r4, lr}
 800728e:	b2c9      	uxtb	r1, r1
 8007290:	4402      	add	r2, r0
 8007292:	4290      	cmp	r0, r2
 8007294:	4603      	mov	r3, r0
 8007296:	d101      	bne.n	800729c <memchr+0x10>
 8007298:	2300      	movs	r3, #0
 800729a:	e003      	b.n	80072a4 <memchr+0x18>
 800729c:	781c      	ldrb	r4, [r3, #0]
 800729e:	3001      	adds	r0, #1
 80072a0:	428c      	cmp	r4, r1
 80072a2:	d1f6      	bne.n	8007292 <memchr+0x6>
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd10      	pop	{r4, pc}

080072a8 <memcpy>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	1e43      	subs	r3, r0, #1
 80072ac:	440a      	add	r2, r1
 80072ae:	4291      	cmp	r1, r2
 80072b0:	d100      	bne.n	80072b4 <memcpy+0xc>
 80072b2:	bd10      	pop	{r4, pc}
 80072b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072bc:	e7f7      	b.n	80072ae <memcpy+0x6>

080072be <_Balloc>:
 80072be:	b570      	push	{r4, r5, r6, lr}
 80072c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072c2:	4604      	mov	r4, r0
 80072c4:	460e      	mov	r6, r1
 80072c6:	b93d      	cbnz	r5, 80072d8 <_Balloc+0x1a>
 80072c8:	2010      	movs	r0, #16
 80072ca:	f7ff ffc5 	bl	8007258 <malloc>
 80072ce:	6260      	str	r0, [r4, #36]	; 0x24
 80072d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072d4:	6005      	str	r5, [r0, #0]
 80072d6:	60c5      	str	r5, [r0, #12]
 80072d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80072da:	68eb      	ldr	r3, [r5, #12]
 80072dc:	b183      	cbz	r3, 8007300 <_Balloc+0x42>
 80072de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072e6:	b9b8      	cbnz	r0, 8007318 <_Balloc+0x5a>
 80072e8:	2101      	movs	r1, #1
 80072ea:	fa01 f506 	lsl.w	r5, r1, r6
 80072ee:	1d6a      	adds	r2, r5, #5
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fbdc 	bl	8007ab0 <_calloc_r>
 80072f8:	b160      	cbz	r0, 8007314 <_Balloc+0x56>
 80072fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80072fe:	e00e      	b.n	800731e <_Balloc+0x60>
 8007300:	2221      	movs	r2, #33	; 0x21
 8007302:	2104      	movs	r1, #4
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fbd3 	bl	8007ab0 <_calloc_r>
 800730a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730c:	60e8      	str	r0, [r5, #12]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e4      	bne.n	80072de <_Balloc+0x20>
 8007314:	2000      	movs	r0, #0
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	6802      	ldr	r2, [r0, #0]
 800731a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800731e:	2300      	movs	r3, #0
 8007320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007324:	e7f7      	b.n	8007316 <_Balloc+0x58>

08007326 <_Bfree>:
 8007326:	b570      	push	{r4, r5, r6, lr}
 8007328:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800732a:	4606      	mov	r6, r0
 800732c:	460d      	mov	r5, r1
 800732e:	b93c      	cbnz	r4, 8007340 <_Bfree+0x1a>
 8007330:	2010      	movs	r0, #16
 8007332:	f7ff ff91 	bl	8007258 <malloc>
 8007336:	6270      	str	r0, [r6, #36]	; 0x24
 8007338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800733c:	6004      	str	r4, [r0, #0]
 800733e:	60c4      	str	r4, [r0, #12]
 8007340:	b13d      	cbz	r5, 8007352 <_Bfree+0x2c>
 8007342:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007344:	686a      	ldr	r2, [r5, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800734c:	6029      	str	r1, [r5, #0]
 800734e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007352:	bd70      	pop	{r4, r5, r6, pc}

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	461f      	mov	r7, r3
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	2300      	movs	r3, #0
 8007360:	690d      	ldr	r5, [r1, #16]
 8007362:	f101 0c14 	add.w	ip, r1, #20
 8007366:	f8dc 0000 	ldr.w	r0, [ip]
 800736a:	3301      	adds	r3, #1
 800736c:	b281      	uxth	r1, r0
 800736e:	fb02 7101 	mla	r1, r2, r1, r7
 8007372:	0c00      	lsrs	r0, r0, #16
 8007374:	0c0f      	lsrs	r7, r1, #16
 8007376:	fb02 7000 	mla	r0, r2, r0, r7
 800737a:	b289      	uxth	r1, r1
 800737c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007380:	429d      	cmp	r5, r3
 8007382:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007386:	f84c 1b04 	str.w	r1, [ip], #4
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b1d7      	cbz	r7, 80073c4 <__multadd+0x70>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc12      	bgt.n	80073ba <__multadd+0x66>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4630      	mov	r0, r6
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff90 	bl	80072be <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	f104 010c 	add.w	r1, r4, #12
 80073a6:	3202      	adds	r2, #2
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	300c      	adds	r0, #12
 80073ac:	f7ff ff7c 	bl	80072a8 <memcpy>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ffb7 	bl	8007326 <_Bfree>
 80073b8:	4644      	mov	r4, r8
 80073ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073be:	3501      	adds	r5, #1
 80073c0:	615f      	str	r7, [r3, #20]
 80073c2:	6125      	str	r5, [r4, #16]
 80073c4:	4620      	mov	r0, r4
 80073c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ca <__s2b>:
 80073ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ce:	4615      	mov	r5, r2
 80073d0:	2209      	movs	r2, #9
 80073d2:	461f      	mov	r7, r3
 80073d4:	3308      	adds	r3, #8
 80073d6:	460c      	mov	r4, r1
 80073d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073dc:	4606      	mov	r6, r0
 80073de:	2201      	movs	r2, #1
 80073e0:	2100      	movs	r1, #0
 80073e2:	429a      	cmp	r2, r3
 80073e4:	db20      	blt.n	8007428 <__s2b+0x5e>
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ff69 	bl	80072be <_Balloc>
 80073ec:	9b08      	ldr	r3, [sp, #32]
 80073ee:	2d09      	cmp	r5, #9
 80073f0:	6143      	str	r3, [r0, #20]
 80073f2:	f04f 0301 	mov.w	r3, #1
 80073f6:	6103      	str	r3, [r0, #16]
 80073f8:	dd19      	ble.n	800742e <__s2b+0x64>
 80073fa:	f104 0809 	add.w	r8, r4, #9
 80073fe:	46c1      	mov	r9, r8
 8007400:	442c      	add	r4, r5
 8007402:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007406:	4601      	mov	r1, r0
 8007408:	3b30      	subs	r3, #48	; 0x30
 800740a:	220a      	movs	r2, #10
 800740c:	4630      	mov	r0, r6
 800740e:	f7ff ffa1 	bl	8007354 <__multadd>
 8007412:	45a1      	cmp	r9, r4
 8007414:	d1f5      	bne.n	8007402 <__s2b+0x38>
 8007416:	eb08 0405 	add.w	r4, r8, r5
 800741a:	3c08      	subs	r4, #8
 800741c:	1b2d      	subs	r5, r5, r4
 800741e:	1963      	adds	r3, r4, r5
 8007420:	42bb      	cmp	r3, r7
 8007422:	db07      	blt.n	8007434 <__s2b+0x6a>
 8007424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007428:	0052      	lsls	r2, r2, #1
 800742a:	3101      	adds	r1, #1
 800742c:	e7d9      	b.n	80073e2 <__s2b+0x18>
 800742e:	340a      	adds	r4, #10
 8007430:	2509      	movs	r5, #9
 8007432:	e7f3      	b.n	800741c <__s2b+0x52>
 8007434:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007438:	4601      	mov	r1, r0
 800743a:	3b30      	subs	r3, #48	; 0x30
 800743c:	220a      	movs	r2, #10
 800743e:	4630      	mov	r0, r6
 8007440:	f7ff ff88 	bl	8007354 <__multadd>
 8007444:	e7eb      	b.n	800741e <__s2b+0x54>

08007446 <__hi0bits>:
 8007446:	0c02      	lsrs	r2, r0, #16
 8007448:	0412      	lsls	r2, r2, #16
 800744a:	4603      	mov	r3, r0
 800744c:	b9b2      	cbnz	r2, 800747c <__hi0bits+0x36>
 800744e:	0403      	lsls	r3, r0, #16
 8007450:	2010      	movs	r0, #16
 8007452:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007456:	bf04      	itt	eq
 8007458:	021b      	lsleq	r3, r3, #8
 800745a:	3008      	addeq	r0, #8
 800745c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007460:	bf04      	itt	eq
 8007462:	011b      	lsleq	r3, r3, #4
 8007464:	3004      	addeq	r0, #4
 8007466:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800746a:	bf04      	itt	eq
 800746c:	009b      	lsleq	r3, r3, #2
 800746e:	3002      	addeq	r0, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	db06      	blt.n	8007482 <__hi0bits+0x3c>
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	d503      	bpl.n	8007480 <__hi0bits+0x3a>
 8007478:	3001      	adds	r0, #1
 800747a:	4770      	bx	lr
 800747c:	2000      	movs	r0, #0
 800747e:	e7e8      	b.n	8007452 <__hi0bits+0xc>
 8007480:	2020      	movs	r0, #32
 8007482:	4770      	bx	lr

08007484 <__lo0bits>:
 8007484:	6803      	ldr	r3, [r0, #0]
 8007486:	4601      	mov	r1, r0
 8007488:	f013 0207 	ands.w	r2, r3, #7
 800748c:	d00b      	beq.n	80074a6 <__lo0bits+0x22>
 800748e:	07da      	lsls	r2, r3, #31
 8007490:	d423      	bmi.n	80074da <__lo0bits+0x56>
 8007492:	0798      	lsls	r0, r3, #30
 8007494:	bf49      	itett	mi
 8007496:	085b      	lsrmi	r3, r3, #1
 8007498:	089b      	lsrpl	r3, r3, #2
 800749a:	2001      	movmi	r0, #1
 800749c:	600b      	strmi	r3, [r1, #0]
 800749e:	bf5c      	itt	pl
 80074a0:	600b      	strpl	r3, [r1, #0]
 80074a2:	2002      	movpl	r0, #2
 80074a4:	4770      	bx	lr
 80074a6:	b298      	uxth	r0, r3
 80074a8:	b9a8      	cbnz	r0, 80074d6 <__lo0bits+0x52>
 80074aa:	2010      	movs	r0, #16
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074b2:	bf04      	itt	eq
 80074b4:	0a1b      	lsreq	r3, r3, #8
 80074b6:	3008      	addeq	r0, #8
 80074b8:	071a      	lsls	r2, r3, #28
 80074ba:	bf04      	itt	eq
 80074bc:	091b      	lsreq	r3, r3, #4
 80074be:	3004      	addeq	r0, #4
 80074c0:	079a      	lsls	r2, r3, #30
 80074c2:	bf04      	itt	eq
 80074c4:	089b      	lsreq	r3, r3, #2
 80074c6:	3002      	addeq	r0, #2
 80074c8:	07da      	lsls	r2, r3, #31
 80074ca:	d402      	bmi.n	80074d2 <__lo0bits+0x4e>
 80074cc:	085b      	lsrs	r3, r3, #1
 80074ce:	d006      	beq.n	80074de <__lo0bits+0x5a>
 80074d0:	3001      	adds	r0, #1
 80074d2:	600b      	str	r3, [r1, #0]
 80074d4:	4770      	bx	lr
 80074d6:	4610      	mov	r0, r2
 80074d8:	e7e9      	b.n	80074ae <__lo0bits+0x2a>
 80074da:	2000      	movs	r0, #0
 80074dc:	4770      	bx	lr
 80074de:	2020      	movs	r0, #32
 80074e0:	4770      	bx	lr

080074e2 <__i2b>:
 80074e2:	b510      	push	{r4, lr}
 80074e4:	460c      	mov	r4, r1
 80074e6:	2101      	movs	r1, #1
 80074e8:	f7ff fee9 	bl	80072be <_Balloc>
 80074ec:	2201      	movs	r2, #1
 80074ee:	6144      	str	r4, [r0, #20]
 80074f0:	6102      	str	r2, [r0, #16]
 80074f2:	bd10      	pop	{r4, pc}

080074f4 <__multiply>:
 80074f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	4614      	mov	r4, r2
 80074fa:	690a      	ldr	r2, [r1, #16]
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	4688      	mov	r8, r1
 8007500:	429a      	cmp	r2, r3
 8007502:	bfbe      	ittt	lt
 8007504:	460b      	movlt	r3, r1
 8007506:	46a0      	movlt	r8, r4
 8007508:	461c      	movlt	r4, r3
 800750a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800750e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007516:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800751a:	eb07 0609 	add.w	r6, r7, r9
 800751e:	42b3      	cmp	r3, r6
 8007520:	bfb8      	it	lt
 8007522:	3101      	addlt	r1, #1
 8007524:	f7ff fecb 	bl	80072be <_Balloc>
 8007528:	f100 0514 	add.w	r5, r0, #20
 800752c:	462b      	mov	r3, r5
 800752e:	2200      	movs	r2, #0
 8007530:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007534:	4573      	cmp	r3, lr
 8007536:	d316      	bcc.n	8007566 <__multiply+0x72>
 8007538:	f104 0214 	add.w	r2, r4, #20
 800753c:	f108 0114 	add.w	r1, r8, #20
 8007540:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007544:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	9b00      	ldr	r3, [sp, #0]
 800754c:	9201      	str	r2, [sp, #4]
 800754e:	4293      	cmp	r3, r2
 8007550:	d80c      	bhi.n	800756c <__multiply+0x78>
 8007552:	2e00      	cmp	r6, #0
 8007554:	dd03      	ble.n	800755e <__multiply+0x6a>
 8007556:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800755a:	2b00      	cmp	r3, #0
 800755c:	d05d      	beq.n	800761a <__multiply+0x126>
 800755e:	6106      	str	r6, [r0, #16]
 8007560:	b003      	add	sp, #12
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	f843 2b04 	str.w	r2, [r3], #4
 800756a:	e7e3      	b.n	8007534 <__multiply+0x40>
 800756c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007570:	f1bb 0f00 	cmp.w	fp, #0
 8007574:	d023      	beq.n	80075be <__multiply+0xca>
 8007576:	4689      	mov	r9, r1
 8007578:	46ac      	mov	ip, r5
 800757a:	f04f 0800 	mov.w	r8, #0
 800757e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007582:	f8dc a000 	ldr.w	sl, [ip]
 8007586:	b2a3      	uxth	r3, r4
 8007588:	fa1f fa8a 	uxth.w	sl, sl
 800758c:	fb0b a303 	mla	r3, fp, r3, sl
 8007590:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007594:	f8dc 4000 	ldr.w	r4, [ip]
 8007598:	4443      	add	r3, r8
 800759a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800759e:	fb0b 840a 	mla	r4, fp, sl, r8
 80075a2:	46e2      	mov	sl, ip
 80075a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075ae:	454f      	cmp	r7, r9
 80075b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075b4:	f84a 3b04 	str.w	r3, [sl], #4
 80075b8:	d82b      	bhi.n	8007612 <__multiply+0x11e>
 80075ba:	f8cc 8004 	str.w	r8, [ip, #4]
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	3204      	adds	r2, #4
 80075c2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80075c6:	f1ba 0f00 	cmp.w	sl, #0
 80075ca:	d020      	beq.n	800760e <__multiply+0x11a>
 80075cc:	4689      	mov	r9, r1
 80075ce:	46a8      	mov	r8, r5
 80075d0:	f04f 0b00 	mov.w	fp, #0
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	f8b9 c000 	ldrh.w	ip, [r9]
 80075da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	fb0a 440c 	mla	r4, sl, ip, r4
 80075e4:	46c4      	mov	ip, r8
 80075e6:	445c      	add	r4, fp
 80075e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075ec:	f84c 3b04 	str.w	r3, [ip], #4
 80075f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80075f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	fb0a b303 	mla	r3, sl, r3, fp
 80075fe:	454f      	cmp	r7, r9
 8007600:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007604:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007608:	d805      	bhi.n	8007616 <__multiply+0x122>
 800760a:	f8c8 3004 	str.w	r3, [r8, #4]
 800760e:	3504      	adds	r5, #4
 8007610:	e79b      	b.n	800754a <__multiply+0x56>
 8007612:	46d4      	mov	ip, sl
 8007614:	e7b3      	b.n	800757e <__multiply+0x8a>
 8007616:	46e0      	mov	r8, ip
 8007618:	e7dd      	b.n	80075d6 <__multiply+0xe2>
 800761a:	3e01      	subs	r6, #1
 800761c:	e799      	b.n	8007552 <__multiply+0x5e>
	...

08007620 <__pow5mult>:
 8007620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4615      	mov	r5, r2
 8007626:	f012 0203 	ands.w	r2, r2, #3
 800762a:	4606      	mov	r6, r0
 800762c:	460f      	mov	r7, r1
 800762e:	d007      	beq.n	8007640 <__pow5mult+0x20>
 8007630:	4c21      	ldr	r4, [pc, #132]	; (80076b8 <__pow5mult+0x98>)
 8007632:	3a01      	subs	r2, #1
 8007634:	2300      	movs	r3, #0
 8007636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800763a:	f7ff fe8b 	bl	8007354 <__multadd>
 800763e:	4607      	mov	r7, r0
 8007640:	10ad      	asrs	r5, r5, #2
 8007642:	d035      	beq.n	80076b0 <__pow5mult+0x90>
 8007644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007646:	b93c      	cbnz	r4, 8007658 <__pow5mult+0x38>
 8007648:	2010      	movs	r0, #16
 800764a:	f7ff fe05 	bl	8007258 <malloc>
 800764e:	6270      	str	r0, [r6, #36]	; 0x24
 8007650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007654:	6004      	str	r4, [r0, #0]
 8007656:	60c4      	str	r4, [r0, #12]
 8007658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800765c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007660:	b94c      	cbnz	r4, 8007676 <__pow5mult+0x56>
 8007662:	f240 2171 	movw	r1, #625	; 0x271
 8007666:	4630      	mov	r0, r6
 8007668:	f7ff ff3b 	bl	80074e2 <__i2b>
 800766c:	2300      	movs	r3, #0
 800766e:	4604      	mov	r4, r0
 8007670:	f8c8 0008 	str.w	r0, [r8, #8]
 8007674:	6003      	str	r3, [r0, #0]
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	07eb      	lsls	r3, r5, #31
 800767c:	d50a      	bpl.n	8007694 <__pow5mult+0x74>
 800767e:	4639      	mov	r1, r7
 8007680:	4622      	mov	r2, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ff36 	bl	80074f4 <__multiply>
 8007688:	4681      	mov	r9, r0
 800768a:	4639      	mov	r1, r7
 800768c:	4630      	mov	r0, r6
 800768e:	f7ff fe4a 	bl	8007326 <_Bfree>
 8007692:	464f      	mov	r7, r9
 8007694:	106d      	asrs	r5, r5, #1
 8007696:	d00b      	beq.n	80076b0 <__pow5mult+0x90>
 8007698:	6820      	ldr	r0, [r4, #0]
 800769a:	b938      	cbnz	r0, 80076ac <__pow5mult+0x8c>
 800769c:	4622      	mov	r2, r4
 800769e:	4621      	mov	r1, r4
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7ff ff27 	bl	80074f4 <__multiply>
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	f8c0 8000 	str.w	r8, [r0]
 80076ac:	4604      	mov	r4, r0
 80076ae:	e7e4      	b.n	800767a <__pow5mult+0x5a>
 80076b0:	4638      	mov	r0, r7
 80076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b6:	bf00      	nop
 80076b8:	08008ff0 	.word	0x08008ff0

080076bc <__lshift>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	460c      	mov	r4, r1
 80076c2:	4607      	mov	r7, r0
 80076c4:	4616      	mov	r6, r2
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076cc:	eb0a 0903 	add.w	r9, sl, r3
 80076d0:	6849      	ldr	r1, [r1, #4]
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	f109 0501 	add.w	r5, r9, #1
 80076d8:	42ab      	cmp	r3, r5
 80076da:	db32      	blt.n	8007742 <__lshift+0x86>
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff fdee 	bl	80072be <_Balloc>
 80076e2:	2300      	movs	r3, #0
 80076e4:	4680      	mov	r8, r0
 80076e6:	461a      	mov	r2, r3
 80076e8:	f100 0114 	add.w	r1, r0, #20
 80076ec:	4553      	cmp	r3, sl
 80076ee:	db2b      	blt.n	8007748 <__lshift+0x8c>
 80076f0:	6920      	ldr	r0, [r4, #16]
 80076f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076f6:	f104 0314 	add.w	r3, r4, #20
 80076fa:	f016 021f 	ands.w	r2, r6, #31
 80076fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007702:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007706:	d025      	beq.n	8007754 <__lshift+0x98>
 8007708:	2000      	movs	r0, #0
 800770a:	f1c2 0e20 	rsb	lr, r2, #32
 800770e:	468a      	mov	sl, r1
 8007710:	681e      	ldr	r6, [r3, #0]
 8007712:	4096      	lsls	r6, r2
 8007714:	4330      	orrs	r0, r6
 8007716:	f84a 0b04 	str.w	r0, [sl], #4
 800771a:	f853 0b04 	ldr.w	r0, [r3], #4
 800771e:	459c      	cmp	ip, r3
 8007720:	fa20 f00e 	lsr.w	r0, r0, lr
 8007724:	d814      	bhi.n	8007750 <__lshift+0x94>
 8007726:	6048      	str	r0, [r1, #4]
 8007728:	b108      	cbz	r0, 800772e <__lshift+0x72>
 800772a:	f109 0502 	add.w	r5, r9, #2
 800772e:	3d01      	subs	r5, #1
 8007730:	4638      	mov	r0, r7
 8007732:	f8c8 5010 	str.w	r5, [r8, #16]
 8007736:	4621      	mov	r1, r4
 8007738:	f7ff fdf5 	bl	8007326 <_Bfree>
 800773c:	4640      	mov	r0, r8
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007742:	3101      	adds	r1, #1
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	e7c7      	b.n	80076d8 <__lshift+0x1c>
 8007748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800774c:	3301      	adds	r3, #1
 800774e:	e7cd      	b.n	80076ec <__lshift+0x30>
 8007750:	4651      	mov	r1, sl
 8007752:	e7dc      	b.n	800770e <__lshift+0x52>
 8007754:	3904      	subs	r1, #4
 8007756:	f853 2b04 	ldr.w	r2, [r3], #4
 800775a:	459c      	cmp	ip, r3
 800775c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007760:	d8f9      	bhi.n	8007756 <__lshift+0x9a>
 8007762:	e7e4      	b.n	800772e <__lshift+0x72>

08007764 <__mcmp>:
 8007764:	6903      	ldr	r3, [r0, #16]
 8007766:	690a      	ldr	r2, [r1, #16]
 8007768:	b530      	push	{r4, r5, lr}
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	d10c      	bne.n	8007788 <__mcmp+0x24>
 800776e:	0092      	lsls	r2, r2, #2
 8007770:	3014      	adds	r0, #20
 8007772:	3114      	adds	r1, #20
 8007774:	1884      	adds	r4, r0, r2
 8007776:	4411      	add	r1, r2
 8007778:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800777c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007780:	4295      	cmp	r5, r2
 8007782:	d003      	beq.n	800778c <__mcmp+0x28>
 8007784:	d305      	bcc.n	8007792 <__mcmp+0x2e>
 8007786:	2301      	movs	r3, #1
 8007788:	4618      	mov	r0, r3
 800778a:	bd30      	pop	{r4, r5, pc}
 800778c:	42a0      	cmp	r0, r4
 800778e:	d3f3      	bcc.n	8007778 <__mcmp+0x14>
 8007790:	e7fa      	b.n	8007788 <__mcmp+0x24>
 8007792:	f04f 33ff 	mov.w	r3, #4294967295
 8007796:	e7f7      	b.n	8007788 <__mcmp+0x24>

08007798 <__mdiff>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	460d      	mov	r5, r1
 800779e:	4607      	mov	r7, r0
 80077a0:	4611      	mov	r1, r2
 80077a2:	4628      	mov	r0, r5
 80077a4:	4614      	mov	r4, r2
 80077a6:	f7ff ffdd 	bl	8007764 <__mcmp>
 80077aa:	1e06      	subs	r6, r0, #0
 80077ac:	d108      	bne.n	80077c0 <__mdiff+0x28>
 80077ae:	4631      	mov	r1, r6
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff fd84 	bl	80072be <_Balloc>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	bfa4      	itt	ge
 80077c2:	4623      	movge	r3, r4
 80077c4:	462c      	movge	r4, r5
 80077c6:	4638      	mov	r0, r7
 80077c8:	6861      	ldr	r1, [r4, #4]
 80077ca:	bfa6      	itte	ge
 80077cc:	461d      	movge	r5, r3
 80077ce:	2600      	movge	r6, #0
 80077d0:	2601      	movlt	r6, #1
 80077d2:	f7ff fd74 	bl	80072be <_Balloc>
 80077d6:	f04f 0e00 	mov.w	lr, #0
 80077da:	60c6      	str	r6, [r0, #12]
 80077dc:	692b      	ldr	r3, [r5, #16]
 80077de:	6926      	ldr	r6, [r4, #16]
 80077e0:	f104 0214 	add.w	r2, r4, #20
 80077e4:	f105 0914 	add.w	r9, r5, #20
 80077e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80077ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80077f0:	f100 0114 	add.w	r1, r0, #20
 80077f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80077f8:	f859 5b04 	ldr.w	r5, [r9], #4
 80077fc:	fa1f f38a 	uxth.w	r3, sl
 8007800:	4473      	add	r3, lr
 8007802:	b2ac      	uxth	r4, r5
 8007804:	1b1b      	subs	r3, r3, r4
 8007806:	0c2c      	lsrs	r4, r5, #16
 8007808:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800780c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007810:	b29b      	uxth	r3, r3
 8007812:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007816:	45c8      	cmp	r8, r9
 8007818:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800781c:	4694      	mov	ip, r2
 800781e:	f841 4b04 	str.w	r4, [r1], #4
 8007822:	d8e7      	bhi.n	80077f4 <__mdiff+0x5c>
 8007824:	45bc      	cmp	ip, r7
 8007826:	d304      	bcc.n	8007832 <__mdiff+0x9a>
 8007828:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800782c:	b183      	cbz	r3, 8007850 <__mdiff+0xb8>
 800782e:	6106      	str	r6, [r0, #16]
 8007830:	e7c4      	b.n	80077bc <__mdiff+0x24>
 8007832:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007836:	b2a2      	uxth	r2, r4
 8007838:	4472      	add	r2, lr
 800783a:	1413      	asrs	r3, r2, #16
 800783c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007840:	b292      	uxth	r2, r2
 8007842:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007846:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800784a:	f841 2b04 	str.w	r2, [r1], #4
 800784e:	e7e9      	b.n	8007824 <__mdiff+0x8c>
 8007850:	3e01      	subs	r6, #1
 8007852:	e7e9      	b.n	8007828 <__mdiff+0x90>

08007854 <__ulp>:
 8007854:	4b10      	ldr	r3, [pc, #64]	; (8007898 <__ulp+0x44>)
 8007856:	400b      	ands	r3, r1
 8007858:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd02      	ble.n	8007866 <__ulp+0x12>
 8007860:	2000      	movs	r0, #0
 8007862:	4619      	mov	r1, r3
 8007864:	4770      	bx	lr
 8007866:	425b      	negs	r3, r3
 8007868:	151b      	asrs	r3, r3, #20
 800786a:	2b13      	cmp	r3, #19
 800786c:	f04f 0000 	mov.w	r0, #0
 8007870:	f04f 0100 	mov.w	r1, #0
 8007874:	dc04      	bgt.n	8007880 <__ulp+0x2c>
 8007876:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800787a:	fa42 f103 	asr.w	r1, r2, r3
 800787e:	4770      	bx	lr
 8007880:	2201      	movs	r2, #1
 8007882:	3b14      	subs	r3, #20
 8007884:	2b1e      	cmp	r3, #30
 8007886:	bfce      	itee	gt
 8007888:	4613      	movgt	r3, r2
 800788a:	f1c3 031f 	rsble	r3, r3, #31
 800788e:	fa02 f303 	lslle.w	r3, r2, r3
 8007892:	4618      	mov	r0, r3
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	7ff00000 	.word	0x7ff00000

0800789c <__b2d>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	6907      	ldr	r7, [r0, #16]
 80078a2:	f100 0914 	add.w	r9, r0, #20
 80078a6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80078aa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80078ae:	f1a7 0804 	sub.w	r8, r7, #4
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff fdc7 	bl	8007446 <__hi0bits>
 80078b8:	f1c0 0320 	rsb	r3, r0, #32
 80078bc:	280a      	cmp	r0, #10
 80078be:	600b      	str	r3, [r1, #0]
 80078c0:	491e      	ldr	r1, [pc, #120]	; (800793c <__b2d+0xa0>)
 80078c2:	dc17      	bgt.n	80078f4 <__b2d+0x58>
 80078c4:	45c1      	cmp	r9, r8
 80078c6:	bf28      	it	cs
 80078c8:	2200      	movcs	r2, #0
 80078ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80078ce:	fa26 f30c 	lsr.w	r3, r6, ip
 80078d2:	bf38      	it	cc
 80078d4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80078d8:	ea43 0501 	orr.w	r5, r3, r1
 80078dc:	f100 0315 	add.w	r3, r0, #21
 80078e0:	fa06 f303 	lsl.w	r3, r6, r3
 80078e4:	fa22 f20c 	lsr.w	r2, r2, ip
 80078e8:	ea43 0402 	orr.w	r4, r3, r2
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f4:	45c1      	cmp	r9, r8
 80078f6:	bf3a      	itte	cc
 80078f8:	f1a7 0808 	subcc.w	r8, r7, #8
 80078fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007900:	2200      	movcs	r2, #0
 8007902:	f1b0 030b 	subs.w	r3, r0, #11
 8007906:	d015      	beq.n	8007934 <__b2d+0x98>
 8007908:	409e      	lsls	r6, r3
 800790a:	f1c3 0720 	rsb	r7, r3, #32
 800790e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007912:	fa22 f107 	lsr.w	r1, r2, r7
 8007916:	45c8      	cmp	r8, r9
 8007918:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800791c:	ea46 0501 	orr.w	r5, r6, r1
 8007920:	bf94      	ite	ls
 8007922:	2100      	movls	r1, #0
 8007924:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007928:	fa02 f003 	lsl.w	r0, r2, r3
 800792c:	40f9      	lsrs	r1, r7
 800792e:	ea40 0401 	orr.w	r4, r0, r1
 8007932:	e7db      	b.n	80078ec <__b2d+0x50>
 8007934:	ea46 0501 	orr.w	r5, r6, r1
 8007938:	4614      	mov	r4, r2
 800793a:	e7d7      	b.n	80078ec <__b2d+0x50>
 800793c:	3ff00000 	.word	0x3ff00000

08007940 <__d2b>:
 8007940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007944:	461c      	mov	r4, r3
 8007946:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800794a:	2101      	movs	r1, #1
 800794c:	4690      	mov	r8, r2
 800794e:	f7ff fcb6 	bl	80072be <_Balloc>
 8007952:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007956:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800795a:	4607      	mov	r7, r0
 800795c:	bb34      	cbnz	r4, 80079ac <__d2b+0x6c>
 800795e:	9201      	str	r2, [sp, #4]
 8007960:	f1b8 0200 	subs.w	r2, r8, #0
 8007964:	d027      	beq.n	80079b6 <__d2b+0x76>
 8007966:	a802      	add	r0, sp, #8
 8007968:	f840 2d08 	str.w	r2, [r0, #-8]!
 800796c:	f7ff fd8a 	bl	8007484 <__lo0bits>
 8007970:	9900      	ldr	r1, [sp, #0]
 8007972:	b1f0      	cbz	r0, 80079b2 <__d2b+0x72>
 8007974:	9a01      	ldr	r2, [sp, #4]
 8007976:	f1c0 0320 	rsb	r3, r0, #32
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	430b      	orrs	r3, r1
 8007980:	40c2      	lsrs	r2, r0
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	9201      	str	r2, [sp, #4]
 8007986:	9b01      	ldr	r3, [sp, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2102      	movne	r1, #2
 800798e:	2101      	moveq	r1, #1
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	6139      	str	r1, [r7, #16]
 8007994:	b1c4      	cbz	r4, 80079c8 <__d2b+0x88>
 8007996:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800799a:	4404      	add	r4, r0
 800799c:	6034      	str	r4, [r6, #0]
 800799e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079a2:	6028      	str	r0, [r5, #0]
 80079a4:	4638      	mov	r0, r7
 80079a6:	b002      	add	sp, #8
 80079a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80079b0:	e7d5      	b.n	800795e <__d2b+0x1e>
 80079b2:	6179      	str	r1, [r7, #20]
 80079b4:	e7e7      	b.n	8007986 <__d2b+0x46>
 80079b6:	a801      	add	r0, sp, #4
 80079b8:	f7ff fd64 	bl	8007484 <__lo0bits>
 80079bc:	2101      	movs	r1, #1
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	6139      	str	r1, [r7, #16]
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	3020      	adds	r0, #32
 80079c6:	e7e5      	b.n	8007994 <__d2b+0x54>
 80079c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80079d0:	6030      	str	r0, [r6, #0]
 80079d2:	6918      	ldr	r0, [r3, #16]
 80079d4:	f7ff fd37 	bl	8007446 <__hi0bits>
 80079d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80079dc:	e7e1      	b.n	80079a2 <__d2b+0x62>

080079de <__ratio>:
 80079de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e2:	4688      	mov	r8, r1
 80079e4:	4669      	mov	r1, sp
 80079e6:	4681      	mov	r9, r0
 80079e8:	f7ff ff58 	bl	800789c <__b2d>
 80079ec:	468b      	mov	fp, r1
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	4640      	mov	r0, r8
 80079f4:	a901      	add	r1, sp, #4
 80079f6:	f7ff ff51 	bl	800789c <__b2d>
 80079fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007a02:	460d      	mov	r5, r1
 8007a04:	eba3 0c02 	sub.w	ip, r3, r2
 8007a08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfd5      	itete	le
 8007a16:	460a      	movle	r2, r1
 8007a18:	463a      	movgt	r2, r7
 8007a1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a1e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a22:	bfd8      	it	le
 8007a24:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007a28:	462b      	mov	r3, r5
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7f8 fe7c 	bl	800072c <__aeabi_ddiv>
 8007a34:	b003      	add	sp, #12
 8007a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a3a <__copybits>:
 8007a3a:	3901      	subs	r1, #1
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	1149      	asrs	r1, r1, #5
 8007a40:	6914      	ldr	r4, [r2, #16]
 8007a42:	3101      	adds	r1, #1
 8007a44:	f102 0314 	add.w	r3, r2, #20
 8007a48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	4602      	mov	r2, r0
 8007a54:	d303      	bcc.n	8007a5e <__copybits+0x24>
 8007a56:	2300      	movs	r3, #0
 8007a58:	428a      	cmp	r2, r1
 8007a5a:	d305      	bcc.n	8007a68 <__copybits+0x2e>
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a62:	f840 2b04 	str.w	r2, [r0], #4
 8007a66:	e7f3      	b.n	8007a50 <__copybits+0x16>
 8007a68:	f842 3b04 	str.w	r3, [r2], #4
 8007a6c:	e7f4      	b.n	8007a58 <__copybits+0x1e>

08007a6e <__any_on>:
 8007a6e:	f100 0214 	add.w	r2, r0, #20
 8007a72:	6900      	ldr	r0, [r0, #16]
 8007a74:	114b      	asrs	r3, r1, #5
 8007a76:	4298      	cmp	r0, r3
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	db11      	blt.n	8007aa0 <__any_on+0x32>
 8007a7c:	dd0a      	ble.n	8007a94 <__any_on+0x26>
 8007a7e:	f011 011f 	ands.w	r1, r1, #31
 8007a82:	d007      	beq.n	8007a94 <__any_on+0x26>
 8007a84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a88:	fa24 f001 	lsr.w	r0, r4, r1
 8007a8c:	fa00 f101 	lsl.w	r1, r0, r1
 8007a90:	428c      	cmp	r4, r1
 8007a92:	d10b      	bne.n	8007aac <__any_on+0x3e>
 8007a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d803      	bhi.n	8007aa4 <__any_on+0x36>
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	bd10      	pop	{r4, pc}
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	e7f7      	b.n	8007a94 <__any_on+0x26>
 8007aa4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d0f5      	beq.n	8007a98 <__any_on+0x2a>
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7f6      	b.n	8007a9e <__any_on+0x30>

08007ab0 <_calloc_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	fb02 f401 	mul.w	r4, r2, r1
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f000 f854 	bl	8007b64 <_malloc_r>
 8007abc:	4605      	mov	r5, r0
 8007abe:	b118      	cbz	r0, 8007ac8 <_calloc_r+0x18>
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	f7fc fcfa 	bl	80044bc <memset>
 8007ac8:	4628      	mov	r0, r5
 8007aca:	bd38      	pop	{r3, r4, r5, pc}

08007acc <_free_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4605      	mov	r5, r0
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	d043      	beq.n	8007b5c <_free_r+0x90>
 8007ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad8:	1f0c      	subs	r4, r1, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfb8      	it	lt
 8007ade:	18e4      	addlt	r4, r4, r3
 8007ae0:	f000 fa34 	bl	8007f4c <__malloc_lock>
 8007ae4:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <_free_r+0x94>)
 8007ae6:	6813      	ldr	r3, [r2, #0]
 8007ae8:	4610      	mov	r0, r2
 8007aea:	b933      	cbnz	r3, 8007afa <_free_r+0x2e>
 8007aec:	6063      	str	r3, [r4, #4]
 8007aee:	6014      	str	r4, [r2, #0]
 8007af0:	4628      	mov	r0, r5
 8007af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af6:	f000 ba2a 	b.w	8007f4e <__malloc_unlock>
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	d90b      	bls.n	8007b16 <_free_r+0x4a>
 8007afe:	6821      	ldr	r1, [r4, #0]
 8007b00:	1862      	adds	r2, r4, r1
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bf01      	itttt	eq
 8007b06:	681a      	ldreq	r2, [r3, #0]
 8007b08:	685b      	ldreq	r3, [r3, #4]
 8007b0a:	1852      	addeq	r2, r2, r1
 8007b0c:	6022      	streq	r2, [r4, #0]
 8007b0e:	6063      	str	r3, [r4, #4]
 8007b10:	6004      	str	r4, [r0, #0]
 8007b12:	e7ed      	b.n	8007af0 <_free_r+0x24>
 8007b14:	4613      	mov	r3, r2
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	b10a      	cbz	r2, 8007b1e <_free_r+0x52>
 8007b1a:	42a2      	cmp	r2, r4
 8007b1c:	d9fa      	bls.n	8007b14 <_free_r+0x48>
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	1858      	adds	r0, r3, r1
 8007b22:	42a0      	cmp	r0, r4
 8007b24:	d10b      	bne.n	8007b3e <_free_r+0x72>
 8007b26:	6820      	ldr	r0, [r4, #0]
 8007b28:	4401      	add	r1, r0
 8007b2a:	1858      	adds	r0, r3, r1
 8007b2c:	4282      	cmp	r2, r0
 8007b2e:	6019      	str	r1, [r3, #0]
 8007b30:	d1de      	bne.n	8007af0 <_free_r+0x24>
 8007b32:	6810      	ldr	r0, [r2, #0]
 8007b34:	6852      	ldr	r2, [r2, #4]
 8007b36:	4401      	add	r1, r0
 8007b38:	6019      	str	r1, [r3, #0]
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	e7d8      	b.n	8007af0 <_free_r+0x24>
 8007b3e:	d902      	bls.n	8007b46 <_free_r+0x7a>
 8007b40:	230c      	movs	r3, #12
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	e7d4      	b.n	8007af0 <_free_r+0x24>
 8007b46:	6820      	ldr	r0, [r4, #0]
 8007b48:	1821      	adds	r1, r4, r0
 8007b4a:	428a      	cmp	r2, r1
 8007b4c:	bf01      	itttt	eq
 8007b4e:	6811      	ldreq	r1, [r2, #0]
 8007b50:	6852      	ldreq	r2, [r2, #4]
 8007b52:	1809      	addeq	r1, r1, r0
 8007b54:	6021      	streq	r1, [r4, #0]
 8007b56:	6062      	str	r2, [r4, #4]
 8007b58:	605c      	str	r4, [r3, #4]
 8007b5a:	e7c9      	b.n	8007af0 <_free_r+0x24>
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	200006a0 	.word	0x200006a0

08007b64 <_malloc_r>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	1ccd      	adds	r5, r1, #3
 8007b68:	f025 0503 	bic.w	r5, r5, #3
 8007b6c:	3508      	adds	r5, #8
 8007b6e:	2d0c      	cmp	r5, #12
 8007b70:	bf38      	it	cc
 8007b72:	250c      	movcc	r5, #12
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	4606      	mov	r6, r0
 8007b78:	db01      	blt.n	8007b7e <_malloc_r+0x1a>
 8007b7a:	42a9      	cmp	r1, r5
 8007b7c:	d903      	bls.n	8007b86 <_malloc_r+0x22>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	2000      	movs	r0, #0
 8007b84:	bd70      	pop	{r4, r5, r6, pc}
 8007b86:	f000 f9e1 	bl	8007f4c <__malloc_lock>
 8007b8a:	4a21      	ldr	r2, [pc, #132]	; (8007c10 <_malloc_r+0xac>)
 8007b8c:	6814      	ldr	r4, [r2, #0]
 8007b8e:	4621      	mov	r1, r4
 8007b90:	b991      	cbnz	r1, 8007bb8 <_malloc_r+0x54>
 8007b92:	4c20      	ldr	r4, [pc, #128]	; (8007c14 <_malloc_r+0xb0>)
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	b91b      	cbnz	r3, 8007ba0 <_malloc_r+0x3c>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 f98f 	bl	8007ebc <_sbrk_r>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f000 f98a 	bl	8007ebc <_sbrk_r>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d124      	bne.n	8007bf6 <_malloc_r+0x92>
 8007bac:	230c      	movs	r3, #12
 8007bae:	4630      	mov	r0, r6
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	f000 f9cc 	bl	8007f4e <__malloc_unlock>
 8007bb6:	e7e4      	b.n	8007b82 <_malloc_r+0x1e>
 8007bb8:	680b      	ldr	r3, [r1, #0]
 8007bba:	1b5b      	subs	r3, r3, r5
 8007bbc:	d418      	bmi.n	8007bf0 <_malloc_r+0x8c>
 8007bbe:	2b0b      	cmp	r3, #11
 8007bc0:	d90f      	bls.n	8007be2 <_malloc_r+0x7e>
 8007bc2:	600b      	str	r3, [r1, #0]
 8007bc4:	18cc      	adds	r4, r1, r3
 8007bc6:	50cd      	str	r5, [r1, r3]
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 f9c0 	bl	8007f4e <__malloc_unlock>
 8007bce:	f104 000b 	add.w	r0, r4, #11
 8007bd2:	1d23      	adds	r3, r4, #4
 8007bd4:	f020 0007 	bic.w	r0, r0, #7
 8007bd8:	1ac3      	subs	r3, r0, r3
 8007bda:	d0d3      	beq.n	8007b84 <_malloc_r+0x20>
 8007bdc:	425a      	negs	r2, r3
 8007bde:	50e2      	str	r2, [r4, r3]
 8007be0:	e7d0      	b.n	8007b84 <_malloc_r+0x20>
 8007be2:	684b      	ldr	r3, [r1, #4]
 8007be4:	428c      	cmp	r4, r1
 8007be6:	bf16      	itet	ne
 8007be8:	6063      	strne	r3, [r4, #4]
 8007bea:	6013      	streq	r3, [r2, #0]
 8007bec:	460c      	movne	r4, r1
 8007bee:	e7eb      	b.n	8007bc8 <_malloc_r+0x64>
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	6849      	ldr	r1, [r1, #4]
 8007bf4:	e7cc      	b.n	8007b90 <_malloc_r+0x2c>
 8007bf6:	1cc4      	adds	r4, r0, #3
 8007bf8:	f024 0403 	bic.w	r4, r4, #3
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d005      	beq.n	8007c0c <_malloc_r+0xa8>
 8007c00:	1a21      	subs	r1, r4, r0
 8007c02:	4630      	mov	r0, r6
 8007c04:	f000 f95a 	bl	8007ebc <_sbrk_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d0cf      	beq.n	8007bac <_malloc_r+0x48>
 8007c0c:	6025      	str	r5, [r4, #0]
 8007c0e:	e7db      	b.n	8007bc8 <_malloc_r+0x64>
 8007c10:	200006a0 	.word	0x200006a0
 8007c14:	200006a4 	.word	0x200006a4

08007c18 <__ssputs_r>:
 8007c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	688e      	ldr	r6, [r1, #8]
 8007c1e:	4682      	mov	sl, r0
 8007c20:	429e      	cmp	r6, r3
 8007c22:	460c      	mov	r4, r1
 8007c24:	4690      	mov	r8, r2
 8007c26:	4699      	mov	r9, r3
 8007c28:	d837      	bhi.n	8007c9a <__ssputs_r+0x82>
 8007c2a:	898a      	ldrh	r2, [r1, #12]
 8007c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c30:	d031      	beq.n	8007c96 <__ssputs_r+0x7e>
 8007c32:	2302      	movs	r3, #2
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	6909      	ldr	r1, [r1, #16]
 8007c38:	1a6f      	subs	r7, r5, r1
 8007c3a:	6965      	ldr	r5, [r4, #20]
 8007c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c40:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c44:	f109 0301 	add.w	r3, r9, #1
 8007c48:	443b      	add	r3, r7
 8007c4a:	429d      	cmp	r5, r3
 8007c4c:	bf38      	it	cc
 8007c4e:	461d      	movcc	r5, r3
 8007c50:	0553      	lsls	r3, r2, #21
 8007c52:	d530      	bpl.n	8007cb6 <__ssputs_r+0x9e>
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7ff ff85 	bl	8007b64 <_malloc_r>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	b950      	cbnz	r0, 8007c74 <__ssputs_r+0x5c>
 8007c5e:	230c      	movs	r3, #12
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	f8ca 3000 	str.w	r3, [sl]
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	463a      	mov	r2, r7
 8007c76:	6921      	ldr	r1, [r4, #16]
 8007c78:	f7ff fb16 	bl	80072a8 <memcpy>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	6126      	str	r6, [r4, #16]
 8007c8a:	443e      	add	r6, r7
 8007c8c:	6026      	str	r6, [r4, #0]
 8007c8e:	464e      	mov	r6, r9
 8007c90:	6165      	str	r5, [r4, #20]
 8007c92:	1bed      	subs	r5, r5, r7
 8007c94:	60a5      	str	r5, [r4, #8]
 8007c96:	454e      	cmp	r6, r9
 8007c98:	d900      	bls.n	8007c9c <__ssputs_r+0x84>
 8007c9a:	464e      	mov	r6, r9
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	6820      	ldr	r0, [r4, #0]
 8007ca2:	f000 f93a 	bl	8007f1a <memmove>
 8007ca6:	68a3      	ldr	r3, [r4, #8]
 8007ca8:	2000      	movs	r0, #0
 8007caa:	1b9b      	subs	r3, r3, r6
 8007cac:	60a3      	str	r3, [r4, #8]
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	441e      	add	r6, r3
 8007cb2:	6026      	str	r6, [r4, #0]
 8007cb4:	e7dc      	b.n	8007c70 <__ssputs_r+0x58>
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	f000 f94a 	bl	8007f50 <_realloc_r>
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d1e2      	bne.n	8007c88 <__ssputs_r+0x70>
 8007cc2:	6921      	ldr	r1, [r4, #16]
 8007cc4:	4650      	mov	r0, sl
 8007cc6:	f7ff ff01 	bl	8007acc <_free_r>
 8007cca:	e7c8      	b.n	8007c5e <__ssputs_r+0x46>

08007ccc <_svfiprintf_r>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	461d      	mov	r5, r3
 8007cd2:	898b      	ldrh	r3, [r1, #12]
 8007cd4:	b09d      	sub	sp, #116	; 0x74
 8007cd6:	061f      	lsls	r7, r3, #24
 8007cd8:	4680      	mov	r8, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	4616      	mov	r6, r2
 8007cde:	d50f      	bpl.n	8007d00 <_svfiprintf_r+0x34>
 8007ce0:	690b      	ldr	r3, [r1, #16]
 8007ce2:	b96b      	cbnz	r3, 8007d00 <_svfiprintf_r+0x34>
 8007ce4:	2140      	movs	r1, #64	; 0x40
 8007ce6:	f7ff ff3d 	bl	8007b64 <_malloc_r>
 8007cea:	6020      	str	r0, [r4, #0]
 8007cec:	6120      	str	r0, [r4, #16]
 8007cee:	b928      	cbnz	r0, 8007cfc <_svfiprintf_r+0x30>
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	f8c8 3000 	str.w	r3, [r8]
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	e0c8      	b.n	8007e8e <_svfiprintf_r+0x1c2>
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	6163      	str	r3, [r4, #20]
 8007d00:	2300      	movs	r3, #0
 8007d02:	9309      	str	r3, [sp, #36]	; 0x24
 8007d04:	2320      	movs	r3, #32
 8007d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d0a:	2330      	movs	r3, #48	; 0x30
 8007d0c:	f04f 0b01 	mov.w	fp, #1
 8007d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d14:	9503      	str	r5, [sp, #12]
 8007d16:	4637      	mov	r7, r6
 8007d18:	463d      	mov	r5, r7
 8007d1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d1e:	b10b      	cbz	r3, 8007d24 <_svfiprintf_r+0x58>
 8007d20:	2b25      	cmp	r3, #37	; 0x25
 8007d22:	d13e      	bne.n	8007da2 <_svfiprintf_r+0xd6>
 8007d24:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x76>
 8007d2a:	4653      	mov	r3, sl
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4640      	mov	r0, r8
 8007d32:	f7ff ff71 	bl	8007c18 <__ssputs_r>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f000 80a4 	beq.w	8007e84 <_svfiprintf_r+0x1b8>
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	4453      	add	r3, sl
 8007d40:	9309      	str	r3, [sp, #36]	; 0x24
 8007d42:	783b      	ldrb	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 809d 	beq.w	8007e84 <_svfiprintf_r+0x1b8>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d5e:	462f      	mov	r7, r5
 8007d60:	2205      	movs	r2, #5
 8007d62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d66:	4850      	ldr	r0, [pc, #320]	; (8007ea8 <_svfiprintf_r+0x1dc>)
 8007d68:	f7ff fa90 	bl	800728c <memchr>
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	b9d0      	cbnz	r0, 8007da6 <_svfiprintf_r+0xda>
 8007d70:	06d9      	lsls	r1, r3, #27
 8007d72:	bf44      	itt	mi
 8007d74:	2220      	movmi	r2, #32
 8007d76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d7a:	071a      	lsls	r2, r3, #28
 8007d7c:	bf44      	itt	mi
 8007d7e:	222b      	movmi	r2, #43	; 0x2b
 8007d80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d84:	782a      	ldrb	r2, [r5, #0]
 8007d86:	2a2a      	cmp	r2, #42	; 0x2a
 8007d88:	d015      	beq.n	8007db6 <_svfiprintf_r+0xea>
 8007d8a:	462f      	mov	r7, r5
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	250a      	movs	r5, #10
 8007d90:	9a07      	ldr	r2, [sp, #28]
 8007d92:	4639      	mov	r1, r7
 8007d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d98:	3b30      	subs	r3, #48	; 0x30
 8007d9a:	2b09      	cmp	r3, #9
 8007d9c:	d94d      	bls.n	8007e3a <_svfiprintf_r+0x16e>
 8007d9e:	b1b8      	cbz	r0, 8007dd0 <_svfiprintf_r+0x104>
 8007da0:	e00f      	b.n	8007dc2 <_svfiprintf_r+0xf6>
 8007da2:	462f      	mov	r7, r5
 8007da4:	e7b8      	b.n	8007d18 <_svfiprintf_r+0x4c>
 8007da6:	4a40      	ldr	r2, [pc, #256]	; (8007ea8 <_svfiprintf_r+0x1dc>)
 8007da8:	463d      	mov	r5, r7
 8007daa:	1a80      	subs	r0, r0, r2
 8007dac:	fa0b f000 	lsl.w	r0, fp, r0
 8007db0:	4318      	orrs	r0, r3
 8007db2:	9004      	str	r0, [sp, #16]
 8007db4:	e7d3      	b.n	8007d5e <_svfiprintf_r+0x92>
 8007db6:	9a03      	ldr	r2, [sp, #12]
 8007db8:	1d11      	adds	r1, r2, #4
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	9103      	str	r1, [sp, #12]
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	db01      	blt.n	8007dc6 <_svfiprintf_r+0xfa>
 8007dc2:	9207      	str	r2, [sp, #28]
 8007dc4:	e004      	b.n	8007dd0 <_svfiprintf_r+0x104>
 8007dc6:	4252      	negs	r2, r2
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	9207      	str	r2, [sp, #28]
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	783b      	ldrb	r3, [r7, #0]
 8007dd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007dd4:	d10c      	bne.n	8007df0 <_svfiprintf_r+0x124>
 8007dd6:	787b      	ldrb	r3, [r7, #1]
 8007dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dda:	d133      	bne.n	8007e44 <_svfiprintf_r+0x178>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	3702      	adds	r7, #2
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	9203      	str	r2, [sp, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfb8      	it	lt
 8007dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dee:	9305      	str	r3, [sp, #20]
 8007df0:	4d2e      	ldr	r5, [pc, #184]	; (8007eac <_svfiprintf_r+0x1e0>)
 8007df2:	2203      	movs	r2, #3
 8007df4:	7839      	ldrb	r1, [r7, #0]
 8007df6:	4628      	mov	r0, r5
 8007df8:	f7ff fa48 	bl	800728c <memchr>
 8007dfc:	b138      	cbz	r0, 8007e0e <_svfiprintf_r+0x142>
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	1b40      	subs	r0, r0, r5
 8007e02:	fa03 f000 	lsl.w	r0, r3, r0
 8007e06:	9b04      	ldr	r3, [sp, #16]
 8007e08:	3701      	adds	r7, #1
 8007e0a:	4303      	orrs	r3, r0
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	7839      	ldrb	r1, [r7, #0]
 8007e10:	2206      	movs	r2, #6
 8007e12:	4827      	ldr	r0, [pc, #156]	; (8007eb0 <_svfiprintf_r+0x1e4>)
 8007e14:	1c7e      	adds	r6, r7, #1
 8007e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e1a:	f7ff fa37 	bl	800728c <memchr>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d038      	beq.n	8007e94 <_svfiprintf_r+0x1c8>
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <_svfiprintf_r+0x1e8>)
 8007e24:	bb13      	cbnz	r3, 8007e6c <_svfiprintf_r+0x1a0>
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	3307      	adds	r3, #7
 8007e2a:	f023 0307 	bic.w	r3, r3, #7
 8007e2e:	3308      	adds	r3, #8
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	444b      	add	r3, r9
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	e76d      	b.n	8007d16 <_svfiprintf_r+0x4a>
 8007e3a:	fb05 3202 	mla	r2, r5, r2, r3
 8007e3e:	2001      	movs	r0, #1
 8007e40:	460f      	mov	r7, r1
 8007e42:	e7a6      	b.n	8007d92 <_svfiprintf_r+0xc6>
 8007e44:	2300      	movs	r3, #0
 8007e46:	250a      	movs	r5, #10
 8007e48:	4619      	mov	r1, r3
 8007e4a:	3701      	adds	r7, #1
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	4638      	mov	r0, r7
 8007e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e54:	3a30      	subs	r2, #48	; 0x30
 8007e56:	2a09      	cmp	r2, #9
 8007e58:	d903      	bls.n	8007e62 <_svfiprintf_r+0x196>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0c8      	beq.n	8007df0 <_svfiprintf_r+0x124>
 8007e5e:	9105      	str	r1, [sp, #20]
 8007e60:	e7c6      	b.n	8007df0 <_svfiprintf_r+0x124>
 8007e62:	fb05 2101 	mla	r1, r5, r1, r2
 8007e66:	2301      	movs	r3, #1
 8007e68:	4607      	mov	r7, r0
 8007e6a:	e7f0      	b.n	8007e4e <_svfiprintf_r+0x182>
 8007e6c:	ab03      	add	r3, sp, #12
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	4622      	mov	r2, r4
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <_svfiprintf_r+0x1ec>)
 8007e74:	a904      	add	r1, sp, #16
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7fc fbba 	bl	80045f0 <_printf_float>
 8007e7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e80:	4681      	mov	r9, r0
 8007e82:	d1d6      	bne.n	8007e32 <_svfiprintf_r+0x166>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	065b      	lsls	r3, r3, #25
 8007e88:	f53f af35 	bmi.w	8007cf6 <_svfiprintf_r+0x2a>
 8007e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e8e:	b01d      	add	sp, #116	; 0x74
 8007e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	ab03      	add	r3, sp, #12
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <_svfiprintf_r+0x1ec>)
 8007e9c:	a904      	add	r1, sp, #16
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	f7fc fe52 	bl	8004b48 <_printf_i>
 8007ea4:	e7ea      	b.n	8007e7c <_svfiprintf_r+0x1b0>
 8007ea6:	bf00      	nop
 8007ea8:	08008ffc 	.word	0x08008ffc
 8007eac:	08009002 	.word	0x08009002
 8007eb0:	08009006 	.word	0x08009006
 8007eb4:	080045f1 	.word	0x080045f1
 8007eb8:	08007c19 	.word	0x08007c19

08007ebc <_sbrk_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4c05      	ldr	r4, [pc, #20]	; (8007ed8 <_sbrk_r+0x1c>)
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	f7fa f8ee 	bl	80020a8 <_sbrk>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_sbrk_r+0x1a>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_sbrk_r+0x1a>
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	20000760 	.word	0x20000760

08007edc <strncmp>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	b16a      	cbz	r2, 8007efc <strncmp+0x20>
 8007ee0:	3901      	subs	r1, #1
 8007ee2:	1884      	adds	r4, r0, r2
 8007ee4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ee8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d103      	bne.n	8007ef8 <strncmp+0x1c>
 8007ef0:	42a0      	cmp	r0, r4
 8007ef2:	d001      	beq.n	8007ef8 <strncmp+0x1c>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <strncmp+0x8>
 8007ef8:	1a98      	subs	r0, r3, r2
 8007efa:	bd10      	pop	{r4, pc}
 8007efc:	4610      	mov	r0, r2
 8007efe:	e7fc      	b.n	8007efa <strncmp+0x1e>

08007f00 <__ascii_wctomb>:
 8007f00:	b149      	cbz	r1, 8007f16 <__ascii_wctomb+0x16>
 8007f02:	2aff      	cmp	r2, #255	; 0xff
 8007f04:	bf8b      	itete	hi
 8007f06:	238a      	movhi	r3, #138	; 0x8a
 8007f08:	700a      	strbls	r2, [r1, #0]
 8007f0a:	6003      	strhi	r3, [r0, #0]
 8007f0c:	2001      	movls	r0, #1
 8007f0e:	bf88      	it	hi
 8007f10:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f14:	4770      	bx	lr
 8007f16:	4608      	mov	r0, r1
 8007f18:	4770      	bx	lr

08007f1a <memmove>:
 8007f1a:	4288      	cmp	r0, r1
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	eb01 0302 	add.w	r3, r1, r2
 8007f22:	d807      	bhi.n	8007f34 <memmove+0x1a>
 8007f24:	1e42      	subs	r2, r0, #1
 8007f26:	4299      	cmp	r1, r3
 8007f28:	d00a      	beq.n	8007f40 <memmove+0x26>
 8007f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f32:	e7f8      	b.n	8007f26 <memmove+0xc>
 8007f34:	4283      	cmp	r3, r0
 8007f36:	d9f5      	bls.n	8007f24 <memmove+0xa>
 8007f38:	1881      	adds	r1, r0, r2
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	42d3      	cmn	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <memmove+0x28>
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f4a:	e7f7      	b.n	8007f3c <memmove+0x22>

08007f4c <__malloc_lock>:
 8007f4c:	4770      	bx	lr

08007f4e <__malloc_unlock>:
 8007f4e:	4770      	bx	lr

08007f50 <_realloc_r>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	4607      	mov	r7, r0
 8007f54:	4614      	mov	r4, r2
 8007f56:	460e      	mov	r6, r1
 8007f58:	b921      	cbnz	r1, 8007f64 <_realloc_r+0x14>
 8007f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f5e:	4611      	mov	r1, r2
 8007f60:	f7ff be00 	b.w	8007b64 <_malloc_r>
 8007f64:	b922      	cbnz	r2, 8007f70 <_realloc_r+0x20>
 8007f66:	f7ff fdb1 	bl	8007acc <_free_r>
 8007f6a:	4625      	mov	r5, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f70:	f000 f814 	bl	8007f9c <_malloc_usable_size_r>
 8007f74:	42a0      	cmp	r0, r4
 8007f76:	d20f      	bcs.n	8007f98 <_realloc_r+0x48>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f7ff fdf2 	bl	8007b64 <_malloc_r>
 8007f80:	4605      	mov	r5, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0f2      	beq.n	8007f6c <_realloc_r+0x1c>
 8007f86:	4631      	mov	r1, r6
 8007f88:	4622      	mov	r2, r4
 8007f8a:	f7ff f98d 	bl	80072a8 <memcpy>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff fd9b 	bl	8007acc <_free_r>
 8007f96:	e7e9      	b.n	8007f6c <_realloc_r+0x1c>
 8007f98:	4635      	mov	r5, r6
 8007f9a:	e7e7      	b.n	8007f6c <_realloc_r+0x1c>

08007f9c <_malloc_usable_size_r>:
 8007f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa0:	1f18      	subs	r0, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfbc      	itt	lt
 8007fa6:	580b      	ldrlt	r3, [r1, r0]
 8007fa8:	18c0      	addlt	r0, r0, r3
 8007faa:	4770      	bx	lr
 8007fac:	0000      	movs	r0, r0
	...

08007fb0 <atan>:
 8007fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	4bb6      	ldr	r3, [pc, #728]	; (8008290 <atan+0x2e0>)
 8007fb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007fba:	429e      	cmp	r6, r3
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	468b      	mov	fp, r1
 8007fc2:	dd17      	ble.n	8007ff4 <atan+0x44>
 8007fc4:	4bb3      	ldr	r3, [pc, #716]	; (8008294 <atan+0x2e4>)
 8007fc6:	429e      	cmp	r6, r3
 8007fc8:	dc01      	bgt.n	8007fce <atan+0x1e>
 8007fca:	d109      	bne.n	8007fe0 <atan+0x30>
 8007fcc:	b140      	cbz	r0, 8007fe0 <atan+0x30>
 8007fce:	4622      	mov	r2, r4
 8007fd0:	462b      	mov	r3, r5
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 f8c9 	bl	800016c <__adddf3>
 8007fda:	4604      	mov	r4, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	e005      	b.n	8007fec <atan+0x3c>
 8007fe0:	f1bb 0f00 	cmp.w	fp, #0
 8007fe4:	4cac      	ldr	r4, [pc, #688]	; (8008298 <atan+0x2e8>)
 8007fe6:	f340 8121 	ble.w	800822c <atan+0x27c>
 8007fea:	4dac      	ldr	r5, [pc, #688]	; (800829c <atan+0x2ec>)
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff4:	4baa      	ldr	r3, [pc, #680]	; (80082a0 <atan+0x2f0>)
 8007ff6:	429e      	cmp	r6, r3
 8007ff8:	dc11      	bgt.n	800801e <atan+0x6e>
 8007ffa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ffe:	429e      	cmp	r6, r3
 8008000:	dc0a      	bgt.n	8008018 <atan+0x68>
 8008002:	a38b      	add	r3, pc, #556	; (adr r3, 8008230 <atan+0x280>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 f8b0 	bl	800016c <__adddf3>
 800800c:	2200      	movs	r2, #0
 800800e:	4ba5      	ldr	r3, [pc, #660]	; (80082a4 <atan+0x2f4>)
 8008010:	f7f8 fcf2 	bl	80009f8 <__aeabi_dcmpgt>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1e9      	bne.n	8007fec <atan+0x3c>
 8008018:	f04f 3aff 	mov.w	sl, #4294967295
 800801c:	e027      	b.n	800806e <atan+0xbe>
 800801e:	f000 f951 	bl	80082c4 <fabs>
 8008022:	4ba1      	ldr	r3, [pc, #644]	; (80082a8 <atan+0x2f8>)
 8008024:	4604      	mov	r4, r0
 8008026:	429e      	cmp	r6, r3
 8008028:	460d      	mov	r5, r1
 800802a:	f300 80b8 	bgt.w	800819e <atan+0x1ee>
 800802e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008032:	429e      	cmp	r6, r3
 8008034:	f300 809c 	bgt.w	8008170 <atan+0x1c0>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	f7f8 f896 	bl	800016c <__adddf3>
 8008040:	2200      	movs	r2, #0
 8008042:	4b98      	ldr	r3, [pc, #608]	; (80082a4 <atan+0x2f4>)
 8008044:	f7f8 f890 	bl	8000168 <__aeabi_dsub>
 8008048:	2200      	movs	r2, #0
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 f889 	bl	800016c <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 fb63 	bl	800072c <__aeabi_ddiv>
 8008066:	f04f 0a00 	mov.w	sl, #0
 800806a:	4604      	mov	r4, r0
 800806c:	460d      	mov	r5, r1
 800806e:	4622      	mov	r2, r4
 8008070:	462b      	mov	r3, r5
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 fa2f 	bl	80004d8 <__aeabi_dmul>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4680      	mov	r8, r0
 8008080:	4689      	mov	r9, r1
 8008082:	f7f8 fa29 	bl	80004d8 <__aeabi_dmul>
 8008086:	a36c      	add	r3, pc, #432	; (adr r3, 8008238 <atan+0x288>)
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	f7f8 fa22 	bl	80004d8 <__aeabi_dmul>
 8008094:	a36a      	add	r3, pc, #424	; (adr r3, 8008240 <atan+0x290>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f867 	bl	800016c <__adddf3>
 800809e:	4632      	mov	r2, r6
 80080a0:	463b      	mov	r3, r7
 80080a2:	f7f8 fa19 	bl	80004d8 <__aeabi_dmul>
 80080a6:	a368      	add	r3, pc, #416	; (adr r3, 8008248 <atan+0x298>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 f85e 	bl	800016c <__adddf3>
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	f7f8 fa10 	bl	80004d8 <__aeabi_dmul>
 80080b8:	a365      	add	r3, pc, #404	; (adr r3, 8008250 <atan+0x2a0>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f855 	bl	800016c <__adddf3>
 80080c2:	4632      	mov	r2, r6
 80080c4:	463b      	mov	r3, r7
 80080c6:	f7f8 fa07 	bl	80004d8 <__aeabi_dmul>
 80080ca:	a363      	add	r3, pc, #396	; (adr r3, 8008258 <atan+0x2a8>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f84c 	bl	800016c <__adddf3>
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	f7f8 f9fe 	bl	80004d8 <__aeabi_dmul>
 80080dc:	a360      	add	r3, pc, #384	; (adr r3, 8008260 <atan+0x2b0>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f843 	bl	800016c <__adddf3>
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	f7f8 f9f5 	bl	80004d8 <__aeabi_dmul>
 80080ee:	a35e      	add	r3, pc, #376	; (adr r3, 8008268 <atan+0x2b8>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4680      	mov	r8, r0
 80080f6:	4689      	mov	r9, r1
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 f9ec 	bl	80004d8 <__aeabi_dmul>
 8008100:	a35b      	add	r3, pc, #364	; (adr r3, 8008270 <atan+0x2c0>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f82f 	bl	8000168 <__aeabi_dsub>
 800810a:	4632      	mov	r2, r6
 800810c:	463b      	mov	r3, r7
 800810e:	f7f8 f9e3 	bl	80004d8 <__aeabi_dmul>
 8008112:	a359      	add	r3, pc, #356	; (adr r3, 8008278 <atan+0x2c8>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f826 	bl	8000168 <__aeabi_dsub>
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	f7f8 f9da 	bl	80004d8 <__aeabi_dmul>
 8008124:	a356      	add	r3, pc, #344	; (adr r3, 8008280 <atan+0x2d0>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f81d 	bl	8000168 <__aeabi_dsub>
 800812e:	4632      	mov	r2, r6
 8008130:	463b      	mov	r3, r7
 8008132:	f7f8 f9d1 	bl	80004d8 <__aeabi_dmul>
 8008136:	a354      	add	r3, pc, #336	; (adr r3, 8008288 <atan+0x2d8>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f814 	bl	8000168 <__aeabi_dsub>
 8008140:	4632      	mov	r2, r6
 8008142:	463b      	mov	r3, r7
 8008144:	f7f8 f9c8 	bl	80004d8 <__aeabi_dmul>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4640      	mov	r0, r8
 800814e:	4649      	mov	r1, r9
 8008150:	f7f8 f80c 	bl	800016c <__adddf3>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	f7f8 f9be 	bl	80004d8 <__aeabi_dmul>
 800815c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	d144      	bne.n	80081f0 <atan+0x240>
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f7 fffd 	bl	8000168 <__aeabi_dsub>
 800816e:	e734      	b.n	8007fda <atan+0x2a>
 8008170:	2200      	movs	r2, #0
 8008172:	4b4c      	ldr	r3, [pc, #304]	; (80082a4 <atan+0x2f4>)
 8008174:	f7f7 fff8 	bl	8000168 <__aeabi_dsub>
 8008178:	2200      	movs	r2, #0
 800817a:	4606      	mov	r6, r0
 800817c:	460f      	mov	r7, r1
 800817e:	4b49      	ldr	r3, [pc, #292]	; (80082a4 <atan+0x2f4>)
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f7 fff2 	bl	800016c <__adddf3>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4630      	mov	r0, r6
 800818e:	4639      	mov	r1, r7
 8008190:	f7f8 facc 	bl	800072c <__aeabi_ddiv>
 8008194:	f04f 0a01 	mov.w	sl, #1
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	e767      	b.n	800806e <atan+0xbe>
 800819e:	4b43      	ldr	r3, [pc, #268]	; (80082ac <atan+0x2fc>)
 80081a0:	429e      	cmp	r6, r3
 80081a2:	dc1a      	bgt.n	80081da <atan+0x22a>
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b42      	ldr	r3, [pc, #264]	; (80082b0 <atan+0x300>)
 80081a8:	f7f7 ffde 	bl	8000168 <__aeabi_dsub>
 80081ac:	2200      	movs	r2, #0
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	4b3f      	ldr	r3, [pc, #252]	; (80082b0 <atan+0x300>)
 80081b4:	4620      	mov	r0, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	f7f8 f98e 	bl	80004d8 <__aeabi_dmul>
 80081bc:	2200      	movs	r2, #0
 80081be:	4b39      	ldr	r3, [pc, #228]	; (80082a4 <atan+0x2f4>)
 80081c0:	f7f7 ffd4 	bl	800016c <__adddf3>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 faae 	bl	800072c <__aeabi_ddiv>
 80081d0:	f04f 0a02 	mov.w	sl, #2
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	e749      	b.n	800806e <atan+0xbe>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	2000      	movs	r0, #0
 80081e0:	4934      	ldr	r1, [pc, #208]	; (80082b4 <atan+0x304>)
 80081e2:	f7f8 faa3 	bl	800072c <__aeabi_ddiv>
 80081e6:	f04f 0a03 	mov.w	sl, #3
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	e73e      	b.n	800806e <atan+0xbe>
 80081f0:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <atan+0x308>)
 80081f2:	4e32      	ldr	r6, [pc, #200]	; (80082bc <atan+0x30c>)
 80081f4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80081f8:	4456      	add	r6, sl
 80081fa:	449a      	add	sl, r3
 80081fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8008200:	f7f7 ffb2 	bl	8000168 <__aeabi_dsub>
 8008204:	4622      	mov	r2, r4
 8008206:	462b      	mov	r3, r5
 8008208:	f7f7 ffae 	bl	8000168 <__aeabi_dsub>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008214:	f7f7 ffa8 	bl	8000168 <__aeabi_dsub>
 8008218:	f1bb 0f00 	cmp.w	fp, #0
 800821c:	4604      	mov	r4, r0
 800821e:	460d      	mov	r5, r1
 8008220:	f6bf aee4 	bge.w	8007fec <atan+0x3c>
 8008224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008228:	461d      	mov	r5, r3
 800822a:	e6df      	b.n	8007fec <atan+0x3c>
 800822c:	4d24      	ldr	r5, [pc, #144]	; (80082c0 <atan+0x310>)
 800822e:	e6dd      	b.n	8007fec <atan+0x3c>
 8008230:	8800759c 	.word	0x8800759c
 8008234:	7e37e43c 	.word	0x7e37e43c
 8008238:	e322da11 	.word	0xe322da11
 800823c:	3f90ad3a 	.word	0x3f90ad3a
 8008240:	24760deb 	.word	0x24760deb
 8008244:	3fa97b4b 	.word	0x3fa97b4b
 8008248:	a0d03d51 	.word	0xa0d03d51
 800824c:	3fb10d66 	.word	0x3fb10d66
 8008250:	c54c206e 	.word	0xc54c206e
 8008254:	3fb745cd 	.word	0x3fb745cd
 8008258:	920083ff 	.word	0x920083ff
 800825c:	3fc24924 	.word	0x3fc24924
 8008260:	5555550d 	.word	0x5555550d
 8008264:	3fd55555 	.word	0x3fd55555
 8008268:	2c6a6c2f 	.word	0x2c6a6c2f
 800826c:	bfa2b444 	.word	0xbfa2b444
 8008270:	52defd9a 	.word	0x52defd9a
 8008274:	3fadde2d 	.word	0x3fadde2d
 8008278:	af749a6d 	.word	0xaf749a6d
 800827c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008280:	fe231671 	.word	0xfe231671
 8008284:	3fbc71c6 	.word	0x3fbc71c6
 8008288:	9998ebc4 	.word	0x9998ebc4
 800828c:	3fc99999 	.word	0x3fc99999
 8008290:	440fffff 	.word	0x440fffff
 8008294:	7ff00000 	.word	0x7ff00000
 8008298:	54442d18 	.word	0x54442d18
 800829c:	3ff921fb 	.word	0x3ff921fb
 80082a0:	3fdbffff 	.word	0x3fdbffff
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	3ff2ffff 	.word	0x3ff2ffff
 80082ac:	40037fff 	.word	0x40037fff
 80082b0:	3ff80000 	.word	0x3ff80000
 80082b4:	bff00000 	.word	0xbff00000
 80082b8:	08009130 	.word	0x08009130
 80082bc:	08009110 	.word	0x08009110
 80082c0:	bff921fb 	.word	0xbff921fb

080082c4 <fabs>:
 80082c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082c8:	4619      	mov	r1, r3
 80082ca:	4770      	bx	lr

080082cc <atan2>:
 80082cc:	f000 b854 	b.w	8008378 <__ieee754_atan2>

080082d0 <sqrt>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	b08b      	sub	sp, #44	; 0x2c
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	f000 f92b 	bl	8008534 <__ieee754_sqrt>
 80082de:	4b24      	ldr	r3, [pc, #144]	; (8008370 <sqrt+0xa0>)
 80082e0:	4680      	mov	r8, r0
 80082e2:	f993 a000 	ldrsb.w	sl, [r3]
 80082e6:	4689      	mov	r9, r1
 80082e8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80082ec:	d02b      	beq.n	8008346 <sqrt+0x76>
 80082ee:	4622      	mov	r2, r4
 80082f0:	462b      	mov	r3, r5
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fb89 	bl	8000a0c <__aeabi_dcmpun>
 80082fa:	4683      	mov	fp, r0
 80082fc:	bb18      	cbnz	r0, 8008346 <sqrt+0x76>
 80082fe:	2600      	movs	r6, #0
 8008300:	2700      	movs	r7, #0
 8008302:	4632      	mov	r2, r6
 8008304:	463b      	mov	r3, r7
 8008306:	4620      	mov	r0, r4
 8008308:	4629      	mov	r1, r5
 800830a:	f7f8 fb57 	bl	80009bc <__aeabi_dcmplt>
 800830e:	b1d0      	cbz	r0, 8008346 <sqrt+0x76>
 8008310:	2301      	movs	r3, #1
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4b17      	ldr	r3, [pc, #92]	; (8008374 <sqrt+0xa4>)
 8008316:	f8cd b020 	str.w	fp, [sp, #32]
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008320:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008324:	f1ba 0f00 	cmp.w	sl, #0
 8008328:	d112      	bne.n	8008350 <sqrt+0x80>
 800832a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800832e:	4668      	mov	r0, sp
 8008330:	f000 f9ac 	bl	800868c <matherr>
 8008334:	b1b8      	cbz	r0, 8008366 <sqrt+0x96>
 8008336:	9b08      	ldr	r3, [sp, #32]
 8008338:	b11b      	cbz	r3, 8008342 <sqrt+0x72>
 800833a:	f7fc f895 	bl	8004468 <__errno>
 800833e:	9b08      	ldr	r3, [sp, #32]
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	b00b      	add	sp, #44	; 0x2c
 800834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	f7f8 f9e8 	bl	800072c <__aeabi_ddiv>
 800835c:	f1ba 0f02 	cmp.w	sl, #2
 8008360:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008364:	d1e3      	bne.n	800832e <sqrt+0x5e>
 8008366:	f7fc f87f 	bl	8004468 <__errno>
 800836a:	2321      	movs	r3, #33	; 0x21
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	e7e2      	b.n	8008336 <sqrt+0x66>
 8008370:	20000274 	.word	0x20000274
 8008374:	08009150 	.word	0x08009150

08008378 <__ieee754_atan2>:
 8008378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	4256      	negs	r6, r2
 800837e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8008382:	4316      	orrs	r6, r2
 8008384:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008530 <__ieee754_atan2+0x1b8>
 8008388:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800838c:	454e      	cmp	r6, r9
 800838e:	4604      	mov	r4, r0
 8008390:	460d      	mov	r5, r1
 8008392:	469e      	mov	lr, r3
 8008394:	d808      	bhi.n	80083a8 <__ieee754_atan2+0x30>
 8008396:	4246      	negs	r6, r0
 8008398:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800839c:	4306      	orrs	r6, r0
 800839e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80083a2:	454e      	cmp	r6, r9
 80083a4:	4688      	mov	r8, r1
 80083a6:	d906      	bls.n	80083b6 <__ieee754_atan2+0x3e>
 80083a8:	4620      	mov	r0, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7f7 fede 	bl	800016c <__adddf3>
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	e030      	b.n	8008418 <__ieee754_atan2+0xa0>
 80083b6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80083ba:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80083be:	4316      	orrs	r6, r2
 80083c0:	d103      	bne.n	80083ca <__ieee754_atan2+0x52>
 80083c2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c6:	f7ff bdf3 	b.w	8007fb0 <atan>
 80083ca:	179e      	asrs	r6, r3, #30
 80083cc:	f006 0602 	and.w	r6, r6, #2
 80083d0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80083d4:	ea57 0100 	orrs.w	r1, r7, r0
 80083d8:	d107      	bne.n	80083ea <__ieee754_atan2+0x72>
 80083da:	2e02      	cmp	r6, #2
 80083dc:	d079      	beq.n	80084d2 <__ieee754_atan2+0x15a>
 80083de:	2e03      	cmp	r6, #3
 80083e0:	d11a      	bne.n	8008418 <__ieee754_atan2+0xa0>
 80083e2:	a541      	add	r5, pc, #260	; (adr r5, 80084e8 <__ieee754_atan2+0x170>)
 80083e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083e8:	e016      	b.n	8008418 <__ieee754_atan2+0xa0>
 80083ea:	ea5c 0102 	orrs.w	r1, ip, r2
 80083ee:	d106      	bne.n	80083fe <__ieee754_atan2+0x86>
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	da71      	bge.n	80084da <__ieee754_atan2+0x162>
 80083f6:	a53e      	add	r5, pc, #248	; (adr r5, 80084f0 <__ieee754_atan2+0x178>)
 80083f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083fc:	e00c      	b.n	8008418 <__ieee754_atan2+0xa0>
 80083fe:	45cc      	cmp	ip, r9
 8008400:	d123      	bne.n	800844a <__ieee754_atan2+0xd2>
 8008402:	4567      	cmp	r7, ip
 8008404:	d114      	bne.n	8008430 <__ieee754_atan2+0xb8>
 8008406:	2e02      	cmp	r6, #2
 8008408:	d00a      	beq.n	8008420 <__ieee754_atan2+0xa8>
 800840a:	2e03      	cmp	r6, #3
 800840c:	d00c      	beq.n	8008428 <__ieee754_atan2+0xb0>
 800840e:	2e01      	cmp	r6, #1
 8008410:	d15b      	bne.n	80084ca <__ieee754_atan2+0x152>
 8008412:	a539      	add	r5, pc, #228	; (adr r5, 80084f8 <__ieee754_atan2+0x180>)
 8008414:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008418:	4620      	mov	r0, r4
 800841a:	4629      	mov	r1, r5
 800841c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008420:	a537      	add	r5, pc, #220	; (adr r5, 8008500 <__ieee754_atan2+0x188>)
 8008422:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008426:	e7f7      	b.n	8008418 <__ieee754_atan2+0xa0>
 8008428:	a537      	add	r5, pc, #220	; (adr r5, 8008508 <__ieee754_atan2+0x190>)
 800842a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800842e:	e7f3      	b.n	8008418 <__ieee754_atan2+0xa0>
 8008430:	2e02      	cmp	r6, #2
 8008432:	d04e      	beq.n	80084d2 <__ieee754_atan2+0x15a>
 8008434:	2e03      	cmp	r6, #3
 8008436:	d0d4      	beq.n	80083e2 <__ieee754_atan2+0x6a>
 8008438:	2e01      	cmp	r6, #1
 800843a:	f04f 0400 	mov.w	r4, #0
 800843e:	d102      	bne.n	8008446 <__ieee754_atan2+0xce>
 8008440:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008444:	e7e8      	b.n	8008418 <__ieee754_atan2+0xa0>
 8008446:	2500      	movs	r5, #0
 8008448:	e7e6      	b.n	8008418 <__ieee754_atan2+0xa0>
 800844a:	454f      	cmp	r7, r9
 800844c:	d0d0      	beq.n	80083f0 <__ieee754_atan2+0x78>
 800844e:	eba7 070c 	sub.w	r7, r7, ip
 8008452:	153f      	asrs	r7, r7, #20
 8008454:	2f3c      	cmp	r7, #60	; 0x3c
 8008456:	dc1e      	bgt.n	8008496 <__ieee754_atan2+0x11e>
 8008458:	2b00      	cmp	r3, #0
 800845a:	da01      	bge.n	8008460 <__ieee754_atan2+0xe8>
 800845c:	373c      	adds	r7, #60	; 0x3c
 800845e:	db1e      	blt.n	800849e <__ieee754_atan2+0x126>
 8008460:	4620      	mov	r0, r4
 8008462:	4629      	mov	r1, r5
 8008464:	f7f8 f962 	bl	800072c <__aeabi_ddiv>
 8008468:	f7ff ff2c 	bl	80082c4 <fabs>
 800846c:	f7ff fda0 	bl	8007fb0 <atan>
 8008470:	4604      	mov	r4, r0
 8008472:	460d      	mov	r5, r1
 8008474:	2e01      	cmp	r6, #1
 8008476:	d015      	beq.n	80084a4 <__ieee754_atan2+0x12c>
 8008478:	2e02      	cmp	r6, #2
 800847a:	d017      	beq.n	80084ac <__ieee754_atan2+0x134>
 800847c:	2e00      	cmp	r6, #0
 800847e:	d0cb      	beq.n	8008418 <__ieee754_atan2+0xa0>
 8008480:	a323      	add	r3, pc, #140	; (adr r3, 8008510 <__ieee754_atan2+0x198>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f7 fe6d 	bl	8000168 <__aeabi_dsub>
 800848e:	a322      	add	r3, pc, #136	; (adr r3, 8008518 <__ieee754_atan2+0x1a0>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	e016      	b.n	80084c4 <__ieee754_atan2+0x14c>
 8008496:	a522      	add	r5, pc, #136	; (adr r5, 8008520 <__ieee754_atan2+0x1a8>)
 8008498:	e9d5 4500 	ldrd	r4, r5, [r5]
 800849c:	e7ea      	b.n	8008474 <__ieee754_atan2+0xfc>
 800849e:	2400      	movs	r4, #0
 80084a0:	2500      	movs	r5, #0
 80084a2:	e7e7      	b.n	8008474 <__ieee754_atan2+0xfc>
 80084a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80084a8:	461d      	mov	r5, r3
 80084aa:	e7b5      	b.n	8008418 <__ieee754_atan2+0xa0>
 80084ac:	a318      	add	r3, pc, #96	; (adr r3, 8008510 <__ieee754_atan2+0x198>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f7 fe57 	bl	8000168 <__aeabi_dsub>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	a116      	add	r1, pc, #88	; (adr r1, 8008518 <__ieee754_atan2+0x1a0>)
 80084c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c4:	f7f7 fe50 	bl	8000168 <__aeabi_dsub>
 80084c8:	e772      	b.n	80083b0 <__ieee754_atan2+0x38>
 80084ca:	a517      	add	r5, pc, #92	; (adr r5, 8008528 <__ieee754_atan2+0x1b0>)
 80084cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084d0:	e7a2      	b.n	8008418 <__ieee754_atan2+0xa0>
 80084d2:	a511      	add	r5, pc, #68	; (adr r5, 8008518 <__ieee754_atan2+0x1a0>)
 80084d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084d8:	e79e      	b.n	8008418 <__ieee754_atan2+0xa0>
 80084da:	a511      	add	r5, pc, #68	; (adr r5, 8008520 <__ieee754_atan2+0x1a8>)
 80084dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084e0:	e79a      	b.n	8008418 <__ieee754_atan2+0xa0>
 80084e2:	bf00      	nop
 80084e4:	f3af 8000 	nop.w
 80084e8:	54442d18 	.word	0x54442d18
 80084ec:	c00921fb 	.word	0xc00921fb
 80084f0:	54442d18 	.word	0x54442d18
 80084f4:	bff921fb 	.word	0xbff921fb
 80084f8:	54442d18 	.word	0x54442d18
 80084fc:	bfe921fb 	.word	0xbfe921fb
 8008500:	7f3321d2 	.word	0x7f3321d2
 8008504:	4002d97c 	.word	0x4002d97c
 8008508:	7f3321d2 	.word	0x7f3321d2
 800850c:	c002d97c 	.word	0xc002d97c
 8008510:	33145c07 	.word	0x33145c07
 8008514:	3ca1a626 	.word	0x3ca1a626
 8008518:	54442d18 	.word	0x54442d18
 800851c:	400921fb 	.word	0x400921fb
 8008520:	54442d18 	.word	0x54442d18
 8008524:	3ff921fb 	.word	0x3ff921fb
 8008528:	54442d18 	.word	0x54442d18
 800852c:	3fe921fb 	.word	0x3fe921fb
 8008530:	7ff00000 	.word	0x7ff00000

08008534 <__ieee754_sqrt>:
 8008534:	4b54      	ldr	r3, [pc, #336]	; (8008688 <__ieee754_sqrt+0x154>)
 8008536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853a:	438b      	bics	r3, r1
 800853c:	4606      	mov	r6, r0
 800853e:	460d      	mov	r5, r1
 8008540:	460a      	mov	r2, r1
 8008542:	460c      	mov	r4, r1
 8008544:	d10f      	bne.n	8008566 <__ieee754_sqrt+0x32>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	f7f7 ffc5 	bl	80004d8 <__aeabi_dmul>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4630      	mov	r0, r6
 8008554:	4629      	mov	r1, r5
 8008556:	f7f7 fe09 	bl	800016c <__adddf3>
 800855a:	4606      	mov	r6, r0
 800855c:	460d      	mov	r5, r1
 800855e:	4630      	mov	r0, r6
 8008560:	4629      	mov	r1, r5
 8008562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008566:	2900      	cmp	r1, #0
 8008568:	4607      	mov	r7, r0
 800856a:	4603      	mov	r3, r0
 800856c:	dc0e      	bgt.n	800858c <__ieee754_sqrt+0x58>
 800856e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008572:	ea5c 0707 	orrs.w	r7, ip, r7
 8008576:	d0f2      	beq.n	800855e <__ieee754_sqrt+0x2a>
 8008578:	b141      	cbz	r1, 800858c <__ieee754_sqrt+0x58>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	f7f7 fdf3 	bl	8000168 <__aeabi_dsub>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	f7f8 f8d1 	bl	800072c <__aeabi_ddiv>
 800858a:	e7e6      	b.n	800855a <__ieee754_sqrt+0x26>
 800858c:	1512      	asrs	r2, r2, #20
 800858e:	d074      	beq.n	800867a <__ieee754_sqrt+0x146>
 8008590:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008594:	07d5      	lsls	r5, r2, #31
 8008596:	f04f 0500 	mov.w	r5, #0
 800859a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800859e:	bf48      	it	mi
 80085a0:	0fd9      	lsrmi	r1, r3, #31
 80085a2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80085a6:	bf44      	itt	mi
 80085a8:	005b      	lslmi	r3, r3, #1
 80085aa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80085ae:	1051      	asrs	r1, r2, #1
 80085b0:	0fda      	lsrs	r2, r3, #31
 80085b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80085b6:	4628      	mov	r0, r5
 80085b8:	2216      	movs	r2, #22
 80085ba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	1987      	adds	r7, r0, r6
 80085c2:	42a7      	cmp	r7, r4
 80085c4:	bfde      	ittt	le
 80085c6:	19b8      	addle	r0, r7, r6
 80085c8:	1be4      	suble	r4, r4, r7
 80085ca:	19ad      	addle	r5, r5, r6
 80085cc:	0fdf      	lsrs	r7, r3, #31
 80085ce:	3a01      	subs	r2, #1
 80085d0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80085d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085dc:	d1f0      	bne.n	80085c0 <__ieee754_sqrt+0x8c>
 80085de:	f04f 0c20 	mov.w	ip, #32
 80085e2:	4696      	mov	lr, r2
 80085e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085e8:	4284      	cmp	r4, r0
 80085ea:	eb06 070e 	add.w	r7, r6, lr
 80085ee:	dc02      	bgt.n	80085f6 <__ieee754_sqrt+0xc2>
 80085f0:	d112      	bne.n	8008618 <__ieee754_sqrt+0xe4>
 80085f2:	429f      	cmp	r7, r3
 80085f4:	d810      	bhi.n	8008618 <__ieee754_sqrt+0xe4>
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	eb07 0e06 	add.w	lr, r7, r6
 80085fc:	da42      	bge.n	8008684 <__ieee754_sqrt+0x150>
 80085fe:	f1be 0f00 	cmp.w	lr, #0
 8008602:	db3f      	blt.n	8008684 <__ieee754_sqrt+0x150>
 8008604:	f100 0801 	add.w	r8, r0, #1
 8008608:	1a24      	subs	r4, r4, r0
 800860a:	4640      	mov	r0, r8
 800860c:	429f      	cmp	r7, r3
 800860e:	bf88      	it	hi
 8008610:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008614:	1bdb      	subs	r3, r3, r7
 8008616:	4432      	add	r2, r6
 8008618:	0064      	lsls	r4, r4, #1
 800861a:	f1bc 0c01 	subs.w	ip, ip, #1
 800861e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008622:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008626:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800862a:	d1dd      	bne.n	80085e8 <__ieee754_sqrt+0xb4>
 800862c:	4323      	orrs	r3, r4
 800862e:	d006      	beq.n	800863e <__ieee754_sqrt+0x10a>
 8008630:	1c54      	adds	r4, r2, #1
 8008632:	bf0b      	itete	eq
 8008634:	4662      	moveq	r2, ip
 8008636:	3201      	addne	r2, #1
 8008638:	3501      	addeq	r5, #1
 800863a:	f022 0201 	bicne.w	r2, r2, #1
 800863e:	106b      	asrs	r3, r5, #1
 8008640:	0852      	lsrs	r2, r2, #1
 8008642:	07e8      	lsls	r0, r5, #31
 8008644:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008648:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800864c:	bf48      	it	mi
 800864e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008652:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008656:	4616      	mov	r6, r2
 8008658:	e781      	b.n	800855e <__ieee754_sqrt+0x2a>
 800865a:	0adc      	lsrs	r4, r3, #11
 800865c:	3915      	subs	r1, #21
 800865e:	055b      	lsls	r3, r3, #21
 8008660:	2c00      	cmp	r4, #0
 8008662:	d0fa      	beq.n	800865a <__ieee754_sqrt+0x126>
 8008664:	02e6      	lsls	r6, r4, #11
 8008666:	d50a      	bpl.n	800867e <__ieee754_sqrt+0x14a>
 8008668:	f1c2 0020 	rsb	r0, r2, #32
 800866c:	fa23 f000 	lsr.w	r0, r3, r0
 8008670:	1e55      	subs	r5, r2, #1
 8008672:	4093      	lsls	r3, r2
 8008674:	4304      	orrs	r4, r0
 8008676:	1b4a      	subs	r2, r1, r5
 8008678:	e78a      	b.n	8008590 <__ieee754_sqrt+0x5c>
 800867a:	4611      	mov	r1, r2
 800867c:	e7f0      	b.n	8008660 <__ieee754_sqrt+0x12c>
 800867e:	0064      	lsls	r4, r4, #1
 8008680:	3201      	adds	r2, #1
 8008682:	e7ef      	b.n	8008664 <__ieee754_sqrt+0x130>
 8008684:	4680      	mov	r8, r0
 8008686:	e7bf      	b.n	8008608 <__ieee754_sqrt+0xd4>
 8008688:	7ff00000 	.word	0x7ff00000

0800868c <matherr>:
 800868c:	2000      	movs	r0, #0
 800868e:	4770      	bx	lr

08008690 <_init>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	bf00      	nop
 8008694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008696:	bc08      	pop	{r3}
 8008698:	469e      	mov	lr, r3
 800869a:	4770      	bx	lr

0800869c <_fini>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr
